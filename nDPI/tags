!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABORT	src/lib/protocols/rx.c	52;"	d	file:
ACC_ADM	src/lib/protocols/oscar.c	58;"	d	file:
ACERR_AUTOMATA_CLOSED	src/lib/third_party/include/actypes.h	/^    ACERR_AUTOMATA_CLOSED, \/* Automata is closed. after calling$/;"	e	enum:__anon7
ACERR_DUPLICATE_PATTERN	src/lib/third_party/include/actypes.h	/^    ACERR_DUPLICATE_PATTERN, \/* Duplicate patterns *\/$/;"	e	enum:__anon7
ACERR_LONG_PATTERN	src/lib/third_party/include/actypes.h	/^    ACERR_LONG_PATTERN, \/* Pattern length is longer than AC_PATTRN_MAX_LENGTH *\/$/;"	e	enum:__anon7
ACERR_SUCCESS	src/lib/third_party/include/actypes.h	/^    ACERR_SUCCESS = 0, \/* No error occurred *\/$/;"	e	enum:__anon7
ACERR_ZERO_PATTERN	src/lib/third_party/include/actypes.h	/^    ACERR_ZERO_PATTERN, \/* Empty pattern (zero length) *\/$/;"	e	enum:__anon7
ACK	src/lib/protocols/coap.c	30;"	d	file:
ACK	src/lib/protocols/rx.c	50;"	d	file:
ACKALL	src/lib/protocols/rx.c	53;"	d	file:
AC_ALPHABET_t	src/lib/third_party/include/actypes.h	/^typedef char AC_ALPHABET_t;$/;"	t
AC_AUTOMATA_t	src/lib/third_party/include/ahocorasick.h	/^} AC_AUTOMATA_t;$/;"	t	typeref:struct:__anon8
AC_ERROR_t	src/lib/third_party/include/actypes.h	/^  } AC_ERROR_t;$/;"	t	typeref:enum:__anon7
AC_MATCH_t	src/lib/third_party/include/actypes.h	/^} AC_MATCH_t;$/;"	t	typeref:struct:__anon6
AC_NODE_t	src/lib/third_party/include/node.h	/^} AC_NODE_t;$/;"	t	typeref:struct:ac_node
AC_PATTERN_t	src/lib/third_party/include/actypes.h	/^} AC_PATTERN_t;$/;"	t	typeref:struct:__anon4
AC_PATTRN_MAX_LENGTH	src/lib/third_party/include/actypes.h	133;"	d
AC_REP_t	src/lib/third_party/include/actypes.h	/^} AC_REP_t;$/;"	t	typeref:union:__anon3
AC_TEXT_t	src/lib/third_party/include/actypes.h	/^} AC_TEXT_t;$/;"	t	typeref:struct:__anon5
ADD_TO_DETECTION_BITMASK	src/include/ndpi_api.h	40;"	d
AGGRESSIVE_PERCENT	example/ndpi_util.h	43;"	d
BAD_FCS	example/ndpi_util.c	61;"	d	file:
BDEC_MAXDEPT	src/lib/protocols/btlib.h	25;"	d
BIT_TEST	src/lib/third_party/include/ndpi_patricia.h	56;"	d
BOS	src/lib/protocols/oscar.c	41;"	d	file:
BSTP	example/ndpi_util.c	51;"	d	file:
BT_ANNOUNCE	src/include/ndpi_typedefs.h	29;"	d
BUDDY_ICON_SERVER	src/lib/protocols/oscar.c	65;"	d	file:
BUDDY_LIST	src/lib/protocols/oscar.c	55;"	d	file:
BUILD_NUM	src/lib/protocols/oscar.c	46;"	d	file:
BUSY	src/lib/protocols/rx.c	51;"	d	file:
CHALLENGE	src/lib/protocols/rx.c	54;"	d	file:
CHAT_ROOM_ACT	src/lib/protocols/oscar.c	63;"	d	file:
CHAT_ROOM_SETUP	src/lib/protocols/oscar.c	62;"	d	file:
CISCO_D_PROTO	example/ndpi_util.c	44;"	d	file:
CLIENT_CNTRY	src/lib/protocols/oscar.c	49;"	d	file:
CLIENT_INIT_1	src/lib/protocols/rx.c	65;"	d	file:
CLIENT_INIT_2	src/lib/protocols/rx.c	72;"	d	file:
CLIENT_LANG	src/lib/protocols/oscar.c	48;"	d	file:
CLIENT_NAME	src/lib/protocols/oscar.c	40;"	d	file:
CLIENT_RECONNECT	src/lib/protocols/oscar.c	50;"	d	file:
CON	src/lib/protocols/coap.c	28;"	d	file:
CONNACK	src/lib/protocols/mqtt.c	/^	CONNACK = 2,$/;"	e	enum:MQTT_PACKET_TYPES	file:
CONNECT	src/lib/protocols/mqtt.c	/^	CONNECT = 1,$/;"	e	enum:MQTT_PACKET_TYPES	file:
DATA	src/lib/protocols/oscar.c	32;"	d	file:
DATA	src/lib/protocols/rx.c	49;"	d	file:
DB_LSP_PORT	src/lib/protocols/dropbox.c	29;"	d	file:
DEBUG	src/lib/protocols/rx.c	56;"	d	file:
DEBUG_TRACE	src/lib/protocols/btlib.c	185;"	d	file:
DECLTYPE	example/uthash.h	40;"	d
DECLTYPE	example/uthash.h	47;"	d
DECLTYPE	example/uthash.h	52;"	d
DECLTYPE_ASSIGN	example/uthash.h	53;"	d
DECLTYPE_ASSIGN	example/uthash.h	59;"	d
DHCP_CHADDR_LEN	src/lib/protocols/dhcp.c	27;"	d	file:
DHCP_FILE_LEN	src/lib/protocols/dhcp.c	29;"	d	file:
DHCP_OPTION_MAGIC_NUMBER	src/lib/protocols/dhcp.c	31;"	d	file:
DHCP_SNAME_LEN	src/lib/protocols/dhcp.c	28;"	d	file:
DHCP_VEND_LEN	src/lib/protocols/dhcp.c	30;"	d	file:
DIRECT_CONNECT_ADC_PEER	src/lib/protocols/directconnect.c	36;"	d	file:
DIRECT_CONNECT_TYPE_HUB	src/lib/protocols/directconnect.c	34;"	d	file:
DIRECT_CONNECT_TYPE_PEER	src/lib/protocols/directconnect.c	35;"	d	file:
DIR_DST	example/ndpi_util.h	45;"	d
DIR_SRC	example/ndpi_util.h	44;"	d
DISCONNECT	src/lib/protocols/mqtt.c	/^	DISCONNECT = 14$/;"	e	enum:MQTT_PACKET_TYPES	file:
DLT_LINUX_SLL	example/ndpi_util.c	67;"	d	file:
EAQ_DEFAULT_PORT	src/lib/protocols/eaq.c	29;"	d	file:
EAQ_DEFAULT_SIZE	src/lib/protocols/eaq.c	30;"	d	file:
ELMT_FROM_HH	example/uthash.h	111;"	d
EMAIL	src/lib/protocols/oscar.c	69;"	d	file:
EMPTY	src/lib/protocols/rx.c	64;"	d	file:
EPOCHFILETIME	example/ndpiReader.c	2154;"	d	file:
EPOCHFILETIME	example/ndpiReader.c	2156;"	d	file:
ETH_P_IP	example/ndpi_util.c	36;"	d	file:
ETH_P_IPV6	example/ndpi_util.c	40;"	d	file:
FCF_FROM_DS	example/ndpi_util.c	58;"	d	file:
FCF_SUBTYPE	example/ndpi_util.c	56;"	d	file:
FCF_TO_DS	example/ndpi_util.c	57;"	d	file:
FCF_TYPE	example/ndpi_util.c	55;"	d	file:
FLAGS_MASK	src/lib/protocols/dns.c	28;"	d	file:
FLAPVERSION	src/lib/protocols/oscar.c	28;"	d	file:
FTP_211_CODE	src/lib/protocols/attic/ftp.c	/^  FTP_211_CODE = 1 << 4,$/;"	e	enum:__anon9	file:
FTP_220_CODE	src/lib/protocols/attic/ftp.c	/^  FTP_220_CODE = 1 << 2,$/;"	e	enum:__anon9	file:
FTP_331_CODE	src/lib/protocols/attic/ftp.c	/^  FTP_331_CODE = 1 << 3,$/;"	e	enum:__anon9	file:
FTP_CODES	src/lib/protocols/attic/ftp.c	/^  FTP_CODES = ((1 << 5) - 1 - FTP_COMMANDS)$/;"	e	enum:__anon9	file:
FTP_COMMANDS	src/lib/protocols/attic/ftp.c	/^  FTP_COMMANDS = ((1 << 2) - 1),$/;"	e	enum:__anon9	file:
FTP_FEAT_CMD	src/lib/protocols/attic/ftp.c	/^  FTP_FEAT_CMD = 1 << 1,$/;"	e	enum:__anon9	file:
FTP_USER_CMD	src/lib/protocols/attic/ftp.c	/^  FTP_USER_CMD = 1 << 0,$/;"	e	enum:__anon9	file:
GE_SE_CTL	src/lib/protocols/oscar.c	53;"	d	file:
GIT_PORT	src/lib/protocols/git.c	25;"	d	file:
GTP_U_V1_PORT	example/ndpi_util.c	63;"	d	file:
HANGOUT_TCP_HIGH_PORT	src/lib/protocols/hangout.c	28;"	d	file:
HANGOUT_TCP_LOW_PORT	src/lib/protocols/hangout.c	27;"	d	file:
HANGOUT_UDP_HIGH_PORT	src/lib/protocols/hangout.c	26;"	d	file:
HANGOUT_UDP_LOW_PORT	src/lib/protocols/hangout.c	25;"	d	file:
HASH_ADD	example/uthash.h	339;"	d
HASH_ADD_BYHASHVALUE	example/uthash.h	336;"	d
HASH_ADD_BYHASHVALUE_INORDER	example/uthash.h	300;"	d
HASH_ADD_INORDER	example/uthash.h	303;"	d
HASH_ADD_INT	example/uthash.h	404;"	d
HASH_ADD_KEYPTR	example/uthash.h	329;"	d
HASH_ADD_KEYPTR_BYHASHVALUE	example/uthash.h	306;"	d
HASH_ADD_KEYPTR_BYHASHVALUE_INORDER	example/uthash.h	258;"	d
HASH_ADD_KEYPTR_INORDER	example/uthash.h	293;"	d
HASH_ADD_PTR	example/uthash.h	410;"	d
HASH_ADD_STR	example/uthash.h	398;"	d
HASH_ADD_TO_BKT	example/uthash.h	758;"	d
HASH_AKBI_INNER_LOOP	example/uthash.h	234;"	d
HASH_AKBI_INNER_LOOP	example/uthash.h	243;"	d
HASH_AKBI_INNER_LOOP	example/uthash.h	244;"	d
HASH_APPEND_LIST	example/uthash.h	226;"	d
HASH_BER	example/uthash.h	499;"	d
HASH_BKT_CAPACITY_THRESH	example/uthash.h	108;"	d
HASH_BLOOM_ADD	example/uthash.h	159;"	d
HASH_BLOOM_ADD	example/uthash.h	168;"	d
HASH_BLOOM_BITLEN	example/uthash.h	140;"	d
HASH_BLOOM_BITSET	example/uthash.h	156;"	d
HASH_BLOOM_BITTEST	example/uthash.h	157;"	d
HASH_BLOOM_BYTELEN	example/uthash.h	141;"	d
HASH_BLOOM_BYTELEN	example/uthash.h	170;"	d
HASH_BLOOM_FREE	example/uthash.h	151;"	d
HASH_BLOOM_FREE	example/uthash.h	167;"	d
HASH_BLOOM_MAKE	example/uthash.h	142;"	d
HASH_BLOOM_MAKE	example/uthash.h	166;"	d
HASH_BLOOM_SIGNATURE	example/uthash.h	1050;"	d
HASH_BLOOM_TEST	example/uthash.h	162;"	d
HASH_BLOOM_TEST	example/uthash.h	169;"	d
HASH_CLEAR	example/uthash.h	996;"	d
HASH_CNT	example/uthash.h	1026;"	d
HASH_COUNT	example/uthash.h	1025;"	d
HASH_DEL	example/uthash.h	414;"	d
HASH_DELETE	example/uthash.h	359;"	d
HASH_DEL_IN_BKT	example/uthash.h	772;"	d
HASH_EMIT_KEY	example/uthash.h	481;"	d
HASH_EMIT_KEY	example/uthash.h	488;"	d
HASH_EXPAND_BUCKETS	example/uthash.h	813;"	d
HASH_FCN	example/uthash.h	493;"	d
HASH_FCN	example/uthash.h	495;"	d
HASH_FIND	example/uthash.h	132;"	d
HASH_FIND_BYHASHVALUE	example/uthash.h	120;"	d
HASH_FIND_INT	example/uthash.h	402;"	d
HASH_FIND_IN_BKT	example/uthash.h	736;"	d
HASH_FIND_PTR	example/uthash.h	408;"	d
HASH_FIND_STR	example/uthash.h	396;"	d
HASH_FNV	example/uthash.h	522;"	d
HASH_FSCK	example/uthash.h	422;"	d
HASH_FSCK	example/uthash.h	474;"	d
HASH_INITIAL_NUM_BUCKETS	example/uthash.h	106;"	d
HASH_INITIAL_NUM_BUCKETS_LOG2	example/uthash.h	107;"	d
HASH_ITER	example/uthash.h	1015;"	d
HASH_ITER	example/uthash.h	1019;"	d
HASH_JEN	example/uthash.h	561;"	d
HASH_JEN_MIX	example/uthash.h	548;"	d
HASH_MAKE_TABLE	example/uthash.h	173;"	d
HASH_MUR	example/uthash.h	697;"	d
HASH_OAT	example/uthash.h	533;"	d
HASH_OOPS	example/uthash.h	421;"	d
HASH_OVERHEAD	example/uthash.h	1007;"	d
HASH_REPLACE	example/uthash.h	212;"	d
HASH_REPLACE_BYHASHVALUE	example/uthash.h	202;"	d
HASH_REPLACE_BYHASHVALUE_INORDER	example/uthash.h	192;"	d
HASH_REPLACE_INORDER	example/uthash.h	219;"	d
HASH_REPLACE_INT	example/uthash.h	406;"	d
HASH_REPLACE_PTR	example/uthash.h	412;"	d
HASH_REPLACE_STR	example/uthash.h	400;"	d
HASH_SAX	example/uthash.h	512;"	d
HASH_SELECT	example/uthash.h	958;"	d
HASH_SFH	example/uthash.h	612;"	d
HASH_SIGNATURE	example/uthash.h	1049;"	d
HASH_SORT	example/uthash.h	865;"	d
HASH_SRT	example/uthash.h	866;"	d
HASH_TO_BKT	example/uthash.h	342;"	d
HASH_VALUE	example/uthash.h	115;"	d
HH_FROM_ELMT	example/uthash.h	113;"	d
HTTP_METHOD_CONNECT	src/include/ndpi_typedefs.h	/^  HTTP_METHOD_CONNECT$/;"	e	enum:__anon20
HTTP_METHOD_DELETE	src/include/ndpi_typedefs.h	/^  HTTP_METHOD_DELETE,$/;"	e	enum:__anon20
HTTP_METHOD_GET	src/include/ndpi_typedefs.h	/^  HTTP_METHOD_GET,$/;"	e	enum:__anon20
HTTP_METHOD_HEAD	src/include/ndpi_typedefs.h	/^  HTTP_METHOD_HEAD,$/;"	e	enum:__anon20
HTTP_METHOD_OPTIONS	src/include/ndpi_typedefs.h	/^  HTTP_METHOD_OPTIONS,$/;"	e	enum:__anon20
HTTP_METHOD_POST	src/include/ndpi_typedefs.h	/^  HTTP_METHOD_POST,$/;"	e	enum:__anon20
HTTP_METHOD_PUT	src/include/ndpi_typedefs.h	/^  HTTP_METHOD_PUT,$/;"	e	enum:__anon20
HTTP_METHOD_TRACE	src/include/ndpi_typedefs.h	/^  HTTP_METHOD_TRACE,$/;"	e	enum:__anon20
HTTP_METHOD_UNKNOWN	src/include/ndpi_typedefs.h	/^  HTTP_METHOD_UNKNOWN = 0,$/;"	e	enum:__anon20
ICQ	src/lib/protocols/oscar.c	67;"	d	file:
IDLE_SCAN_BUDGET	example/ndpi_util.h	37;"	d
IDLE_SCAN_PERIOD	example/ndpi_util.h	35;"	d
IM	src/lib/protocols/oscar.c	56;"	d	file:
INIT_AUTH	src/lib/protocols/oscar.c	68;"	d	file:
IPVERSION	src/include/ndpi_win32.h	41;"	d
IS	src/lib/protocols/oscar.c	57;"	d	file:
IS_EXT	src/lib/protocols/oscar.c	70;"	d	file:
JABBER_MAX_STUN_PORTS	src/include/ndpi_typedefs.h	408;"	d
KEEP_ALIVE	src/lib/protocols/oscar.c	35;"	d	file:
LAST_PKT	src/lib/protocols/rx.c	68;"	d	file:
LOC_SRV	src/lib/protocols/oscar.c	54;"	d	file:
LOGIN_COOKIE	src/lib/protocols/oscar.c	42;"	d	file:
MAC_timestamp	src/include/ndpi_typedefs.h	/^  u_int64_t MAC_timestamp;$/;"	m	struct:ndpi_radiotap_header
MAJOR_VERSION	src/lib/protocols/oscar.c	43;"	d	file:
MATCH_CALBACK_f	src/lib/third_party/include/actypes.h	/^typedef int (*MATCH_CALBACK_f)(AC_MATCH_t *, void *);$/;"	t
MAXLINE	src/lib/third_party/include/ndpi_patricia.h	54;"	d
MAX_DEFAULT_PORTS	src/include/ndpi_define.h	166;"	d
MAX_IDLE_TIME	example/ndpi_util.h	36;"	d
MAX_NDPI_FLOWS	example/ndpi_util.h	39;"	d
MAX_NUM_IP_ADDRESS	example/ndpi_util.h	41;"	d
MAX_NUM_READER_THREADS	example/ndpi_util.h	34;"	d
MAX_NUM_STUN_PKTS	src/lib/protocols/stun.c	29;"	d	file:
MAX_PACKETS_FOR_MSN	src/lib/protocols/msn.c	28;"	d	file:
MAX_PACKET_COUNTER	src/include/ndpi_define.h	165;"	d
MAX_STR_LEN	src/lib/ndpi_main.c	1818;"	d	file:
MINOR_VERSION	src/lib/protocols/oscar.c	44;"	d	file:
MORE_1	src/lib/protocols/rx.c	71;"	d	file:
MPLS_MULTI	example/ndpi_util.c	48;"	d	file:
MPLS_UNI	example/ndpi_util.c	47;"	d	file:
MQTT_PACKET_TYPES	src/lib/protocols/mqtt.c	/^enum MQTT_PACKET_TYPES {$/;"	g	file:
MULTICONN_FLAGS	src/lib/protocols/oscar.c	47;"	d	file:
MUR_FMIX	example/uthash.h	688;"	d
MUR_GETBLOCK	example/uthash.h	666;"	d
MUR_GETBLOCK	example/uthash.h	682;"	d
MUR_ONE_THREE	example/uthash.h	676;"	d
MUR_ONE_THREE	example/uthash.h	680;"	d
MUR_PLUS0_ALIGNED	example/uthash.h	668;"	d
MUR_PLUS1_ALIGNED	example/uthash.h	669;"	d
MUR_PLUS2_ALIGNED	example/uthash.h	670;"	d
MUR_PLUS3_ALIGNED	example/uthash.h	671;"	d
MUR_ROTL32	example/uthash.h	687;"	d
MUR_THREE_ONE	example/uthash.h	674;"	d
MUR_THREE_ONE	example/uthash.h	678;"	d
MUR_TWO_TWO	example/uthash.h	675;"	d
MUR_TWO_TWO	example/uthash.h	679;"	d
NDPI_ADD_PROTOCOL_TO_BITMASK	src/include/ndpi_define.h	239;"	d
NDPI_BATTLEFIELD_CONNECTION_TIMEOUT	src/include/ndpi_define.h	171;"	d
NDPI_BITMASK_ADD	src/include/ndpi_define.h	230;"	d
NDPI_BITMASK_COMPARE	src/lib/ndpi_main.c	/^int NDPI_BITMASK_COMPARE(NDPI_PROTOCOL_BITMASK a, NDPI_PROTOCOL_BITMASK b) {$/;"	f
NDPI_BITMASK_DEL	src/include/ndpi_define.h	231;"	d
NDPI_BITMASK_IS_EMPTY	src/lib/ndpi_main.c	/^int NDPI_BITMASK_IS_EMPTY(NDPI_PROTOCOL_BITMASK a) {$/;"	f
NDPI_BITMASK_RESET	src/include/ndpi_define.h	232;"	d
NDPI_BITMASK_SET	src/include/ndpi_define.h	234;"	d
NDPI_BITMASK_SET_ALL	src/include/ndpi_define.h	233;"	d
NDPI_BITS	src/include/ndpi_define.h	215;"	d
NDPI_BT_PORTS	src/include/ndpi_typedefs.h	403;"	d
NDPI_CLR	src/include/ndpi_define.h	220;"	d
NDPI_COMPARE_IPV6_ADDRESS_STRUCTS	src/include/ndpi_define.h	210;"	d
NDPI_COMPARE_PROTOCOL_TO_BITMASK	src/include/ndpi_define.h	241;"	d
NDPI_CONTENT_AVI	src/include/ndpi_protocol_ids.h	79;"	d
NDPI_CONTENT_FLASH	src/include/ndpi_protocol_ids.h	80;"	d
NDPI_CONTENT_MMS	src/include/ndpi_protocol_ids.h	86;"	d
NDPI_CONTENT_MPEG	src/include/ndpi_protocol_ids.h	82;"	d
NDPI_CONTENT_OGG	src/include/ndpi_protocol_ids.h	81;"	d
NDPI_CONTENT_QUICKTIME	src/include/ndpi_protocol_ids.h	83;"	d
NDPI_CONTENT_REALMEDIA	src/include/ndpi_protocol_ids.h	84;"	d
NDPI_CONTENT_WEBM	src/include/ndpi_protocol_ids.h	197;"	d
NDPI_CONTENT_WINDOWSMEDIA	src/include/ndpi_protocol_ids.h	85;"	d
NDPI_DEBUG_DIRECT_DOWNLOAD_LINK_IP	src/lib/protocols/directdownloadlink.c	33;"	d	file:
NDPI_DEFAULT_MAX_TCP_RETRANSMISSION_WINDOW_SIZE	src/include/ndpi_define.h	157;"	d
NDPI_DEL_PROTOCOL_FROM_BITMASK	src/include/ndpi_define.h	240;"	d
NDPI_DETECTION_ONLY_IPV4	src/include/ndpi_api.h	37;"	d
NDPI_DETECTION_ONLY_IPV6	src/include/ndpi_api.h	38;"	d
NDPI_DETECTION_SUPPORT_IPV6	src/include/ndpi_protocol_ids.h	32;"	d
NDPI_DIRECTCONNECT_CONNECTION_IP_TICK_TIMEOUT	src/include/ndpi_define.h	168;"	d
NDPI_DST_HAS_PROTOCOL	src/include/ndpi_define.h	143;"	d
NDPI_DUMP_BITMASK	src/lib/ndpi_main.c	/^void NDPI_DUMP_BITMASK(NDPI_PROTOCOL_BITMASK a) {$/;"	f
NDPI_EGP_PROTOCOL_TYPE	src/include/ndpi_define.h	259;"	d
NDPI_FLOW_PROTOCOL_EXCLUDED	src/include/ndpi_define.h	152;"	d
NDPI_GNUTELLA_CONNECTION_TIMEOUT	src/include/ndpi_define.h	170;"	d
NDPI_GRE_PROTOCOL_TYPE	src/include/ndpi_define.h	256;"	d
NDPI_IAX_MAX_INFORMATION_ELEMENTS	src/lib/protocols/iax.c	30;"	d	file:
NDPI_ICMPV6_PROTOCOL_TYPE	src/include/ndpi_define.h	263;"	d
NDPI_ICMP_PROTOCOL_TYPE	src/include/ndpi_define.h	257;"	d
NDPI_IGMP_PROTOCOL_TYPE	src/include/ndpi_define.h	258;"	d
NDPI_IPIP_PROTOCOL_TYPE	src/include/ndpi_define.h	262;"	d
NDPI_IPSEC_PROTOCOL_AH	src/include/ndpi_define.h	255;"	d
NDPI_IPSEC_PROTOCOL_ESP	src/include/ndpi_define.h	254;"	d
NDPI_IP_STRING_SIZE	src/include/ndpi_typedefs.h	886;"	d
NDPI_IRC_CONNECTION_TIMEOUT	src/include/ndpi_define.h	169;"	d
NDPI_IRC_FIND_LESS	src/lib/protocols/irc.c	29;"	d	file:
NDPI_ISSET	src/include/ndpi_define.h	221;"	d
NDPI_IS_NOT_STUN	src/lib/protocols/stun.c	/^  NDPI_IS_NOT_STUN$/;"	e	enum:__anon14	file:
NDPI_IS_STUN	src/lib/protocols/stun.c	/^  NDPI_IS_STUN,$/;"	e	enum:__anon14	file:
NDPI_JABBER_FT_TIMEOUT	src/include/ndpi_define.h	180;"	d
NDPI_JABBER_STUN_TIMEOUT	src/include/ndpi_define.h	179;"	d
NDPI_LAST_IMPLEMENTED_PROTOCOL	src/include/ndpi_protocol_ids.h	281;"	d
NDPI_LOG	src/include/ndpi_define.h	184;"	d
NDPI_LOG	src/include/ndpi_define.h	196;"	d
NDPI_LOG	src/include/ndpi_define.h	198;"	d
NDPI_LOG_DEBUG	src/include/ndpi_typedefs.h	/^    NDPI_LOG_DEBUG$/;"	e	enum:__anon15
NDPI_LOG_ERROR	src/include/ndpi_typedefs.h	/^    NDPI_LOG_ERROR,$/;"	e	enum:__anon15
NDPI_LOG_TRACE	src/include/ndpi_typedefs.h	/^    NDPI_LOG_TRACE,$/;"	e	enum:__anon15
NDPI_MAX_DNS_REQUESTS	src/include/ndpi_define.h	293;"	d
NDPI_MAX_MDNS_REQUESTS	src/lib/protocols/mdns.c	27;"	d	file:
NDPI_MAX_NUM_CUSTOM_PROTOCOLS	src/include/ndpi_protocol_ids.h	284;"	d
NDPI_MAX_PARSE_LINES_PER_PACKET	src/include/ndpi_define.h	163;"	d
NDPI_MAX_SSL_REQUEST_SIZE	src/lib/protocols/ssl.c	30;"	d	file:
NDPI_MAX_SUPPORTED_PROTOCOLS	src/include/ndpi_protocol_ids.h	283;"	d
NDPI_NUM_BITS	src/include/ndpi_define.h	213;"	d
NDPI_NUM_FDS_BITS	src/include/ndpi_define.h	225;"	d
NDPI_ONE	src/include/ndpi_define.h	223;"	d
NDPI_OSPF_PROTOCOL_TYPE	src/include/ndpi_define.h	260;"	d
NDPI_PARSE_PACKET_LINE_INFO	src/include/ndpi_define.h	249;"	d
NDPI_POPO_IP_SUBNET_END	src/lib/protocols/attic/popo.c	56;"	d	file:
NDPI_POPO_IP_SUBNET_START	src/lib/protocols/attic/popo.c	55;"	d	file:
NDPI_PROTOCOL_1KXUN	src/include/ndpi_protocol_ids.h	246;"	d
NDPI_PROTOCOL_ACCEPTABLE	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_ACCEPTABLE,            \/* Ok but not encrypted *\/$/;"	e	enum:__anon22
NDPI_PROTOCOL_AFP	src/include/ndpi_protocol_ids.h	137;"	d
NDPI_PROTOCOL_AIMINI	src/include/ndpi_protocol_ids.h	139;"	d
NDPI_PROTOCOL_AMAZON	src/include/ndpi_protocol_ids.h	218;"	d
NDPI_PROTOCOL_AMQP	src/include/ndpi_protocol_ids.h	232;"	d
NDPI_PROTOCOL_APPLE	src/include/ndpi_protocol_ids.h	180;"	d
NDPI_PROTOCOL_APPLEJUICE	src/include/ndpi_protocol_ids.h	64;"	d
NDPI_PROTOCOL_APPLE_ICLOUD	src/include/ndpi_protocol_ids.h	183;"	d
NDPI_PROTOCOL_APPLE_ITUNES	src/include/ndpi_protocol_ids.h	185;"	d
NDPI_PROTOCOL_ARMAGETRON	src/include/ndpi_protocol_ids.h	144;"	d
NDPI_PROTOCOL_AYIYA	src/include/ndpi_protocol_ids.h	106;"	d
NDPI_PROTOCOL_BATTLEFIELD	src/include/ndpi_protocol_ids.h	111;"	d
NDPI_PROTOCOL_BGP	src/include/ndpi_protocol_ids.h	53;"	d
NDPI_PROTOCOL_BITMASK	src/include/ndpi_define.h	227;"	d
NDPI_PROTOCOL_BITTORRENT	src/include/ndpi_protocol_ids.h	77;"	d
NDPI_PROTOCOL_BJNP	src/include/ndpi_protocol_ids.h	245;"	d
NDPI_PROTOCOL_CATEGORY_CHAT	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_CATEGORY_CHAT,              \/* Instant messaging *\/$/;"	e	enum:__anon23
NDPI_PROTOCOL_CATEGORY_CLOUD	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_CATEGORY_CLOUD,             \/* Online cloud services *\/$/;"	e	enum:__anon23
NDPI_PROTOCOL_CATEGORY_COLLABORATIVE	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_CATEGORY_COLLABORATIVE,     \/* Software for collaborative development *\/$/;"	e	enum:__anon23
NDPI_PROTOCOL_CATEGORY_DATABASE	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_CATEGORY_DATABASE,          \/* Protocols for database communication *\/$/;"	e	enum:__anon23
NDPI_PROTOCOL_CATEGORY_FILE_TRANSFER	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_CATEGORY_FILE_TRANSFER,     \/* FTP and similar protocols *\/$/;"	e	enum:__anon23
NDPI_PROTOCOL_CATEGORY_GAME	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_CATEGORY_GAME,              \/* Online games *\/$/;"	e	enum:__anon23
NDPI_PROTOCOL_CATEGORY_MAIL_SEND	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_CATEGORY_MAIL_SEND,         \/* Protocols to send emails *\/$/;"	e	enum:__anon23
NDPI_PROTOCOL_CATEGORY_MAIL_SYNC	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_CATEGORY_MAIL_SYNC,         \/* Protocols to receive or sync emails *\/$/;"	e	enum:__anon23
NDPI_PROTOCOL_CATEGORY_MEDIA	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_CATEGORY_MEDIA,             \/* Multimedia and streaming *\/$/;"	e	enum:__anon23
NDPI_PROTOCOL_CATEGORY_NETWORK	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_CATEGORY_NETWORK,           \/* Network infrastructure protocols *\/$/;"	e	enum:__anon23
NDPI_PROTOCOL_CATEGORY_NETWORK_TOOL	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_CATEGORY_NETWORK_TOOL,      \/* Network administration and monitor protocols *\/$/;"	e	enum:__anon23
NDPI_PROTOCOL_CATEGORY_P2P	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_CATEGORY_P2P,               \/* File sharing and P2P *\/$/;"	e	enum:__anon23
NDPI_PROTOCOL_CATEGORY_REMOTE_ACCESS	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_CATEGORY_REMOTE_ACCESS,     \/* Remote access and control *\/$/;"	e	enum:__anon23
NDPI_PROTOCOL_CATEGORY_RPC	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_CATEGORY_RPC,               \/* High level network communication protocols *\/$/;"	e	enum:__anon23
NDPI_PROTOCOL_CATEGORY_SOCIAL_NETWORK	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_CATEGORY_SOCIAL_NETWORK,    \/* Social networks *\/$/;"	e	enum:__anon23
NDPI_PROTOCOL_CATEGORY_SYSTEM	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_CATEGORY_SYSTEM,            \/* System level applications *\/$/;"	e	enum:__anon23
NDPI_PROTOCOL_CATEGORY_UNSPECIFIED	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_CATEGORY_UNSPECIFIED = 0,   \/* For general services and unknown protocols *\/$/;"	e	enum:__anon23
NDPI_PROTOCOL_CATEGORY_VOIP	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_CATEGORY_VOIP,              \/* Real-time communications and conferencing *\/$/;"	e	enum:__anon23
NDPI_PROTOCOL_CATEGORY_VPN	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_CATEGORY_VPN,               \/* Virtual Private Networks *\/$/;"	e	enum:__anon23
NDPI_PROTOCOL_CATEGORY_WEB	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_CATEGORY_WEB,               \/* Web protocols and services *\/$/;"	e	enum:__anon23
NDPI_PROTOCOL_CISCOVPN	src/include/ndpi_protocol_ids.h	201;"	d
NDPI_PROTOCOL_CITRIX	src/include/ndpi_protocol_ids.h	172;"	d
NDPI_PROTOCOL_CITRIX_ONLINE	src/include/ndpi_protocol_ids.h	179;"	d
NDPI_PROTOCOL_CLOUDFLARE	src/include/ndpi_protocol_ids.h	268;"	d
NDPI_PROTOCOL_CNN	src/include/ndpi_protocol_ids.h	220;"	d
NDPI_PROTOCOL_COAP	src/include/ndpi_protocol_ids.h	67;"	d
NDPI_PROTOCOL_COLLECTD	src/include/ndpi_protocol_ids.h	211;"	d
NDPI_PROTOCOL_CORBA	src/include/ndpi_protocol_ids.h	208;"	d
NDPI_PROTOCOL_CROSSFIRE	src/include/ndpi_protocol_ids.h	145;"	d
NDPI_PROTOCOL_DCERPC	src/include/ndpi_protocol_ids.h	167;"	d
NDPI_PROTOCOL_DEEZER	src/include/ndpi_protocol_ids.h	255;"	d
NDPI_PROTOCOL_DHCP	src/include/ndpi_protocol_ids.h	58;"	d
NDPI_PROTOCOL_DHCPV6	src/include/ndpi_protocol_ids.h	143;"	d
NDPI_PROTOCOL_DIRECTCONNECT	src/include/ndpi_protocol_ids.h	65;"	d
NDPI_PROTOCOL_DIRECT_DOWNLOAD_LINK	src/include/ndpi_protocol_ids.h	62;"	d
NDPI_PROTOCOL_DNS	src/include/ndpi_protocol_ids.h	45;"	d
NDPI_PROTOCOL_DNSCRYPT	src/include/ndpi_protocol_ids.h	250;"	d
NDPI_PROTOCOL_DOFUS	src/include/ndpi_protocol_ids.h	146;"	d
NDPI_PROTOCOL_DRDA	src/include/ndpi_protocol_ids.h	278;"	d
NDPI_PROTOCOL_DROPBOX	src/include/ndpi_protocol_ids.h	161;"	d
NDPI_PROTOCOL_EAQ	src/include/ndpi_protocol_ids.h	230;"	d
NDPI_PROTOCOL_EBAY	src/include/ndpi_protocol_ids.h	219;"	d
NDPI_PROTOCOL_EDONKEY	src/include/ndpi_protocol_ids.h	76;"	d
NDPI_PROTOCOL_EPP	src/include/ndpi_protocol_ids.h	78;"	d
NDPI_PROTOCOL_FACEBOOK	src/include/ndpi_protocol_ids.h	159;"	d
NDPI_PROTOCOL_FASTTRACK	src/include/ndpi_protocol_ids.h	74;"	d
NDPI_PROTOCOL_FIESTA	src/include/ndpi_protocol_ids.h	147;"	d
NDPI_PROTOCOL_FILETOPIA	src/include/ndpi_protocol_ids.h	70;"	d
NDPI_PROTOCOL_FLORENSIA	src/include/ndpi_protocol_ids.h	148;"	d
NDPI_PROTOCOL_FREE_209	src/include/ndpi_protocol_ids.h	253;"	d
NDPI_PROTOCOL_FREE_217	src/include/ndpi_protocol_ids.h	264;"	d
NDPI_PROTOCOL_FREE_224	src/include/ndpi_protocol_ids.h	274;"	d
NDPI_PROTOCOL_FTP_CONTROL	src/include/ndpi_protocol_ids.h	41;"	d
NDPI_PROTOCOL_FTP_DATA	src/include/ndpi_protocol_ids.h	215;"	d
NDPI_PROTOCOL_FUN	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_FUN,                   \/* Pure fun protocol *\/$/;"	e	enum:__anon22
NDPI_PROTOCOL_GIT	src/include/ndpi_protocol_ids.h	277;"	d
NDPI_PROTOCOL_GITHUB	src/include/ndpi_protocol_ids.h	244;"	d
NDPI_PROTOCOL_GMAIL	src/include/ndpi_protocol_ids.h	162;"	d
NDPI_PROTOCOL_GNUTELLA	src/include/ndpi_protocol_ids.h	75;"	d
NDPI_PROTOCOL_GOOGLE	src/include/ndpi_protocol_ids.h	166;"	d
NDPI_PROTOCOL_GOOGLE_MAPS	src/include/ndpi_protocol_ids.h	163;"	d
NDPI_PROTOCOL_GTP	src/include/ndpi_protocol_ids.h	192;"	d
NDPI_PROTOCOL_GUILDWARS	src/include/ndpi_protocol_ids.h	149;"	d
NDPI_PROTOCOL_H323	src/include/ndpi_protocol_ids.h	198;"	d
NDPI_PROTOCOL_HALFLIFE2	src/include/ndpi_protocol_ids.h	115;"	d
NDPI_PROTOCOL_HANGOUT	src/include/ndpi_protocol_ids.h	242;"	d
NDPI_PROTOCOL_HEP	src/include/ndpi_protocol_ids.h	261;"	d
NDPI_PROTOCOL_HOTMAIL	src/include/ndpi_protocol_ids.h	61;"	d
NDPI_PROTOCOL_HOTSPOT_SHIELD	src/include/ndpi_protocol_ids.h	260;"	d
NDPI_PROTOCOL_HTTP	src/include/ndpi_protocol_ids.h	47;"	d
NDPI_PROTOCOL_HTTP_APPLICATION_ACTIVESYNC	src/include/ndpi_protocol_ids.h	150;"	d
NDPI_PROTOCOL_HTTP_CONNECT	src/include/ndpi_protocol_ids.h	170;"	d
NDPI_PROTOCOL_HTTP_DOWNLOAD	src/include/ndpi_protocol_ids.h	100;"	d
NDPI_PROTOCOL_HTTP_PROXY	src/include/ndpi_protocol_ids.h	171;"	d
NDPI_PROTOCOL_IAX	src/include/ndpi_protocol_ids.h	135;"	d
NDPI_PROTOCOL_ICECAST	src/include/ndpi_protocol_ids.h	92;"	d
NDPI_PROTOCOL_IFLIX	src/include/ndpi_protocol_ids.h	243;"	d
NDPI_PROTOCOL_INSTAGRAM	src/include/ndpi_protocol_ids.h	256;"	d
NDPI_PROTOCOL_IPP	src/include/ndpi_protocol_ids.h	46;"	d
NDPI_PROTOCOL_IP_EGP	src/include/ndpi_protocol_ids.h	123;"	d
NDPI_PROTOCOL_IP_GRE	src/include/ndpi_protocol_ids.h	120;"	d
NDPI_PROTOCOL_IP_ICMP	src/include/ndpi_protocol_ids.h	121;"	d
NDPI_PROTOCOL_IP_ICMPV6	src/include/ndpi_protocol_ids.h	142;"	d
NDPI_PROTOCOL_IP_IGMP	src/include/ndpi_protocol_ids.h	122;"	d
NDPI_PROTOCOL_IP_IPSEC	src/include/ndpi_protocol_ids.h	119;"	d
NDPI_PROTOCOL_IP_IP_IN_IP	src/include/ndpi_protocol_ids.h	126;"	d
NDPI_PROTOCOL_IP_OSPF	src/include/ndpi_protocol_ids.h	125;"	d
NDPI_PROTOCOL_IP_SCTP	src/include/ndpi_protocol_ids.h	124;"	d
NDPI_PROTOCOL_IP_VRRP	src/include/ndpi_protocol_ids.h	113;"	d
NDPI_PROTOCOL_IP_clear	src/lib/ndpi_main.c	/^void NDPI_PROTOCOL_IP_clear(ndpi_ip_addr_t * ip) {$/;"	f
NDPI_PROTOCOL_IP_is_set	src/lib/ndpi_main.c	/^int NDPI_PROTOCOL_IP_is_set(const ndpi_ip_addr_t * ip)$/;"	f
NDPI_PROTOCOL_IQIYI	src/include/ndpi_protocol_ids.h	247;"	d
NDPI_PROTOCOL_IRC	src/include/ndpi_protocol_ids.h	105;"	d
NDPI_PROTOCOL_IRC_MAXPORT	src/include/ndpi_typedefs.h	365;"	d
NDPI_PROTOCOL_KAKAOTALK	src/include/ndpi_protocol_ids.h	233;"	d
NDPI_PROTOCOL_KAKAOTALK_VOICE	src/include/ndpi_protocol_ids.h	234;"	d
NDPI_PROTOCOL_KERBEROS	src/include/ndpi_protocol_ids.h	151;"	d
NDPI_PROTOCOL_KONTIKI	src/include/ndpi_protocol_ids.h	72;"	d
NDPI_PROTOCOL_LASTFM	src/include/ndpi_protocol_ids.h	174;"	d
NDPI_PROTOCOL_LDAP	src/include/ndpi_protocol_ids.h	152;"	d
NDPI_PROTOCOL_LLMNR	src/include/ndpi_protocol_ids.h	194;"	d
NDPI_PROTOCOL_LOTUS_NOTES	src/include/ndpi_protocol_ids.h	190;"	d
NDPI_PROTOCOL_MAIL_IMAP	src/include/ndpi_protocol_ids.h	44;"	d
NDPI_PROTOCOL_MAIL_IMAPS	src/include/ndpi_protocol_ids.h	91;"	d
NDPI_PROTOCOL_MAIL_POP	src/include/ndpi_protocol_ids.h	42;"	d
NDPI_PROTOCOL_MAIL_POPS	src/include/ndpi_protocol_ids.h	63;"	d
NDPI_PROTOCOL_MAIL_SMTP	src/include/ndpi_protocol_ids.h	43;"	d
NDPI_PROTOCOL_MAIL_SMTPS	src/include/ndpi_protocol_ids.h	69;"	d
NDPI_PROTOCOL_MAPLESTORY	src/include/ndpi_protocol_ids.h	153;"	d
NDPI_PROTOCOL_MDNS	src/include/ndpi_protocol_ids.h	48;"	d
NDPI_PROTOCOL_MEGACO	src/include/ndpi_protocol_ids.h	221;"	d
NDPI_PROTOCOL_MGCP	src/include/ndpi_protocol_ids.h	134;"	d
NDPI_PROTOCOL_MICROSOFT	src/include/ndpi_protocol_ids.h	257;"	d
NDPI_PROTOCOL_MOVE	src/include/ndpi_protocol_ids.h	89;"	d
NDPI_PROTOCOL_MPEGTS	src/include/ndpi_protocol_ids.h	239;"	d
NDPI_PROTOCOL_MQTT	src/include/ndpi_protocol_ids.h	270;"	d
NDPI_PROTOCOL_MSN	src/include/ndpi_protocol_ids.h	108;"	d
NDPI_PROTOCOL_MSSQL_TDS	src/include/ndpi_protocol_ids.h	154;"	d
NDPI_PROTOCOL_MS_LYNC	src/include/ndpi_protocol_ids.h	213;"	d
NDPI_PROTOCOL_MS_ONE_DRIVE	src/include/ndpi_protocol_ids.h	269;"	d
NDPI_PROTOCOL_MYSQL	src/include/ndpi_protocol_ids.h	60;"	d
NDPI_PROTOCOL_NETBIOS	src/include/ndpi_protocol_ids.h	50;"	d
NDPI_PROTOCOL_NETFLIX	src/include/ndpi_protocol_ids.h	173;"	d
NDPI_PROTOCOL_NETFLOW	src/include/ndpi_protocol_ids.h	168;"	d
NDPI_PROTOCOL_NFS	src/include/ndpi_protocol_ids.h	51;"	d
NDPI_PROTOCOL_NOE	src/include/ndpi_protocol_ids.h	200;"	d
NDPI_PROTOCOL_NO_MASTER_PROTO	src/include/ndpi_protocol_ids.h	37;"	d
NDPI_PROTOCOL_NTP	src/include/ndpi_protocol_ids.h	49;"	d
NDPI_PROTOCOL_NULL	src/include/ndpi_typedefs.h	794;"	d
NDPI_PROTOCOL_NUM_CATEGORIES	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_NUM_CATEGORIES \/*$/;"	e	enum:__anon23
NDPI_PROTOCOL_OCS	src/include/ndpi_protocol_ids.h	266;"	d
NDPI_PROTOCOL_OFFICE_365	src/include/ndpi_protocol_ids.h	267;"	d
NDPI_PROTOCOL_OOKLA	src/include/ndpi_protocol_ids.h	231;"	d
NDPI_PROTOCOL_OPENDNS	src/include/ndpi_protocol_ids.h	276;"	d
NDPI_PROTOCOL_OPENFT	src/include/ndpi_protocol_ids.h	73;"	d
NDPI_PROTOCOL_OPENVPN	src/include/ndpi_protocol_ids.h	199;"	d
NDPI_PROTOCOL_ORACLE	src/include/ndpi_protocol_ids.h	207;"	d
NDPI_PROTOCOL_OSCAR	src/include/ndpi_protocol_ids.h	109;"	d
NDPI_PROTOCOL_PANDO	src/include/ndpi_protocol_ids.h	223;"	d
NDPI_PROTOCOL_PANDORA	src/include/ndpi_protocol_ids.h	227;"	d
NDPI_PROTOCOL_PCANYWHERE	src/include/ndpi_protocol_ids.h	130;"	d
NDPI_PROTOCOL_PLAIN_DETECTION	src/lib/protocols/bittorrent.c	31;"	d	file:
NDPI_PROTOCOL_POSTGRES	src/include/ndpi_protocol_ids.h	59;"	d
NDPI_PROTOCOL_POTENTIALLY_DANGEROUS	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_POTENTIALLY_DANGEROUS, \/* Be prepared to troubles *\/$/;"	e	enum:__anon22
NDPI_PROTOCOL_PPLIVE	src/include/ndpi_protocol_ids.h	93;"	d
NDPI_PROTOCOL_PPSTREAM	src/include/ndpi_protocol_ids.h	94;"	d
NDPI_PROTOCOL_PPTP	src/include/ndpi_protocol_ids.h	155;"	d
NDPI_PROTOCOL_QQ	src/include/ndpi_protocol_ids.h	88;"	d
NDPI_PROTOCOL_QQLIVE	src/include/ndpi_protocol_ids.h	101;"	d
NDPI_PROTOCOL_QUAKE	src/include/ndpi_protocol_ids.h	112;"	d
NDPI_PROTOCOL_QUIC	src/include/ndpi_protocol_ids.h	228;"	d
NDPI_PROTOCOL_QUICKPLAY	src/include/ndpi_protocol_ids.h	236;"	d
NDPI_PROTOCOL_RADIUS	src/include/ndpi_protocol_ids.h	186;"	d
NDPI_PROTOCOL_RDP	src/include/ndpi_protocol_ids.h	128;"	d
NDPI_PROTOCOL_REDIS	src/include/ndpi_protocol_ids.h	222;"	d
NDPI_PROTOCOL_REMOTE_SCAN	src/include/ndpi_protocol_ids.h	195;"	d
NDPI_PROTOCOL_RSYNC	src/include/ndpi_protocol_ids.h	206;"	d
NDPI_PROTOCOL_RTCP	src/include/ndpi_protocol_ids.h	205;"	d
NDPI_PROTOCOL_RTMP	src/include/ndpi_protocol_ids.h	214;"	d
NDPI_PROTOCOL_RTP	src/include/ndpi_protocol_ids.h	127;"	d
NDPI_PROTOCOL_RTSP	src/include/ndpi_protocol_ids.h	90;"	d
NDPI_PROTOCOL_RX	src/include/ndpi_protocol_ids.h	271;"	d
NDPI_PROTOCOL_SAFE	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_SAFE = 0,              \/* Safe protocol with encryption *\/$/;"	e	enum:__anon22
NDPI_PROTOCOL_SAFE_DETECTION	src/lib/protocols/bittorrent.c	29;"	d	file:
NDPI_PROTOCOL_SAP	src/include/ndpi_protocol_ids.h	191;"	d
NDPI_PROTOCOL_SFLOW	src/include/ndpi_protocol_ids.h	169;"	d
NDPI_PROTOCOL_SHOUTCAST	src/include/ndpi_protocol_ids.h	96;"	d
NDPI_PROTOCOL_SINA	src/include/ndpi_protocol_ids.h	241;"	d
NDPI_PROTOCOL_SIP	src/include/ndpi_protocol_ids.h	140;"	d
NDPI_PROTOCOL_SIZE	src/include/ndpi_protocol_ids.h	33;"	d
NDPI_PROTOCOL_SKINNY	src/include/ndpi_protocol_ids.h	204;"	d
NDPI_PROTOCOL_SKYFILE_POSTPAID	src/include/ndpi_protocol_ids.h	178;"	d
NDPI_PROTOCOL_SKYFILE_PREPAID	src/include/ndpi_protocol_ids.h	176;"	d
NDPI_PROTOCOL_SKYFILE_RUDICS	src/include/ndpi_protocol_ids.h	177;"	d
NDPI_PROTOCOL_SKYPE	src/include/ndpi_protocol_ids.h	165;"	d
NDPI_PROTOCOL_SLACK	src/include/ndpi_protocol_ids.h	158;"	d
NDPI_PROTOCOL_SMB	src/include/ndpi_protocol_ids.h	56;"	d
NDPI_PROTOCOL_SMPP	src/include/ndpi_protocol_ids.h	248;"	d
NDPI_PROTOCOL_SNAPCHAT	src/include/ndpi_protocol_ids.h	240;"	d
NDPI_PROTOCOL_SNMP	src/include/ndpi_protocol_ids.h	54;"	d
NDPI_PROTOCOL_SOCKS	src/include/ndpi_protocol_ids.h	212;"	d
NDPI_PROTOCOL_SOCRATES	src/include/ndpi_protocol_ids.h	66;"	d
NDPI_PROTOCOL_SOPCAST	src/include/ndpi_protocol_ids.h	97;"	d
NDPI_PROTOCOL_SOULSEEK	src/include/ndpi_protocol_ids.h	103;"	d
NDPI_PROTOCOL_SPOTIFY	src/include/ndpi_protocol_ids.h	196;"	d
NDPI_PROTOCOL_SSDP	src/include/ndpi_protocol_ids.h	52;"	d
NDPI_PROTOCOL_SSH	src/include/ndpi_protocol_ids.h	132;"	d
NDPI_PROTOCOL_SSL	src/include/ndpi_protocol_ids.h	131;"	d
NDPI_PROTOCOL_SSL_NO_CERT	src/include/ndpi_protocol_ids.h	104;"	d
NDPI_PROTOCOL_STARCRAFT	src/include/ndpi_protocol_ids.h	258;"	d
NDPI_PROTOCOL_STEALTHNET	src/include/ndpi_protocol_ids.h	138;"	d
NDPI_PROTOCOL_STEAM	src/include/ndpi_protocol_ids.h	114;"	d
NDPI_PROTOCOL_STUN	src/include/ndpi_protocol_ids.h	118;"	d
NDPI_PROTOCOL_SYSLOG	src/include/ndpi_protocol_ids.h	57;"	d
NDPI_PROTOCOL_TEAMSPEAK	src/include/ndpi_protocol_ids.h	202;"	d
NDPI_PROTOCOL_TEAMVIEWER	src/include/ndpi_protocol_ids.h	188;"	d
NDPI_PROTOCOL_TELEGRAM	src/include/ndpi_protocol_ids.h	225;"	d
NDPI_PROTOCOL_TELNET	src/include/ndpi_protocol_ids.h	117;"	d
NDPI_PROTOCOL_TEREDO	src/include/ndpi_protocol_ids.h	259;"	d
NDPI_PROTOCOL_TFTP	src/include/ndpi_protocol_ids.h	136;"	d
NDPI_PROTOCOL_THUNDER	src/include/ndpi_protocol_ids.h	102;"	d
NDPI_PROTOCOL_TOR	src/include/ndpi_protocol_ids.h	203;"	d
NDPI_PROTOCOL_TRUPHONE	src/include/ndpi_protocol_ids.h	141;"	d
NDPI_PROTOCOL_TUENTI	src/include/ndpi_protocol_ids.h	189;"	d
NDPI_PROTOCOL_TVANTS	src/include/ndpi_protocol_ids.h	98;"	d
NDPI_PROTOCOL_TVUPLAYER	src/include/ndpi_protocol_ids.h	99;"	d
NDPI_PROTOCOL_TWITCH	src/include/ndpi_protocol_ids.h	235;"	d
NDPI_PROTOCOL_TWITTER	src/include/ndpi_protocol_ids.h	160;"	d
NDPI_PROTOCOL_UBNTAC2	src/include/ndpi_protocol_ids.h	71;"	d
NDPI_PROTOCOL_UBUNTUONE	src/include/ndpi_protocol_ids.h	209;"	d
NDPI_PROTOCOL_UNENCRYPTED_JABBER	src/include/ndpi_protocol_ids.h	107;"	d
NDPI_PROTOCOL_UNKNOWN	src/include/ndpi_protocol_ids.h	35;"	d
NDPI_PROTOCOL_UNKNOWN	src/include/ndpi_protocol_ids.h	40;"	d
NDPI_PROTOCOL_UNRATED	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_UNRATED                \/* No idea *\/$/;"	e	enum:__anon22
NDPI_PROTOCOL_UNSAFE	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_UNSAFE,                \/* Protocol with a safe version existing  what should be used instead *\/$/;"	e	enum:__anon22
NDPI_PROTOCOL_UNSAFE_DETECTION	src/lib/protocols/bittorrent.c	28;"	d	file:
NDPI_PROTOCOL_UPNP	src/include/ndpi_protocol_ids.h	193;"	d
NDPI_PROTOCOL_USENET	src/include/ndpi_protocol_ids.h	133;"	d
NDPI_PROTOCOL_VEVO	src/include/ndpi_protocol_ids.h	226;"	d
NDPI_PROTOCOL_VHUA	src/include/ndpi_protocol_ids.h	224;"	d
NDPI_PROTOCOL_VIBER	src/include/ndpi_protocol_ids.h	184;"	d
NDPI_PROTOCOL_VMWARE	src/include/ndpi_protocol_ids.h	68;"	d
NDPI_PROTOCOL_VNC	src/include/ndpi_protocol_ids.h	129;"	d
NDPI_PROTOCOL_WARCRAFT3	src/include/ndpi_protocol_ids.h	156;"	d
NDPI_PROTOCOL_WAZE	src/include/ndpi_protocol_ids.h	175;"	d
NDPI_PROTOCOL_WEBEX	src/include/ndpi_protocol_ids.h	181;"	d
NDPI_PROTOCOL_WEBSEED_DETECTION	src/lib/protocols/bittorrent.c	32;"	d	file:
NDPI_PROTOCOL_WECHAT	src/include/ndpi_protocol_ids.h	237;"	d
NDPI_PROTOCOL_WHATSAPP	src/include/ndpi_protocol_ids.h	182;"	d
NDPI_PROTOCOL_WHATSAPP_VOICE	src/include/ndpi_protocol_ids.h	229;"	d
NDPI_PROTOCOL_WHOIS_DAS	src/include/ndpi_protocol_ids.h	210;"	d
NDPI_PROTOCOL_WIKIPEDIA	src/include/ndpi_protocol_ids.h	216;"	d
NDPI_PROTOCOL_WINDOWS_UPDATE	src/include/ndpi_protocol_ids.h	187;"	d
NDPI_PROTOCOL_WORLDOFWARCRAFT	src/include/ndpi_protocol_ids.h	116;"	d
NDPI_PROTOCOL_WORLD_OF_KUNG_FU	src/include/ndpi_protocol_ids.h	157;"	d
NDPI_PROTOCOL_XBOX	src/include/ndpi_protocol_ids.h	87;"	d
NDPI_PROTOCOL_XDMCP	src/include/ndpi_protocol_ids.h	55;"	d
NDPI_PROTOCOL_YAHOO	src/include/ndpi_protocol_ids.h	110;"	d
NDPI_PROTOCOL_YOUTUBE	src/include/ndpi_protocol_ids.h	164;"	d
NDPI_PROTOCOL_ZATTOO	src/include/ndpi_protocol_ids.h	95;"	d
NDPI_PROTOCOL_ZMQ	src/include/ndpi_protocol_ids.h	217;"	d
NDPI_RTSP_CONNECTION_TIMEOUT	src/include/ndpi_define.h	173;"	d
NDPI_SAVE_AS_BITMASK	src/include/ndpi_define.h	243;"	d
NDPI_SCTP_PROTOCOL_TYPE	src/include/ndpi_define.h	261;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_COMPLETE_TRAFFIC	src/include/ndpi_define.h	91;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_HAS_PAYLOAD	src/include/ndpi_define.h	87;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_INT_TCP	src/include/ndpi_define.h	84;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_INT_TCP_OR_UDP	src/include/ndpi_define.h	86;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_INT_UDP	src/include/ndpi_define.h	85;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_IP	src/include/ndpi_define.h	83;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_IPV4_OR_IPV6	src/include/ndpi_define.h	90;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_IPV6	src/include/ndpi_define.h	89;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_NO_TCP_RETRANSMISSION	src/include/ndpi_define.h	88;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_SIZE	src/include/ndpi_define.h	80;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_TCP	src/include/ndpi_define.h	95;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_TCP_OR_UDP	src/include/ndpi_define.h	97;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_TCP_OR_UDP_WITHOUT_RETRANSMISSION	src/include/ndpi_define.h	127;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_TCP_OR_UDP_WITH_PAYLOAD	src/include/ndpi_define.h	119;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_TCP_OR_UDP_WITH_PAYLOAD_WITHOUT_RETRANSMISSION	src/include/ndpi_define.h	135;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_TCP_WITHOUT_RETRANSMISSION	src/include/ndpi_define.h	123;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_TCP_WITH_PAYLOAD	src/include/ndpi_define.h	110;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_TCP_WITH_PAYLOAD_WITHOUT_RETRANSMISSION	src/include/ndpi_define.h	131;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_UDP	src/include/ndpi_define.h	96;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_UDP_WITH_PAYLOAD	src/include/ndpi_define.h	115;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_V4_V6_TCP	src/include/ndpi_define.h	105;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_V4_V6_TCP_OR_UDP	src/include/ndpi_define.h	107;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_V4_V6_TCP_OR_UDP_WITHOUT_RETRANSMISSION	src/include/ndpi_define.h	129;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_V4_V6_TCP_OR_UDP_WITH_PAYLOAD	src/include/ndpi_define.h	121;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_V4_V6_TCP_OR_UDP_WITH_PAYLOAD_WITHOUT_RETRANSMISSION	src/include/ndpi_define.h	137;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_V4_V6_TCP_WITHOUT_RETRANSMISSION	src/include/ndpi_define.h	125;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_V4_V6_TCP_WITH_PAYLOAD	src/include/ndpi_define.h	112;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_V4_V6_TCP_WITH_PAYLOAD_WITHOUT_RETRANSMISSION	src/include/ndpi_define.h	133;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_V4_V6_UDP	src/include/ndpi_define.h	106;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_V4_V6_UDP_WITH_PAYLOAD	src/include/ndpi_define.h	117;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_V6_TCP	src/include/ndpi_define.h	100;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_V6_TCP_OR_UDP	src/include/ndpi_define.h	102;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_V6_TCP_OR_UDP_WITHOUT_RETRANSMISSION	src/include/ndpi_define.h	128;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_V6_TCP_OR_UDP_WITH_PAYLOAD	src/include/ndpi_define.h	120;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_V6_TCP_OR_UDP_WITH_PAYLOAD_WITHOUT_RETRANSMISSION	src/include/ndpi_define.h	136;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_V6_TCP_WITHOUT_RETRANSMISSION	src/include/ndpi_define.h	124;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_V6_TCP_WITH_PAYLOAD	src/include/ndpi_define.h	111;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_V6_TCP_WITH_PAYLOAD_WITHOUT_RETRANSMISSION	src/include/ndpi_define.h	132;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_V6_UDP	src/include/ndpi_define.h	101;"	d
NDPI_SELECTION_BITMASK_PROTOCOL_V6_UDP_WITH_PAYLOAD	src/include/ndpi_define.h	116;"	d
NDPI_SET	src/include/ndpi_define.h	219;"	d
NDPI_SOULSEEK_CONNECTION_IP_TICK_TIMEOUT	src/include/ndpi_define.h	181;"	d
NDPI_SRC_HAS_PROTOCOL	src/include/ndpi_define.h	141;"	d
NDPI_SRC_OR_DST_HAS_PROTOCOL	src/include/ndpi_define.h	145;"	d
NDPI_STATICSTRING_LEN	src/include/ndpi_define.h	207;"	d
NDPI_THUNDER_CONNECTION_TIMEOUT	src/include/ndpi_define.h	172;"	d
NDPI_TVANTS_CONNECTION_TIMEOUT	src/include/ndpi_define.h	174;"	d
NDPI_USE_ASYMMETRIC_DETECTION	src/include/ndpi_define.h	79;"	d
NDPI_YAHOO_DETECT_HTTP_CONNECTIONS	src/include/ndpi_define.h	175;"	d
NDPI_YAHOO_LAN_VIDEO_TIMEOUT	src/include/ndpi_define.h	176;"	d
NDPI_ZATTOO_CONNECTION_TIMEOUT	src/include/ndpi_define.h	177;"	d
NDPI_ZATTOO_FLASH_TIMEOUT	src/include/ndpi_define.h	178;"	d
NDPI_ZERO	src/include/ndpi_define.h	222;"	d
NO_ADD_TO_DETECTION_BITMASK	src/include/ndpi_api.h	41;"	d
NO_CON	src/lib/protocols/coap.c	29;"	d	file:
NO_DECLTYPE	example/uthash.h	42;"	d
NO_DECLTYPE	example/uthash.h	45;"	d
NO_SAVE_DETECTION_BITMASK_AS_UNKNOWN	src/include/ndpi_api.h	43;"	d
NUM_BREEDS	src/include/ndpi_typedefs.h	733;"	d
NUM_ROOTS	example/ndpi_util.h	38;"	d
O_ERROR	src/lib/protocols/oscar.c	33;"	d	file:
PACK_OFF	src/include/ndpi_typedefs.h	/^} PACK_OFF;$/;"	v	typeref:struct:ndpi_cdp
PACK_OFF	src/include/ndpi_typedefs.h	/^} PACK_OFF;$/;"	v	typeref:struct:ndpi_chdlc
PACK_OFF	src/include/ndpi_typedefs.h	/^} PACK_OFF;$/;"	v	typeref:struct:ndpi_dns_packet_header
PACK_OFF	src/include/ndpi_typedefs.h	/^} PACK_OFF;$/;"	v	typeref:struct:ndpi_ethhdr
PACK_OFF	src/include/ndpi_typedefs.h	/^} PACK_OFF;$/;"	v	typeref:struct:ndpi_iphdr
PACK_OFF	src/include/ndpi_typedefs.h	/^} PACK_OFF;$/;"	v	typeref:struct:ndpi_ipv6hdr
PACK_OFF	src/include/ndpi_typedefs.h	/^} PACK_OFF;$/;"	v	typeref:struct:ndpi_llc_header_snap
PACK_OFF	src/include/ndpi_typedefs.h	/^} PACK_OFF;$/;"	v	typeref:struct:ndpi_mpls_header
PACK_OFF	src/include/ndpi_typedefs.h	/^} PACK_OFF;$/;"	v	typeref:struct:ndpi_radiotap_header
PACK_OFF	src/include/ndpi_typedefs.h	/^} PACK_OFF;$/;"	v	typeref:struct:ndpi_slarp
PACK_OFF	src/include/ndpi_typedefs.h	/^} PACK_OFF;$/;"	v	typeref:struct:ndpi_snap_extension
PACK_OFF	src/include/ndpi_typedefs.h	/^} PACK_OFF;$/;"	v	typeref:struct:ndpi_tcphdr
PACK_OFF	src/include/ndpi_typedefs.h	/^} PACK_OFF;$/;"	v	typeref:struct:ndpi_udphdr
PACK_OFF	src/include/ndpi_typedefs.h	/^} PACK_OFF;$/;"	v	typeref:struct:ndpi_wifi_header
PACK_OFF	src/include/ndpi_typedefs.h	81;"	d
PACK_OFF	src/include/ndpi_typedefs.h	85;"	d
PACK_OFF	src/lib/protocols/amqp.c	/^} PACK_OFF;$/;"	v	typeref:struct:amqp_header
PACK_OFF	src/lib/protocols/rx.c	/^} PACK_OFF;$/;"	v	typeref:struct:ndpi_rx_header
PACK_ON	src/include/ndpi_typedefs.h	80;"	d
PACK_ON	src/include/ndpi_typedefs.h	84;"	d
PARAMS_4	src/lib/protocols/rx.c	60;"	d	file:
PARAM_1	src/lib/protocols/rx.c	57;"	d	file:
PARAM_2	src/lib/protocols/rx.c	58;"	d	file:
PARAM_3	src/lib/protocols/rx.c	59;"	d	file:
PASSWD	src/lib/protocols/oscar.c	39;"	d	file:
PATRICIA_DATA_GET	src/lib/third_party/include/ndpi_patricia.h	148;"	d
PATRICIA_DATA_SET	src/lib/third_party/include/ndpi_patricia.h	149;"	d
PATRICIA_IPV6	src/lib/third_party/include/ndpi_patricia.h	45;"	d
PATRICIA_IPV6	src/lib/third_party/include/ndpi_patricia.h	47;"	d
PATRICIA_MAXBITS	src/lib/third_party/include/ndpi_patricia.h	141;"	d
PATRICIA_MAXBITS	src/lib/third_party/include/ndpi_patricia.h	143;"	d
PATRICIA_MAX_THREADS	src/lib/third_party/src/ndpi_patricia.c	130;"	d	file:
PATRICIA_NBIT	src/lib/third_party/include/ndpi_patricia.h	145;"	d
PATRICIA_NBYTE	src/lib/third_party/include/ndpi_patricia.h	146;"	d
PATRICIA_WALK	src/lib/third_party/include/ndpi_patricia.h	151;"	d
PATRICIA_WALK_ALL	src/lib/third_party/include/ndpi_patricia.h	159;"	d
PATRICIA_WALK_BREAK	src/lib/third_party/include/ndpi_patricia.h	167;"	d
PATRICIA_WALK_END	src/lib/third_party/include/ndpi_patricia.h	175;"	d
PINGREQ	src/lib/protocols/mqtt.c	/^	PINGREQ = 12,$/;"	e	enum:MQTT_PACKET_TYPES	file:
PINGRESP	src/lib/protocols/mqtt.c	/^	PINGRESP = 13,$/;"	e	enum:MQTT_PACKET_TYPES	file:
PLUS_0	src/lib/protocols/rx.c	67;"	d	file:
PLUS_1	src/lib/protocols/rx.c	69;"	d	file:
PLUS_2	src/lib/protocols/rx.c	70;"	d	file:
PMS	src/lib/protocols/oscar.c	60;"	d	file:
POINT_VERSION	src/lib/protocols/oscar.c	45;"	d	file:
POPUP	src/lib/protocols/oscar.c	59;"	d	file:
POP_BIT_APOP	src/lib/protocols/mail_pop.c	31;"	d	file:
POP_BIT_AUTH	src/lib/protocols/mail_pop.c	30;"	d	file:
POP_BIT_CAPA	src/lib/protocols/mail_pop.c	34;"	d	file:
POP_BIT_DELE	src/lib/protocols/mail_pop.c	39;"	d	file:
POP_BIT_LIST	src/lib/protocols/mail_pop.c	35;"	d	file:
POP_BIT_PASS	src/lib/protocols/mail_pop.c	33;"	d	file:
POP_BIT_RETR	src/lib/protocols/mail_pop.c	38;"	d	file:
POP_BIT_STAT	src/lib/protocols/mail_pop.c	36;"	d	file:
POP_BIT_STLS	src/lib/protocols/mail_pop.c	40;"	d	file:
POP_BIT_UIDL	src/lib/protocols/mail_pop.c	37;"	d	file:
POP_BIT_USER	src/lib/protocols/mail_pop.c	32;"	d	file:
PPPoE	example/ndpi_util.c	49;"	d	file:
PPS_PORT	src/lib/protocols/ppstream.c	27;"	d	file:
PUBACK	src/lib/protocols/mqtt.c	/^	PUBACK = 4,$/;"	e	enum:MQTT_PACKET_TYPES	file:
PUBCOMP	src/lib/protocols/mqtt.c	/^	PUBCOMP = 7,$/;"	e	enum:MQTT_PACKET_TYPES	file:
PUBLISH	src/lib/protocols/mqtt.c	/^	PUBLISH = 3,$/;"	e	enum:MQTT_PACKET_TYPES	file:
PUBREC	src/lib/protocols/mqtt.c	/^	PUBREC = 5,$/;"	e	enum:MQTT_PACKET_TYPES	file:
PUBREL	src/lib/protocols/mqtt.c	/^	PUBREL = 6,$/;"	e	enum:MQTT_PACKET_TYPES	file:
P_CONTROL_HARD_RESET_CLIENT_V1	src/lib/protocols/openvpn.c	28;"	d	file:
P_CONTROL_HARD_RESET_CLIENT_V2	src/lib/protocols/openvpn.c	29;"	d	file:
P_CONTROL_HARD_RESET_SERVER_V1	src/lib/protocols/openvpn.c	30;"	d	file:
P_CONTROL_HARD_RESET_SERVER_V2	src/lib/protocols/openvpn.c	31;"	d	file:
P_HARD_RESET_CLIENT_MAX_COUNT	src/lib/protocols/openvpn.c	38;"	d	file:
P_HARD_RESET_PACKET_ID_OFFSET	src/lib/protocols/openvpn.c	36;"	d	file:
P_HMAC_128	src/lib/protocols/openvpn.c	34;"	d	file:
P_HMAC_160	src/lib/protocols/openvpn.c	35;"	d	file:
P_OPCODE_MASK	src/lib/protocols/openvpn.c	32;"	d	file:
P_PACKET_ID_ARRAY_LEN_OFFSET	src/lib/protocols/openvpn.c	37;"	d	file:
P_SHA1_HMAC_SIZE	src/lib/protocols/openvpn.c	33;"	d	file:
REALLOC_CHUNK_ALLNODES	src/lib/third_party/src/ahocorasick.c	30;"	d	file:
REALLOC_CHUNK_MATCHSTR	src/lib/third_party/src/node.c	29;"	d	file:
REALLOC_CHUNK_OUTGOING	src/lib/third_party/src/node.c	32;"	d	file:
REQ_ACK	src/lib/protocols/rx.c	66;"	d	file:
RESPONSE	src/lib/protocols/rx.c	55;"	d	file:
RST	src/lib/protocols/coap.c	31;"	d	file:
SAVE_DETECTION_BITMASK_AS_UNKNOWN	src/include/ndpi_api.h	42;"	d
SCREEN_NAME	src/lib/protocols/oscar.c	38;"	d	file:
SERVER_STORED_INFO	src/lib/protocols/oscar.c	66;"	d	file:
SIGNOFF	src/lib/protocols/oscar.c	34;"	d	file:
SIGNON	src/lib/protocols/oscar.c	31;"	d	file:
SIZEOF_FLOW_STRUCT	src/include/ndpi_api.h	35;"	d
SIZEOF_ID_STRUCT	src/include/ndpi_api.h	34;"	d
SLARP	example/ndpi_util.c	43;"	d	file:
SMTP_BIT_220	src/lib/protocols/mail_smtp.c	30;"	d	file:
SMTP_BIT_235	src/lib/protocols/mail_smtp.c	32;"	d	file:
SMTP_BIT_250	src/lib/protocols/mail_smtp.c	31;"	d	file:
SMTP_BIT_334	src/lib/protocols/mail_smtp.c	33;"	d	file:
SMTP_BIT_354	src/lib/protocols/mail_smtp.c	34;"	d	file:
SMTP_BIT_AUTH	src/lib/protocols/mail_smtp.c	38;"	d	file:
SMTP_BIT_DATA	src/lib/protocols/mail_smtp.c	40;"	d	file:
SMTP_BIT_HELO_EHLO	src/lib/protocols/mail_smtp.c	35;"	d	file:
SMTP_BIT_MAIL	src/lib/protocols/mail_smtp.c	36;"	d	file:
SMTP_BIT_NOOP	src/lib/protocols/mail_smtp.c	41;"	d	file:
SMTP_BIT_RCPT	src/lib/protocols/mail_smtp.c	37;"	d	file:
SMTP_BIT_RSET	src/lib/protocols/mail_smtp.c	42;"	d	file:
SMTP_BIT_STARTTLS	src/lib/protocols/mail_smtp.c	39;"	d	file:
SMTP_BIT_TlRM	src/lib/protocols/mail_smtp.c	43;"	d	file:
SNAP	example/ndpi_util.c	50;"	d	file:
SNAP_EXT	src/include/ndpi_typedefs.h	30;"	d
SSDP_HTTP	src/lib/protocols/ssdp.c	57;"	d	file:
STREQ	src/lib/protocols/btlib.c	186;"	d	file:
SUBACK	src/lib/protocols/mqtt.c	/^	SUBACK = 9,$/;"	e	enum:MQTT_PACKET_TYPES	file:
SUBSCRIBE	src/lib/protocols/mqtt.c	/^	SUBSCRIBE = 8,$/;"	e	enum:MQTT_PACKET_TYPES	file:
TICK_RESOLUTION	example/ndpi_util.h	40;"	d
TZSP_PORT	example/ndpi_util.c	64;"	d	file:
UNSUBACK	src/lib/protocols/mqtt.c	/^	UNSUBACK = 11,$/;"	e	enum:MQTT_PACKET_TYPES	file:
UNSUBSCRIBE	src/lib/protocols/mqtt.c	/^	UNSUBSCRIBE = 10,$/;"	e	enum:MQTT_PACKET_TYPES	file:
UPDATED_TREE	example/ndpi_util.h	42;"	d
USER_SRCH	src/lib/protocols/oscar.c	64;"	d	file:
USS	src/lib/protocols/oscar.c	61;"	d	file:
UTHASH_H	example/uthash.h	25;"	d
UTHASH_VERSION	example/uthash.h	27;"	d
UT_hash_bucket	example/uthash.h	/^typedef struct UT_hash_bucket {$/;"	s
UT_hash_bucket	example/uthash.h	/^} UT_hash_bucket;$/;"	t	typeref:struct:UT_hash_bucket
UT_hash_handle	example/uthash.h	/^typedef struct UT_hash_handle {$/;"	s
UT_hash_handle	example/uthash.h	/^} UT_hash_handle;$/;"	t	typeref:struct:UT_hash_handle
UT_hash_table	example/uthash.h	/^typedef struct UT_hash_table {$/;"	s
UT_hash_table	example/uthash.h	/^} UT_hash_table;$/;"	t	typeref:struct:UT_hash_table
VERSION	src/lib/protocols/rx.c	61;"	d	file:
VLAN	example/ndpi_util.c	46;"	d	file:
WIFI_DATA	example/ndpi_util.c	54;"	d	file:
WP	example/uthash.h	672;"	d
YMSG_str	src/lib/protocols/yahoo.c	/^  u_int8_t YMSG_str[4];$/;"	m	struct:ndpi_yahoo_header	file:
_AC_TYPES_H_	src/lib/third_party/include/actypes.h	22;"	d
_AUTOMATA_H_	src/lib/third_party/include/ahocorasick.h	22;"	d
_CRT_SECURE_NO_WARNINGS	src/include/ndpi_win32.h	36;"	d
_GNU_SOURCE	example/ndpiReader.c	22;"	d	file:
_NDPI_PATRICIA_H	src/lib/third_party/include/ndpi_patricia.h	42;"	d
_NODE_H_	src/lib/third_party/include/node.h	22;"	d
_WS2TCPIP_H_	src/include/ndpi_win32.h	39;"	d
__BIG_ENDIAN__	src/include/ndpi_define.h	40;"	d
__BIG_ENDIAN__	src/include/ndpi_define.h	51;"	d
__BIG_ENDIAN__	src/include/ndpi_define.h	65;"	d
__BIG_ENDIAN__	src/include/ndpi_define.h	73;"	d
__BYTE_ORDER	src/include/ndpi_define.h	36;"	d
__LITTLE_ENDIAN	src/include/ndpi_define.h	64;"	d
__LITTLE_ENDIAN__	src/include/ndpi_define.h	38;"	d
__LITTLE_ENDIAN__	src/include/ndpi_define.h	47;"	d
__LITTLE_ENDIAN__	src/include/ndpi_define.h	57;"	d
__LITTLE_ENDIAN__	src/include/ndpi_define.h	63;"	d
__LITTLE_ENDIAN__	src/include/ndpi_define.h	71;"	d
__NDPI_API_H__	src/include/ndpi_api.h	26;"	d
__NDPI_DEFINE_INCLUDE_FILE__	src/include/ndpi_define.h	24;"	d
__NDPI_INCLUDES_H__	src/include/ndpi_includes.h	25;"	d
__NDPI_MAIN_H__	src/include/ndpi_main.h	25;"	d
__NDPI_PROTOCOLS_DEFAULT_H__	src/include/ndpi_protocol_ids.h	30;"	d
__NDPI_PROTOCOLS_H__	src/include/ndpi_protocols.h	26;"	d
__NDPI_TYPEDEFS_H__	src/include/ndpi_typedefs.h	25;"	d
__NDPI_UNIX_INCLUDE_FILE__	src/include/ndpi_unix.h	25;"	d
__NDPI_UTIL_H__	example/ndpi_util.h	30;"	d
__NDPI_WIN32_H__	src/include/ndpi_win32.h	25;"	d
__crc32	example/ndpi_util.c	/^static void __crc32(const void* data, size_t n_bytes, uint32_t* crc) {$/;"	f	file:
__flow_detected_callback	example/ndpi_util.h	/^  ndpi_workflow_callback_ptr __flow_detected_callback;  \/\/ 完成探测后的回调函数 (on_protocol_discovered)$/;"	m	struct:ndpi_workflow
__flow_detected_udata	example/ndpi_util.h	/^  void * __flow_detected_udata;                         \/\/ 传递给__flow_detected_callback回调函数的参数$/;"	m	struct:ndpi_workflow
__flow_giveup_callback	example/ndpi_util.h	/^  ndpi_workflow_callback_ptr __flow_giveup_callback;$/;"	m	struct:ndpi_workflow
__flow_giveup_udata	example/ndpi_util.h	/^  void * __flow_giveup_udata;$/;"	m	struct:ndpi_workflow
_bpf_filter	example/ndpiReader.c	/^static char *_bpf_filter      = NULL; \/**< bpf filter  指向一个BPF过滤字串 *\/$/;"	v	file:
_jsonFilePath	example/ndpiReader.c	/^static char *_jsonFilePath    = NULL; \/**< JSON file path  指向一个JSON文件路径 *\/$/;"	v	file:
_ndpi_automa	src/include/ndpi_typedefs.h	/^typedef struct _ndpi_automa {$/;"	s
_ndpi_flow_free	src/lib/ndpi_main.c	/^static void  (*_ndpi_flow_free)(void *ptr);     \/\/ 定义了ndpi封装的flow_free函数指针(2.0版本尚未使用)$/;"	v	file:
_ndpi_flow_malloc	src/lib/ndpi_main.c	/^static void *(*_ndpi_flow_malloc)(size_t size); \/\/ 定义了ndpi封装的flow_malloc函数指针(2.0版本尚未使用)$/;"	v	file:
_ndpi_free	src/lib/ndpi_main.c	/^static void  (*_ndpi_free)(void *ptr);      \/\/ 定义了一个ndpi封装的free函数指针$/;"	v	file:
_ndpi_malloc	src/lib/ndpi_main.c	/^static void *(*_ndpi_malloc)(size_t size);  \/\/ 定义了一个ndpi封装的malloc函数指针$/;"	v	file:
_patricia_node_t	src/lib/third_party/include/ndpi_patricia.h	/^typedef struct _patricia_node_t {$/;"	s
_patricia_tree_t	src/lib/third_party/include/ndpi_patricia.h	/^typedef struct _patricia_tree_t {$/;"	s
_pcap_file	example/ndpiReader.c	/^static char *_pcap_file[MAX_NUM_READER_THREADS]; \/**< Ingress pcap file\/interfaces  记录了所有传入的pcap文件或捕获接口 *\/$/;"	v	file:
_print_safe_str	src/lib/protocols/btlib.c	/^static void _print_safe_str(char *msg,char *k,const u_int8_t *s,size_t l) {$/;"	f	file:
_protoFilePath	example/ndpiReader.c	/^static char *_protoFilePath   = NULL; \/**< Protocol file path  指向一个协议文件路径 *\/$/;"	v	file:
_statsFilePath	example/ndpiReader.c	/^static char *_statsFilePath   = NULL; \/**< Top stats file path *\/$/;"	v	file:
_tmain	example/Win32/pcapExample/pcapExample.cpp	/^int _tmain(int argc, _TCHAR* argv[])$/;"	f
a	src/lib/protocols/btlib.h	/^	} a;$/;"	m	struct:bt_parse_protocol	typeref:struct:bt_parse_protocol::__anon11
ac_automa	src/include/ndpi_typedefs.h	/^  void *ac_automa; \/* Real type is AC_AUTOMATA_t *\/$/;"	m	struct:_ndpi_automa
ac_automa_finalized	src/include/ndpi_typedefs.h	/^  u_int8_t ac_automa_finalized;$/;"	m	struct:_ndpi_automa
ac_automata_add	src/lib/third_party/src/ahocorasick.c	/^AC_ERROR_t ac_automata_add (AC_AUTOMATA_t * thiz, AC_PATTERN_t * patt)$/;"	f
ac_automata_display	src/lib/third_party/src/ahocorasick.c	/^void ac_automata_display (AC_AUTOMATA_t * thiz, char repcast)$/;"	f
ac_automata_finalize	src/lib/third_party/src/ahocorasick.c	/^void ac_automata_finalize (AC_AUTOMATA_t * thiz)$/;"	f
ac_automata_init	src/lib/third_party/src/ahocorasick.c	/^AC_AUTOMATA_t * ac_automata_init (MATCH_CALBACK_f mc)$/;"	f
ac_automata_register_nodeptr	src/lib/third_party/src/ahocorasick.c	/^static void ac_automata_register_nodeptr (AC_AUTOMATA_t * thiz, AC_NODE_t * node)$/;"	f	file:
ac_automata_release	src/lib/third_party/src/ahocorasick.c	/^void ac_automata_release (AC_AUTOMATA_t * thiz)$/;"	f
ac_automata_reset	src/lib/third_party/src/ahocorasick.c	/^void ac_automata_reset (AC_AUTOMATA_t * thiz)$/;"	f
ac_automata_search	src/lib/third_party/src/ahocorasick.c	/^int ac_automata_search (AC_AUTOMATA_t * thiz, AC_TEXT_t * txt, void * param)$/;"	f
ac_automata_set_failure	src/lib/third_party/src/ahocorasick.c	/^static void ac_automata_set_failure$/;"	f	file:
ac_automata_traverse_setfailure	src/lib/third_party/src/ahocorasick.c	/^static void ac_automata_traverse_setfailure$/;"	f	file:
ac_automata_union_matchstrs	src/lib/third_party/src/ahocorasick.c	/^static void ac_automata_union_matchstrs (AC_NODE_t * node)$/;"	f	file:
ac_match_handler	src/lib/ndpi_main.c	/^static int ac_match_handler(AC_MATCH_t *m, void *param) {$/;"	f	file:
ac_node	src/lib/third_party/include/node.h	/^typedef struct ac_node$/;"	s
accept_line	src/include/ndpi_typedefs.h	/^  struct ndpi_int_one_line_struct accept_line;$/;"	m	struct:ndpi_packet_struct	typeref:struct:ndpi_packet_struct::ndpi_int_one_line_struct
accum_t	example/ndpi_util.c	/^typedef unsigned long accum_t;$/;"	t	file:
ack	src/include/ndpi_typedefs.h	/^  u_int16_t doff:4, res1:4, cwr:1, ece:1, urg:1, ack:1, psh:1, rst:1, syn:1, fin:1;$/;"	m	struct:ndpi_tcphdr
ack	src/include/ndpi_typedefs.h	/^  u_int16_t res1:4, doff:4, fin:1, syn:1, rst:1, psh:1, ack:1, urg:1, ece:1, cwr:1;$/;"	m	struct:ndpi_tcphdr
ack_nr	src/lib/protocols/bittorrent.c	/^  u_int16_t sequence_nr, ack_nr;$/;"	m	struct:ndpi_utp_hdr	file:
ack_seq	src/include/ndpi_typedefs.h	/^  u_int32_t ack_seq;$/;"	m	struct:ndpi_tcphdr
actual_payload_len	src/include/ndpi_typedefs.h	/^  u_int16_t actual_payload_len; \/\/ 缺省从payload_packet_len同步过来$/;"	m	struct:ndpi_packet_struct
add	src/lib/third_party/include/ndpi_patricia.h	/^  } add;$/;"	m	struct:the_prefix_t	typeref:union:the_prefix_t::__anon2
addDefaultPort	src/lib/ndpi_main.c	/^static void addDefaultPort(ndpi_port_range *range,$/;"	f	file:
add_to_ptree	src/lib/ndpi_main.c	/^static patricia_node_t* add_to_ptree(patricia_tree_t *tree, int family,$/;"	f	file:
additional_rrs	src/include/ndpi_typedefs.h	/^  u_int16_t additional_rrs;$/;"	m	struct:ndpi_dns_packet_header
additional_rrs	src/lib/protocols/netbios.c	/^  u_int16_t transaction_id, flags, questions, answer_rrs, authority_rrs, additional_rrs;$/;"	m	struct:netbios_header	file:
addr	example/ndpiReader.c	/^    char addr[48];$/;"	m	struct:info_pair	file:
addr	example/ndpiReader.c	/^    char addr[48];$/;"	m	struct:node_a	file:
addr	src/include/ndpi_typedefs.h	/^  u_int8_t addr;          \/* 0x0F (Unicast) - 0x8F (Broadcast) *\/$/;"	m	struct:ndpi_chdlc
addr_1	src/include/ndpi_typedefs.h	/^  u_int32_t addr_1;$/;"	m	struct:ndpi_slarp
addr_2	src/include/ndpi_typedefs.h	/^  u_int32_t addr_2;$/;"	m	struct:ndpi_slarp
addr_node	example/ndpiReader.c	/^}addr_node;$/;"	t	typeref:struct:node_a	file:
addr_tree	example/ndpiReader.c	/^  addr_node *addr_tree; \/* to hold distinct IP addresses *\/$/;"	m	struct:port_stats	file:
addroute	src/lib/third_party/include/ndpi_patricia.h	59;"	d
afpHeader	src/lib/protocols/afp.c	/^struct afpHeader {$/;"	s	file:
aimini_stage	src/include/ndpi_typedefs.h	/^  u_int32_t aimini_stage:5;$/;"	m	struct:ndpi_flow_udp_struct
all_nodes	src/lib/third_party/include/ahocorasick.h	/^  AC_NODE_t ** all_nodes;$/;"	m	struct:__anon8
all_nodes_max	src/lib/third_party/include/ahocorasick.h	/^  unsigned int all_nodes_max; \/* Current max allocated memory for *all_nodes *\/$/;"	m	struct:__anon8
all_nodes_num	src/lib/third_party/include/ahocorasick.h	/^  unsigned int all_nodes_num; \/* Number of all nodes in the automata *\/$/;"	m	struct:__anon8
alpha	src/lib/third_party/include/node.h	/^  AC_ALPHABET_t alpha; \/* Edge alpha *\/$/;"	m	struct:edge
amqp_header	src/lib/protocols/amqp.c	/^struct amqp_header {$/;"	s	file:
answer	src/include/ndpi_typedefs.h	/^      char answer[96];$/;"	m	struct:ndpi_flow_struct::__anon26::__anon31
answer_rrs	src/lib/protocols/netbios.c	/^  u_int16_t transaction_id, flags, questions, answer_rrs, authority_rrs, additional_rrs;$/;"	m	struct:netbios_header	file:
app_protocol	example/ndpiReader.c	/^  u_int16_t master_protocol \/* e.g. HTTP *\/, app_protocol \/* e.g. FaceBook *\/;$/;"	m	struct:ndpi_packet_trailer	file:
app_protocol	src/include/ndpi_typedefs.h	/^  u_int16_t app_protocol; \/* e.g. FaceBook  对应detected_protocol_stack[0] *\/$/;"	m	struct:ndpi_proto
asc	wireshark/ndpi.lua	/^function asc(a,b) return (a < b) end$/;"	f
astring	src/lib/third_party/include/actypes.h	/^  AC_ALPHABET_t * astring; \/* String of alphabets *\/$/;"	m	struct:__anon4
astring	src/lib/third_party/include/actypes.h	/^  AC_ALPHABET_t * astring; \/* String of alphabets *\/$/;"	m	struct:__anon5
atomic	src/include/ndpi_typedefs.h	/^typedef struct atomic {$/;"	s
atomic_t	src/include/ndpi_typedefs.h	/^} atomic_t;$/;"	t	typeref:struct:atomic
authority_rrs	src/include/ndpi_typedefs.h	/^  u_int16_t authority_rrs;$/;"	m	struct:ndpi_dns_packet_header
authority_rrs	src/lib/protocols/netbios.c	/^  u_int16_t transaction_id, flags, questions, answer_rrs, authority_rrs, additional_rrs;$/;"	m	struct:netbios_header	file:
automataUnitTest	example/ndpiReader.c	/^void automataUnitTest() {$/;"	f
automata_open	src/lib/third_party/include/ahocorasick.h	/^  unsigned short automata_open;$/;"	m	struct:__anon8
avi_check_http_payload	src/lib/protocols/http.c	/^static void avi_check_http_payload(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ayiya	src/lib/protocols/ayiya.c	/^struct ayiya {$/;"	s	file:
b_elem_s	src/lib/protocols/btlib.h	/^typedef struct b_elem_s {$/;"	s
b_elem_s_t	src/lib/protocols/btlib.h	/^} b_elem_s_t;$/;"	t	typeref:struct:b_elem_s
base_position	src/lib/third_party/include/ahocorasick.h	/^  unsigned long base_position; \/* Represents the position of current chunk$/;"	m	struct:__anon8
battlefield_msg_id	src/include/ndpi_typedefs.h	/^  u_int32_t battlefield_msg_id;$/;"	m	struct:ndpi_flow_udp_struct
battlefield_stage	src/include/ndpi_typedefs.h	/^  u_int32_t battlefield_stage:3;$/;"	m	struct:ndpi_flow_udp_struct
battlefield_timeout	src/include/ndpi_typedefs.h	/^  u_int32_t battlefield_timeout;$/;"	m	struct:ndpi_detection_module_struct
battlefield_ts	src/include/ndpi_typedefs.h	/^  u_int32_t battlefield_ts;$/;"	m	struct:ndpi_id_struct
begin	example/ndpiReader.c	/^static struct timeval begin, end;   \/\/ 记录了开始、结束时间$/;"	v	typeref:struct:timeval	file:
bidirectional	example/ndpi_util.h	/^  u_int8_t bidirectional;       \/\/ 标识是否是一条双向流$/;"	m	struct:ndpi_flow_info
bigrams_automa	src/include/ndpi_typedefs.h	/^    bigrams_automa,     \/\/ 维护了ndpi_en_bigrams映射表(貌似没用到) $/;"	m	struct:ndpi_detection_module_struct
bit	src/lib/third_party/include/ndpi_patricia.h	/^  u_int bit;			\/* flag if this node used *\/$/;"	m	struct:_patricia_node_t
bitlen	src/lib/third_party/include/ndpi_patricia.h	/^  unsigned short bitlen;		\/* same as mask? *\/$/;"	m	struct:the_prefix4_t
bitlen	src/lib/third_party/include/ndpi_patricia.h	/^  unsigned short bitlen;		\/* same as mask? *\/$/;"	m	struct:the_prefix_t
bittorent_hash	example/ndpi_util.h	/^  char bittorent_hash[41];$/;"	m	struct:ndpi_flow_info
bittorent_hash	src/include/ndpi_typedefs.h	/^  u_char bittorent_hash[20];$/;"	m	struct:ndpi_flow_struct
bittorrent_stage	src/include/ndpi_typedefs.h	/^  u_int8_t bittorrent_stage;		      \/\/ can be 0 - 255$/;"	m	struct:ndpi_flow_struct
bloom_bv	example/uthash.h	/^   uint8_t *bloom_bv;$/;"	m	struct:UT_hash_table
bloom_nbits	example/uthash.h	/^   uint8_t bloom_nbits;$/;"	m	struct:UT_hash_table
bloom_sig	example/uthash.h	/^   uint32_t bloom_sig; \/* used only to test bloom exists in external analysis *\/$/;"	m	struct:UT_hash_table
breakPcapLoop	example/ndpiReader.c	/^static void breakPcapLoop(u_int16_t thread_id) {$/;"	f	file:
bt6_ht	src/include/ndpi_typedefs.h	/^  struct hash_ip4p_table *bt6_ht;$/;"	m	struct:ndpi_detection_module_struct	typeref:struct:ndpi_detection_module_struct::hash_ip4p_table
bt_ann	src/include/ndpi_typedefs.h	/^  struct bt_announce *bt_ann;$/;"	m	struct:ndpi_detection_module_struct	typeref:struct:ndpi_detection_module_struct::bt_announce
bt_ann_len	src/include/ndpi_typedefs.h	/^  int    bt_ann_len;$/;"	m	struct:ndpi_detection_module_struct
bt_announce	src/include/ndpi_typedefs.h	/^struct bt_announce {              \/\/ 192 bytes$/;"	s
bt_decode	src/lib/protocols/btlib.c	/^const u_int8_t *bt_decode(const u_int8_t *b, size_t *l, int *ret, bt_parse_data_cb_t *cbd) {$/;"	f
bt_ht	src/include/ndpi_typedefs.h	/^  struct hash_ip4p_table *bt_ht;$/;"	m	struct:ndpi_detection_module_struct	typeref:struct:ndpi_detection_module_struct::hash_ip4p_table
bt_ipv4p	src/lib/protocols/btlib.h	/^	bt_ipv4p {$/;"	s
bt_ipv4p2	src/lib/protocols/btlib.h	/^	bt_ipv4p2 {$/;"	s
bt_ipv6p	src/lib/protocols/btlib.h	/^	bt_ipv6p {$/;"	s
bt_ipv6p2	src/lib/protocols/btlib.h	/^	bt_ipv6p2 {$/;"	s
bt_nodes6_data	src/lib/protocols/btlib.h	/^	bt_nodes6_data {$/;"	s
bt_nodes_data	src/lib/protocols/btlib.h	/^	bt_nodes_data {$/;"	s
bt_parse_data_cb	src/lib/protocols/btlib.h	/^typedef struct bt_parse_data_cb {$/;"	s
bt_parse_data_cb_t	src/lib/protocols/btlib.h	/^} bt_parse_data_cb_t;$/;"	t	typeref:struct:bt_parse_data_cb
bt_parse_debug	src/lib/protocols/btlib.c	/^int bt_parse_debug = 0;$/;"	v
bt_parse_protocol	src/lib/protocols/btlib.h	/^struct bt_parse_protocol {$/;"	s
bt_port_t	src/include/ndpi_typedefs.h	/^  u_int16_t bt_port_t[NDPI_BT_PORTS];$/;"	m	struct:ndpi_id_struct
bt_port_u	src/include/ndpi_typedefs.h	/^  u_int16_t bt_port_u[NDPI_BT_PORTS];$/;"	m	struct:ndpi_id_struct
buckets	example/uthash.h	/^   UT_hash_bucket *buckets;$/;"	m	struct:UT_hash_table
buf	src/lib/protocols/btlib.h	/^	char	buf[64];$/;"	m	struct:bt_parse_data_cb
build_results	tests/do.sh	/^build_results() {$/;"	f
byte_counter	src/include/ndpi_typedefs.h	/^  u_int16_t byte_counter[2];                \/\/ 分别记录了该数据流在两个方向上的payload字节数$/;"	m	struct:ndpi_flow_struct
bytes	example/ndpi_util.h	/^  u_int64_t bytes;      \/\/ 记录了收到的包字节总数(前提是识别为有效流)$/;"	m	struct:ndpi_flow_info
bytesToSize	wireshark/ndpi.lua	/^function bytesToSize(bytes)$/;"	f
call_number	src/lib/protocols/rx.c	/^  u_int32_t call_number;$/;"	m	struct:ndpi_rx_header	file:
callback_buffer	src/include/ndpi_typedefs.h	/^  struct ndpi_call_function_struct callback_buffer[NDPI_MAX_SUPPORTED_PROTOCOLS + 1];   \/\/ 这张表记录了实际使能的协议信息$/;"	m	struct:ndpi_detection_module_struct	typeref:struct:ndpi_detection_module_struct::ndpi_call_function_struct
callback_buffer_non_tcp_udp	src/include/ndpi_typedefs.h	/^  struct ndpi_call_function_struct callback_buffer_non_tcp_udp[NDPI_MAX_SUPPORTED_PROTOCOLS + 1];   \/\/ 这张表记录了实际使能的基于其他的协议信息$/;"	m	struct:ndpi_detection_module_struct	typeref:struct:ndpi_detection_module_struct::ndpi_call_function_struct
callback_buffer_size	src/include/ndpi_typedefs.h	/^  u_int32_t callback_buffer_size;       \/\/ 记录了实际使能的协议数量$/;"	m	struct:ndpi_detection_module_struct
callback_buffer_size_non_tcp_udp	src/include/ndpi_typedefs.h	/^  u_int32_t callback_buffer_size_non_tcp_udp;   \/\/ 记录了实际使能的基于其他(非tcp和udp)的协议数量$/;"	m	struct:ndpi_detection_module_struct
callback_buffer_size_tcp_no_payload	src/include/ndpi_typedefs.h	/^  u_int32_t callback_buffer_size_tcp_no_payload;\/\/ 记录了实际使能的基于tcp不带payload的协议数量$/;"	m	struct:ndpi_detection_module_struct
callback_buffer_size_tcp_payload	src/include/ndpi_typedefs.h	/^  u_int32_t callback_buffer_size_tcp_payload;   \/\/ 记录了实际使能的基于tcp带payload的协议数量$/;"	m	struct:ndpi_detection_module_struct
callback_buffer_size_udp	src/include/ndpi_typedefs.h	/^  u_int32_t callback_buffer_size_udp;           \/\/ 记录了实际使能的基于udp的协议数量$/;"	m	struct:ndpi_detection_module_struct
callback_buffer_tcp_no_payload	src/include/ndpi_typedefs.h	/^  struct ndpi_call_function_struct callback_buffer_tcp_no_payload[NDPI_MAX_SUPPORTED_PROTOCOLS + 1];\/\/ 这张表记录了实际使能的基于tcp不带payload的协议信息$/;"	m	struct:ndpi_detection_module_struct	typeref:struct:ndpi_detection_module_struct::ndpi_call_function_struct
callback_buffer_tcp_payload	src/include/ndpi_typedefs.h	/^  struct ndpi_call_function_struct callback_buffer_tcp_payload[NDPI_MAX_SUPPORTED_PROTOCOLS + 1];   \/\/ 这张表记录了实际使能的基于tcp带payload的协议信息$/;"	m	struct:ndpi_detection_module_struct	typeref:struct:ndpi_detection_module_struct::ndpi_call_function_struct
callback_buffer_udp	src/include/ndpi_typedefs.h	/^  struct ndpi_call_function_struct callback_buffer_udp[NDPI_MAX_SUPPORTED_PROTOCOLS + 1];           \/\/ 这张表记录了实际使能的基于udp的协议信息$/;"	m	struct:ndpi_detection_module_struct	typeref:struct:ndpi_detection_module_struct::ndpi_call_function_struct
capture_for	example/ndpiReader.c	/^static time_t capture_for = 0;      \/\/ 捕获超时时间(相对时间)(只对传入了捕获接口有效)$/;"	v	file:
capture_until	example/ndpiReader.c	/^static time_t capture_until = 0;    \/\/ 捕获超时时间点(绝对时间)(只对传入了捕获接口有效)$/;"	v	file:
cb_data	src/lib/protocols/btlib.c	/^void cb_data(bt_parse_data_cb_t *cbd,int *ret) {$/;"	f
chaddr	src/lib/protocols/dhcp.c	/^  uint8_t	chaddr[DHCP_CHADDR_LEN]; \/* 28 *\/$/;"	m	struct:__anon10	file:
channel	src/lib/protocols/amqp.c	/^	u_int16_t channel;$/;"	m	struct:amqp_header	file:
channel	src/lib/protocols/mssql_tds.c	/^  u_int16_t channel;$/;"	m	struct:tds_packet_header	file:
charmap	src/lib/ndpi_main.c	/^static const u_char charmap[] = {$/;"	v	file:
check	src/include/ndpi_typedefs.h	/^  u_int16_t check;$/;"	m	struct:ndpi_iphdr
check	src/include/ndpi_typedefs.h	/^  u_int16_t check;$/;"	m	struct:ndpi_tcphdr
check	src/include/ndpi_typedefs.h	/^  u_int16_t check;$/;"	m	struct:ndpi_udphdr
check_content_type_and_change_protocol	src/lib/protocols/http.c	/^static void check_content_type_and_change_protocol(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
check_content_type_and_change_protocol	src/lib/protocols/jabber.c	/^static void check_content_type_and_change_protocol(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
check_http_payload	src/lib/protocols/http.c	/^static void check_http_payload(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
check_ndpi_flow_func	src/lib/ndpi_main.c	/^void check_ndpi_flow_func(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
check_ndpi_other_flow_func	src/lib/ndpi_main.c	/^void check_ndpi_other_flow_func(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
check_ndpi_tcp_flow_func	src/lib/ndpi_main.c	/^void check_ndpi_tcp_flow_func(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
check_ndpi_udp_flow_func	src/lib/ndpi_main.c	/^void check_ndpi_udp_flow_func(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
check_pkid_and_detect_hmac_size	src/lib/protocols/openvpn.c	/^int8_t check_pkid_and_detect_hmac_size(const u_int8_t * payload) {$/;"	f	file:
check_punycode_string	src/lib/ndpi_main.c	/^int check_punycode_string(char * buffer , int len)$/;"	f
check_results	tests/do.sh	/^check_results() {$/;"	f
check_ymsg	src/lib/protocols/yahoo.c	/^u_int8_t check_ymsg(const u_int8_t * payload, u_int16_t payload_packet_len)$/;"	f	file:
checksum	src/include/ndpi_typedefs.h	/^  u_int16_t checksum;$/;"	m	struct:ndpi_cdp
checksum	src/lib/protocols/rx.c	/^  u_int16_t checksum;$/;"	m	struct:ndpi_rx_header	file:
ciaddr	src/lib/protocols/dhcp.c	/^  uint32_t	ciaddr;\/* 12 *\/$/;"	m	struct:__anon10	file:
cidr	src/include/ndpi_typedefs.h	/^  u_int8_t cidr;        \/\/ 掩码长度$/;"	m	struct:__anon34
citrix_packet_id	src/include/ndpi_typedefs.h	/^  u_int8_t citrix_packet_id;$/;"	m	struct:ndpi_flow_tcp_struct
class_id	src/lib/protocols/amqp.c	/^	u_int16_t class_id, method;$/;"	m	struct:amqp_header	file:
client_certificate	src/include/ndpi_typedefs.h	/^      char client_certificate[48], server_certificate[48];$/;"	m	struct:ndpi_flow_struct::__anon26::__anon29
client_info	example/ndpi_util.h	/^    char client_info[48], server_info[48];$/;"	m	struct:ndpi_flow_info::__anon1
client_signature	src/include/ndpi_typedefs.h	/^      char client_signature[48], server_signature[48];$/;"	m	struct:ndpi_flow_struct::__anon26::__anon30
cmpProto	example/ndpiReader.c	/^int cmpProto(const void *_a, const void *_b) {$/;"	f
code	src/lib/protocols/coap.c	/^  u_int8_t code;$/;"	m	struct:ndpi_coap_hdr	file:
code	src/lib/protocols/radius.c	/^  u_int8_t code;$/;"	m	struct:radius_header	file:
code_pnt	src/lib/protocols/drda.c	/^  u_int16_t code_pnt;$/;"	m	struct:ndpi_drda_hdr	file:
command	src/lib/protocols/afp.c	/^  u_int8_t flags, command;$/;"	m	struct:afpHeader	file:
configurePcapHandle	example/ndpiReader.c	/^static void configurePcapHandle(pcap_t * pcap_handle) {$/;"	f	file:
conn_epoch	src/lib/protocols/rx.c	/^  u_int32_t conn_epoch;$/;"	m	struct:ndpi_rx_header	file:
conn_id	src/lib/protocols/rx.c	/^  u_int32_t conn_id;$/;"	m	struct:ndpi_rx_header	file:
connection_id	src/lib/protocols/bittorrent.c	/^  u_int16_t connection_id;$/;"	m	struct:ndpi_utp_hdr	file:
content_automa	src/include/ndpi_typedefs.h	/^    content_automa,                            \/* Used for HTTP subprotocol_detection  维护了content_match映射表 *\/$/;"	m	struct:ndpi_detection_module_struct
content_line	src/include/ndpi_typedefs.h	/^  struct ndpi_int_one_line_struct content_line;$/;"	m	struct:ndpi_packet_struct	typeref:struct:ndpi_packet_struct::ndpi_int_one_line_struct
content_match	src/lib/ndpi_content_match.c	/^ndpi_protocol_match content_match[] = {$/;"	v
content_type	src/include/ndpi_typedefs.h	/^    char *url, *content_type;$/;"	m	struct:ndpi_flow_struct::__anon25
cookie	src/lib/protocols/stun.c	/^  u_int32_t cookie;$/;"	m	struct:stun_packet_header	file:
core_affinity	example/ndpiReader.c	/^static int core_affinity[MAX_NUM_READER_THREADS];   \/\/ 线程-cpu亲和关系映射表$/;"	v	file:
correlID	src/lib/protocols/drda.c	/^  u_int16_t correlID;$/;"	m	struct:ndpi_drda_hdr	file:
count	example/ndpiReader.c	/^    int count;$/;"	m	struct:info_pair	file:
count	example/ndpiReader.c	/^    int count;$/;"	m	struct:node_a	file:
count	example/uthash.h	/^   unsigned count;$/;"	m	struct:UT_hash_bucket
count	src/include/ndpi_typedefs.h	/^  atomic_t                count;$/;"	m	struct:hash_ip4p_table
count	src/include/ndpi_typedefs.h	/^  u_int16_t               port,count:12,flag:4;$/;"	m	struct:hash_ip4p_node
counter	src/include/ndpi_typedefs.h	/^  volatile int counter;$/;"	m	struct:atomic
crc32_for_byte	example/ndpi_util.c	/^static uint32_t crc32_for_byte(uint32_t r) {$/;"	f	file:
ctrl	src/include/ndpi_typedefs.h	/^  u_int8_t    ctrl;$/;"	m	struct:ndpi_llc_header_snap
ctrl	src/include/ndpi_typedefs.h	/^  u_int8_t ctrl;          \/* always 0x00                       *\/$/;"	m	struct:ndpi_chdlc
cumulative_addr	example/ndpiReader.c	/^  u_int32_t cumulative_addr; \/*to hold cumulative some of IP addresses *\/$/;"	m	struct:port_stats	file:
current_ndpi_memory	example/ndpiReader.c	/^u_int32_t current_ndpi_memory = 0;  \/\/ 记录了当前分配的堆内存字节数$/;"	v
current_node	src/lib/third_party/include/ahocorasick.h	/^  AC_NODE_t * current_node; \/* Pointer to current node while searching *\/$/;"	m	struct:__anon8
current_ts	src/include/ndpi_typedefs.h	/^  u_int32_t current_ts;$/;"	m	struct:ndpi_detection_module_struct
customUserProto	src/include/ndpi_typedefs.h	/^  u_int8_t customUserProto;         \/\/ 标识是否是一个自定义的协议$/;"	m	struct:ndpi_default_ports_tree_node
cwr	src/include/ndpi_typedefs.h	/^  u_int16_t doff:4, res1:4, cwr:1, ece:1, urg:1, ack:1, psh:1, rst:1, syn:1, fin:1;$/;"	m	struct:ndpi_tcphdr
cwr	src/include/ndpi_typedefs.h	/^  u_int16_t res1:4, doff:4, fin:1, syn:1, rst:1, psh:1, ack:1, urg:1, ece:1, cwr:1;$/;"	m	struct:ndpi_tcphdr
d	src/lib/protocols/btlib.h	/^	struct bt_ipv4p d;$/;"	m	struct:bt_ipv4p2	typeref:struct:bt_ipv4p2::bt_ipv4p
d	src/lib/protocols/btlib.h	/^	struct bt_ipv6p d;$/;"	m	struct:bt_ipv6p2	typeref:struct:bt_ipv6p2::bt_ipv6p
dOctets	src/lib/protocols/netflow.c	/^  u_int32_t dOctets;    \/* Octets sent in Duration (milliseconds between 1st$/;"	m	struct:flow_ver5_rec	file:
dOctets	src/lib/protocols/netflow.c	/^  u_int32_t dOctets;    \/* Octets sent in Duration *\/$/;"	m	struct:flow_ver1_rec	file:
dOctets	src/lib/protocols/netflow.c	/^  u_int32_t dOctets;    \/* Octets sent in Duration *\/$/;"	m	struct:flow_ver7_rec	file:
dPkts	src/lib/protocols/netflow.c	/^  u_int32_t dPkts;      \/* Packets sent in Duration (milliseconds between 1st$/;"	m	struct:flow_ver5_rec	file:
dPkts	src/lib/protocols/netflow.c	/^  u_int32_t dPkts;      \/* Packets sent in Duration *\/$/;"	m	struct:flow_ver1_rec	file:
dPkts	src/lib/protocols/netflow.c	/^  u_int32_t dPkts;      \/* Packets sent in Duration *\/$/;"	m	struct:flow_ver7_rec	file:
daddr	src/include/ndpi_typedefs.h	/^  u_int32_t daddr;$/;"	m	struct:ndpi_iphdr
data	src/lib/third_party/include/ndpi_patricia.h	/^  void *data;			\/* pointer to data *\/$/;"	m	struct:_patricia_node_t
dataOffset	src/lib/protocols/afp.c	/^  u_int32_t dataOffset, length, reserved;$/;"	m	struct:afpHeader	file:
ddlink_server_direction	src/include/ndpi_typedefs.h	/^  u_int32_t ddlink_server_direction:1;$/;"	m	struct:ndpi_flow_tcp_struct
decode_tunnels	example/ndpiReader.c	/^static u_int16_t decode_tunnels = 0;\/\/ 标识是否使能GTP隧道功能$/;"	v	file:
decode_tunnels	example/ndpi_util.h	/^  u_int8_t decode_tunnels;  \/\/ 标识是否使能解析GTP隧道功能$/;"	m	struct:ndpi_workflow_prefs
default_port	src/include/ndpi_typedefs.h	/^  u_int16_t default_port;           \/\/ 关联协议的一个缺省端口号(通过该值在二叉树节点中进行匹配)$/;"	m	struct:ndpi_default_ports_tree_node
deletePortsStats	example/ndpiReader.c	/^static void deletePortsStats(struct port_stats *stats) {$/;"	f	file:
deleteTopStats	example/ndpiReader.c	/^static void deleteTopStats(struct top_stats *stats) {$/;"	f	file:
depth	src/lib/third_party/include/node.h	/^  unsigned short depth; \/* depth: distance between this node and the root *\/$/;"	m	struct:ac_node
dest	src/include/ndpi_typedefs.h	/^  u_char dest[6];$/;"	m	struct:ndpi_wifi_header
dest	src/include/ndpi_typedefs.h	/^  u_int16_t dest;$/;"	m	struct:ndpi_tcphdr
dest	src/include/ndpi_typedefs.h	/^  u_int16_t dest;$/;"	m	struct:ndpi_udphdr
detected_directconnect_port	src/include/ndpi_typedefs.h	/^  u_int16_t detected_directconnect_port;$/;"	m	struct:ndpi_id_struct
detected_directconnect_ssl_port	src/include/ndpi_typedefs.h	/^  u_int16_t detected_directconnect_ssl_port;$/;"	m	struct:ndpi_id_struct
detected_directconnect_udp_port	src/include/ndpi_typedefs.h	/^  u_int16_t detected_directconnect_udp_port;$/;"	m	struct:ndpi_id_struct
detected_gnutella_port	src/include/ndpi_typedefs.h	/^  u_int16_t detected_gnutella_port;$/;"	m	struct:ndpi_id_struct
detected_gnutella_udp_port1	src/include/ndpi_typedefs.h	/^  u_int16_t detected_gnutella_udp_port1;$/;"	m	struct:ndpi_id_struct
detected_gnutella_udp_port2	src/include/ndpi_typedefs.h	/^  u_int16_t detected_gnutella_udp_port2;$/;"	m	struct:ndpi_id_struct
detected_os	src/include/ndpi_typedefs.h	/^  u_char detected_os[32];$/;"	m	struct:ndpi_flow_struct
detected_protocol	example/ndpi_util.h	/^  ndpi_protocol detected_protocol;$/;"	m	struct:ndpi_flow_info
detected_protocol_bitmask	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_BITMASK detected_protocol_bitmask;$/;"	m	struct:ndpi_id_struct
detected_protocol_stack	src/include/ndpi_typedefs.h	/^  u_int16_t detected_protocol_stack[NDPI_PROTOCOL_SIZE];    \/\/ 依次记录了该数据包识别到的上层协议号(即app_protocol)和下层协议号(即master_protocol)$/;"	m	struct:ndpi_packet_struct
detected_protocol_stack	src/include/ndpi_typedefs.h	/^  u_int16_t detected_protocol_stack[NDPI_PROTOCOL_SIZE];    \/\/ 依次记录了该数据流识别到的上层协议号(即app_protocol)和下层协议号(即master_protocol)$/;"	m	struct:ndpi_flow_struct
detected_subprotocol_stack	src/include/ndpi_typedefs.h	/^  u_int8_t detected_subprotocol_stack[NDPI_PROTOCOL_SIZE];$/;"	m	struct:ndpi_packet_struct
detection_bitmask	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_BITMASK detection_bitmask;                      \/\/ (协议序号掩码集合)该字段的设置跟ndpi_set_bitmask_protocol_detection函数的入参有关$/;"	m	struct:ndpi_call_function_struct
detection_bitmask	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_BITMASK detection_bitmask;  \/\/ 该探测模块中所有协议的使能\/禁止位的集合，只有其中置1的那些协议才是该探测模块中实际使能了的$/;"	m	struct:ndpi_detection_module_struct
detection_completed	example/ndpi_util.h	/^  u_int8_t detection_completed; \/\/ 标识是否完成对该数据流的探测$/;"	m	struct:ndpi_flow_info
detection_feature	src/include/ndpi_typedefs.h	/^  u_int8_t detection_feature;$/;"	m	struct:ndpi_call_function_struct
dhcp_packet_t	src/lib/protocols/dhcp.c	/^} dhcp_packet_t;$/;"	t	typeref:struct:__anon10	file:
directconnect_connection_ip_tick_timeout	src/include/ndpi_typedefs.h	/^  u_int32_t directconnect_connection_ip_tick_timeout;$/;"	m	struct:ndpi_detection_module_struct
directconnect_last_safe_access_time	src/include/ndpi_typedefs.h	/^  u_int32_t directconnect_last_safe_access_time;$/;"	m	struct:ndpi_id_struct
directconnect_stage	src/include/ndpi_typedefs.h	/^  u_int32_t directconnect_stage:2;	      \/\/ 0 - 1$/;"	m	struct:ndpi_flow_struct
direction_detect_disable	src/include/ndpi_typedefs.h	/^    direction_detect_disable:1; \/* disable internal detection of packet direction  目前固定清0 *\/$/;"	m	struct:ndpi_detection_module_struct
dns	src/include/ndpi_typedefs.h	/^    } dns;$/;"	m	union:ndpi_flow_struct::__anon26	typeref:struct:ndpi_flow_struct::__anon26::__anon27
dns_dissect_response	src/include/ndpi_typedefs.h	/^  u_int8_t http_dont_dissect_response:1, dns_dissect_response:1,$/;"	m	struct:ndpi_detection_module_struct
do_gettimeofday	src/lib/protocols/netflow.c	29;"	d	file:
doff	src/include/ndpi_typedefs.h	/^  u_int16_t doff:4, res1:4, cwr:1, ece:1, urg:1, ack:1, psh:1, rst:1, syn:1, fin:1;$/;"	m	struct:ndpi_tcphdr
doff	src/include/ndpi_typedefs.h	/^  u_int16_t res1:4, doff:4, fin:1, syn:1, rst:1, psh:1, ack:1, urg:1, ece:1, cwr:1;$/;"	m	struct:ndpi_tcphdr
dofus_stage	src/include/ndpi_typedefs.h	/^  u_int32_t dofus_stage:1;$/;"	m	struct:ndpi_flow_tcp_struct
dsap	src/include/ndpi_typedefs.h	/^  u_int8_t    dsap;$/;"	m	struct:ndpi_llc_header_snap
dst	src/include/ndpi_typedefs.h	/^  struct ndpi_id_struct *dst;$/;"	m	struct:ndpi_flow_struct	typeref:struct:ndpi_flow_struct::ndpi_id_struct
dstStats	example/ndpiReader.c	/^struct port_stats *srcStats = NULL, *dstStats = NULL;$/;"	v	typeref:struct:
dst_as	src/lib/protocols/netflow.c	/^  u_int16_t dst_as;     \/* dst peer\/origin Autonomous System *\/$/;"	m	struct:flow_ver5_rec	file:
dst_as	src/lib/protocols/netflow.c	/^  u_int16_t dst_as;     \/* dst peer\/origin Autonomous System *\/$/;"	m	struct:flow_ver7_rec	file:
dst_id	example/ndpi_util.h	/^  void *src_id, *dst_id;$/;"	m	struct:ndpi_flow_info
dst_mask	src/lib/protocols/netflow.c	/^  u_int8_t  dst_mask;   \/* destination route's mask bits *\/$/;"	m	struct:flow_ver7_rec	file:
dst_mask	src/lib/protocols/netflow.c	/^  u_int8_t dst_mask;    \/* destination route's mask bits *\/$/;"	m	struct:flow_ver5_rec	file:
dstaddr	src/lib/protocols/netflow.c	/^  u_int32_t dstaddr;    \/* Destination IP Address *\/$/;"	m	struct:flow_ver1_rec	file:
dstaddr	src/lib/protocols/netflow.c	/^  u_int32_t dstaddr;    \/* Destination IP Address *\/$/;"	m	struct:flow_ver5_rec	file:
dstaddr	src/lib/protocols/netflow.c	/^  u_int32_t dstaddr;    \/* Destination IP Address *\/$/;"	m	struct:flow_ver7_rec	file:
dstport	src/lib/protocols/netflow.c	/^  u_int16_t dstport;    \/* TCP\/UDP destination port number (.e.g, FTP, Telnet, etc.,or equivalent) *\/$/;"	m	struct:flow_ver1_rec	file:
dstport	src/lib/protocols/netflow.c	/^  u_int16_t dstport;    \/* TCP\/UDP destination port number (.e.g, FTP, Telnet, etc.,or equivalent) *\/$/;"	m	struct:flow_ver5_rec	file:
dstport	src/lib/protocols/netflow.c	/^  u_int16_t dstport;    \/* TCP\/UDP destination port number (.e.g, FTP, Telnet, etc.,or equivalent) *\/$/;"	m	struct:flow_ver7_rec	file:
dump_bt_proto_struct	src/lib/protocols/btlib.c	/^void dump_bt_proto_struct(struct bt_parse_protocol *p) {$/;"	f
duration	src/include/ndpi_typedefs.h	/^  u_int16_t duration;$/;"	m	struct:ndpi_wifi_header
e_len	src/lib/protocols/btlib.h	/^	u_int16_t		e_len;$/;"	m	struct:bt_parse_protocol
e_msg	src/lib/protocols/btlib.h	/^	const u_int8_t		*e_msg;$/;"	m	struct:bt_parse_protocol
eaq_pkt_id	src/include/ndpi_typedefs.h	/^  u_int8_t eaq_pkt_id;$/;"	m	struct:ndpi_flow_udp_struct
eaq_sequence	src/include/ndpi_typedefs.h	/^  u_int32_t eaq_sequence;$/;"	m	struct:ndpi_flow_udp_struct
ece	src/include/ndpi_typedefs.h	/^  u_int16_t doff:4, res1:4, cwr:1, ece:1, urg:1, ack:1, psh:1, rst:1, syn:1, fin:1;$/;"	m	struct:ndpi_tcphdr
ece	src/include/ndpi_typedefs.h	/^  u_int16_t res1:4, doff:4, fin:1, syn:1, rst:1, psh:1, ack:1, urg:1, ece:1, cwr:1;$/;"	m	struct:ndpi_tcphdr
edge	src/lib/third_party/include/node.h	/^struct edge$/;"	s
edonkey_stage	src/include/ndpi_typedefs.h	/^  u_int32_t edonkey_stage:2;	                \/\/ 0 - 3$/;"	m	struct:ndpi_flow_struct
empty_line_position	src/include/ndpi_typedefs.h	/^  u_int16_t empty_line_position;$/;"	m	struct:ndpi_packet_struct
empty_line_position_set	src/include/ndpi_typedefs.h	/^    empty_line_position_set:1;$/;"	m	struct:ndpi_packet_struct
enable_protocol_guess	example/ndpiReader.c	/^static u_int8_t enable_protocol_guess = 1;$/;"	v	file:
end	example/ndpiReader.c	/^static struct timeval begin, end;   \/\/ 记录了开始、结束时间$/;"	v	typeref:struct:	file:
epoch	src/lib/protocols/ayiya.c	/^  u_int32_t epoch;$/;"	m	struct:ayiya	file:
ethernet_crc32	example/ndpi_util.c	/^u_int32_t ethernet_crc32(const void* data, size_t n_bytes) {$/;"	f
excluded_protocol_bitmask	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_BITMASK excluded_protocol_bitmask;              \/\/ (协议序号掩码集合)实际被使能的协议会将该集合的对应位置1$/;"	m	struct:ndpi_call_function_struct
excluded_protocol_bitmask	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_BITMASK excluded_protocol_bitmask;      \/\/ 这张表记录了该数据流排除掉的协议ID集合$/;"	m	struct:ndpi_flow_struct
exp	src/include/ndpi_typedefs.h	/^  u_int32_t label:20, exp:3, s:1, ttl:8;$/;"	m	struct:ndpi_mpls_header
expand_mult	example/uthash.h	/^   unsigned expand_mult;$/;"	m	struct:UT_hash_bucket
extcap_buf	example/ndpiReader.c	/^static char extcap_buf[16384];$/;"	v	file:
extcap_capture	example/ndpiReader.c	/^void extcap_capture() {$/;"	f
extcap_capture_fifo	example/ndpiReader.c	/^static char *extcap_capture_fifo    = NULL;$/;"	v	file:
extcap_config	example/ndpiReader.c	/^void extcap_config() {$/;"	f
extcap_dlts	example/ndpiReader.c	/^void extcap_dlts() {$/;"	f
extcap_dumper	example/ndpiReader.c	/^static pcap_dumper_t *extcap_dumper = NULL;$/;"	v	file:
extcap_interfaces	example/ndpiReader.c	/^void extcap_interfaces() {$/;"	f
extcap_packet_filter	example/ndpiReader.c	/^static u_int16_t extcap_packet_filter = (u_int16_t)-1;$/;"	v	file:
failure_node	src/lib/third_party/include/node.h	/^  struct ac_node * failure_node; \/* The failure node of this node *\/$/;"	m	struct:ac_node	typeref:struct:ac_node::ac_node
family	src/lib/third_party/include/ndpi_patricia.h	/^  unsigned short family;		\/* AF_INET | AF_INET6 *\/$/;"	m	struct:the_prefix4_t
family	src/lib/third_party/include/ndpi_patricia.h	/^  unsigned short family;		\/* AF_INET | AF_INET6 *\/$/;"	m	struct:the_prefix_t
fc	src/include/ndpi_typedefs.h	/^  u_int16_t fc;$/;"	m	struct:ndpi_wifi_header
fds_bits	src/include/ndpi_typedefs.h	/^  ndpi_ndpi_mask fds_bits[NDPI_NUM_FDS_BITS];$/;"	m	struct:ndpi_protocol_bitmask_struct
fiesta_stage	src/include/ndpi_typedefs.h	/^  u_int32_t fiesta_stage:2;$/;"	m	struct:ndpi_flow_tcp_struct
file	src/lib/protocols/dhcp.c	/^  uint8_t	file[DHCP_FILE_LEN]; \/* 108 *\/$/;"	m	struct:__anon10	file:
file_first_time	example/ndpiReader.c	/^static u_int8_t stats_flag = 0, file_first_time = 1; $/;"	v	file:
filetopia_stage	src/include/ndpi_typedefs.h	/^  u_int32_t filetopia_stage:2;$/;"	m	struct:ndpi_flow_tcp_struct
fill_prefix_v4	src/lib/ndpi_main.c	/^static int fill_prefix_v4(prefix_t *p, struct in_addr *a, int b, int mb) {$/;"	f	file:
fin	src/include/ndpi_typedefs.h	/^  u_int16_t doff:4, res1:4, cwr:1, ece:1, urg:1, ack:1, psh:1, rst:1, syn:1, fin:1;$/;"	m	struct:ndpi_tcphdr
fin	src/include/ndpi_typedefs.h	/^  u_int16_t res1:4, doff:4, fin:1, syn:1, rst:1, psh:1, ack:1, urg:1, ece:1, cwr:1;$/;"	m	struct:ndpi_tcphdr
final	src/lib/third_party/include/node.h	/^  short int final; \/* 0: no ; 1: yes, it is a final node *\/$/;"	m	struct:ac_node
first	src/lib/protocols/netflow.c	/^  u_int32_t first;      \/* SysUptime at start of flow *\/$/;"	m	struct:flow_ver1_rec	file:
first	src/lib/protocols/netflow.c	/^  u_int32_t first;      \/* SysUptime at start of flow *\/$/;"	m	struct:flow_ver5_rec	file:
first	src/lib/protocols/netflow.c	/^  u_int32_t first;      \/* SysUptime at start of flow *\/$/;"	m	struct:flow_ver7_rec	file:
flag	src/include/ndpi_typedefs.h	/^  u_int16_t               port,count:12,flag:4;$/;"	m	struct:hash_ip4p_node
flags	src/include/ndpi_typedefs.h	/^  u_int16_t flags;$/;"	m	struct:ndpi_dns_packet_header
flags	src/include/ndpi_typedefs.h	/^  u_int8_t flags;$/;"	m	struct:ndpi_radiotap_header
flags	src/lib/protocols/afp.c	/^  u_int8_t flags, command;$/;"	m	struct:afpHeader	file:
flags	src/lib/protocols/ayiya.c	/^  u_int8_t flags[3];$/;"	m	struct:ayiya	file:
flags	src/lib/protocols/dhcp.c	/^  uint16_t	flags;$/;"	m	struct:__anon10	file:
flags	src/lib/protocols/gtp.c	/^  u_int8_t flags, message_type;$/;"	m	struct:gtp_header_generic	file:
flags	src/lib/protocols/netbios.c	/^  u_int16_t transaction_id, flags, questions, answer_rrs, authority_rrs, additional_rrs;$/;"	m	struct:netbios_header	file:
flags	src/lib/protocols/netflow.c	/^  u_int8_t  flags;      \/* Shortcut mode(dest only,src only,full flows*\/$/;"	m	struct:flow_ver7_rec	file:
flags	src/lib/protocols/rx.c	/^  u_int8_t flags;$/;"	m	struct:ndpi_rx_header	file:
flash_check_http_payload	src/lib/protocols/http.c	/^static void flash_check_http_payload(struct ndpi_detection_module_struct$/;"	f	file:
florensia_stage	src/include/ndpi_typedefs.h	/^  u_int32_t florensia_stage:1;$/;"	m	struct:ndpi_flow_struct
flow	src/include/ndpi_typedefs.h	/^  struct ndpi_flow_struct *flow;$/;"	m	struct:ndpi_flow_struct	typeref:struct:ndpi_flow_struct::ndpi_flow_struct
flow_ver1_rec	src/lib/protocols/netflow.c	/^struct flow_ver1_rec {$/;"	s	file:
flow_ver5_rec	src/lib/protocols/netflow.c	/^struct flow_ver5_rec {$/;"	s	file:
flow_ver7_rec	src/lib/protocols/netflow.c	/^struct flow_ver7_rec {$/;"	s	file:
format	src/lib/protocols/drda.c	/^  u_int8_t format;$/;"	m	struct:ndpi_drda_hdr	file:
formatBytes	example/ndpiReader.c	/^char* formatBytes(u_int32_t howMuch, char *buf, u_int buf_len) {$/;"	f
formatPackets	example/ndpiReader.c	/^char* formatPackets(float numPkts, char *buf) {$/;"	f
formatTraffic	example/ndpiReader.c	/^char* formatTraffic(float numBits, int bits, char *buf) {$/;"	f
forwarded_line	src/include/ndpi_typedefs.h	/^  struct ndpi_int_one_line_struct forwarded_line;$/;"	m	struct:ndpi_packet_struct	typeref:struct:ndpi_packet_struct::ndpi_int_one_line_struct
frag_off	src/include/ndpi_typedefs.h	/^  u_int16_t frag_off;$/;"	m	struct:ndpi_iphdr
fragmented_count	example/ndpi_util.h	/^  u_int64_t fragmented_count;       \/\/ 记录了收到的IP分片报文数量$/;"	m	struct:ndpi_stats
freeIpTree	example/ndpiReader.c	/^void freeIpTree(addr_node *root) {$/;"	f
free_ptree_data	src/lib/ndpi_main.c	/^static void free_ptree_data(void *data) { ; }$/;"	f	file:
free_wrapper	example/ndpi_util.c	/^static void free_wrapper(void *freeable) {$/;"	f	file:
ftp_control_stage	src/include/ndpi_typedefs.h	/^  u_int32_t ftp_control_stage:2;$/;"	m	struct:ndpi_flow_struct
func	src/include/ndpi_typedefs.h	/^  void (*func) (struct ndpi_detection_module_struct *, char *attr, char *value, int protocol_id);$/;"	m	struct:ndpi_subprotocol_conf_struct
func	src/include/ndpi_typedefs.h	/^  void (*func) (struct ndpi_detection_module_struct *, struct ndpi_flow_struct *flow);  \/\/ 指向协议关联的应用层解析器$/;"	m	struct:ndpi_call_function_struct
func	src/include/ndpi_typedefs.h	/^  void (*func) (struct ndpi_detection_module_struct *, struct ndpi_flow_struct *flow);  \/\/ 指向协议关联的应用层解析器$/;"	m	struct:ndpi_proto_defaults
generic_http_packet_bitmask	src/include/ndpi_typedefs.h	/^  NDPI_PROTOCOL_BITMASK generic_http_packet_bitmask;$/;"	m	struct:ndpi_detection_module_struct
generic_l4_ptr	src/include/ndpi_typedefs.h	/^  const u_int8_t *generic_l4_ptr;	\/* is set only for non tcp-udp traffic 除了tcp和udp之外的其他情况的l4层头 *\/$/;"	m	struct:ndpi_packet_struct
generic_swap	src/lib/third_party/src/sort.c	/^static void generic_swap(void *_a, void *_b, int size)$/;"	f	file:
get16	src/lib/protocols/dns.c	/^static u_int16_t get16(int *i, const u_int8_t *payload) {$/;"	f	file:
get16bits	example/uthash.h	602;"	d
get16bits	example/uthash.h	605;"	d
get16bits	example/uthash.h	609;"	d
getNameLength	src/lib/protocols/dns.c	/^static u_int getNameLength(u_int i, const u_int8_t *payload, u_int payloadLen) {$/;"	f	file:
getNextPcapFileFromPlaylist	example/ndpiReader.c	/^static int getNextPcapFileFromPlaylist(u_int16_t thread_id, char filename[], u_int32_t filename_len) {$/;"	f	file:
getSSLcertificate	src/lib/protocols/ssl.c	/^int getSSLcertificate(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
getTopStats	example/ndpiReader.c	/^static int getTopStats(struct top_stats **topStats, struct port_stats *stats, u_int64_t total_packet_count){$/;"	f	file:
get_l16	src/include/ndpi_define.h	276;"	d
get_l16	src/include/ndpi_define.h	280;"	d
get_l32	src/include/ndpi_define.h	277;"	d
get_l32	src/include/ndpi_define.h	281;"	d
get_ndpi_flow_info	example/ndpi_util.c	/^static struct ndpi_flow_info *get_ndpi_flow_info(struct ndpi_workflow * workflow,$/;"	f	file:
get_ndpi_flow_info6	example/ndpi_util.c	/^static struct ndpi_flow_info *get_ndpi_flow_info6(struct ndpi_workflow * workflow,$/;"	f	file:
get_packet_id	src/lib/protocols/openvpn.c	/^u_int32_t get_packet_id(const u_int8_t * payload, u_int8_t hms) {$/;"	f	file:
get_u_int16_t	src/include/ndpi_define.h	267;"	d
get_u_int32_t	src/include/ndpi_define.h	268;"	d
get_u_int64_t	src/include/ndpi_define.h	269;"	d
get_u_int8_t	src/include/ndpi_define.h	266;"	d
get_ul8	src/include/ndpi_define.h	272;"	d
getopt	example/ndpiReader.c	32;"	d	file:
gettimeofday	example/ndpiReader.c	/^int gettimeofday(struct timeval *tv, struct timezone *tz) {$/;"	f
gettimeofday	src/lib/ndpi_main.c	/^int gettimeofday(struct timeval * tp, struct timezone * tzp) {$/;"	f
giaddr	src/lib/protocols/dhcp.c	/^  uint32_t	giaddr;\/* 24 *\/$/;"	m	struct:__anon10	file:
gmtime_r	src/include/ndpi_win32.h	64;"	d
gnutella_msg_id	src/include/ndpi_typedefs.h	/^  u_int8_t gnutella_msg_id[3];$/;"	m	struct:ndpi_flow_tcp_struct
gnutella_stage	src/include/ndpi_typedefs.h	/^  u_int32_t gnutella_stage:2;		       \/\/ 0 - 2$/;"	m	struct:ndpi_flow_tcp_struct
gnutella_timeout	src/include/ndpi_typedefs.h	/^  u_int32_t gnutella_timeout;$/;"	m	struct:ndpi_detection_module_struct
gnutella_ts	src/include/ndpi_typedefs.h	/^  u_int32_t gnutella_ts;$/;"	m	struct:ndpi_id_struct
google_ptree_match	src/lib/protocols/hangout.c	/^static u_int8_t google_ptree_match(struct ndpi_detection_module_struct *ndpi_struct, struct in_addr *pin) {$/;"	f	file:
gtp_header_generic	src/lib/protocols/gtp.c	/^struct gtp_header_generic {$/;"	s	file:
guessed_flow_protocols	example/ndpi_util.h	/^  u_int32_t guessed_flow_protocols;$/;"	m	struct:ndpi_stats
guessed_host_protocol_id	src/include/ndpi_typedefs.h	/^  u_int16_t guessed_host_protocol_id;       \/\/ 记录了猜测得到的nDPI定义的子协议ID$/;"	m	struct:ndpi_flow_struct
guessed_protocol_id	src/include/ndpi_typedefs.h	/^  u_int16_t guessed_protocol_id;            \/\/ 记录了猜测得到的nDPI定义的主协议ID$/;"	m	struct:ndpi_flow_struct
h323_valid_packets	src/include/ndpi_typedefs.h	/^  u_int8_t h323_valid_packets;$/;"	m	struct:ndpi_flow_tcp_struct
h_dest	src/include/ndpi_typedefs.h	/^  u_char h_dest[6];       \/* destination eth addr *\/$/;"	m	struct:ndpi_ethhdr
h_int	src/lib/protocols/btlib.h	/^		  h_int:1,h_mint:1,h_ip:1;$/;"	m	struct:bt_parse_protocol
h_ip	src/lib/protocols/btlib.h	/^		  h_int:1,h_mint:1,h_ip:1;$/;"	m	struct:bt_parse_protocol
h_mint	src/lib/protocols/btlib.h	/^		  h_int:1,h_mint:1,h_ip:1;$/;"	m	struct:bt_parse_protocol
h_proto	src/include/ndpi_typedefs.h	/^  u_int16_t h_proto;      \/* data length (<= 1500) or type ID proto (>=1536) *\/$/;"	m	struct:ndpi_ethhdr
h_source	src/include/ndpi_typedefs.h	/^  u_char h_source[6];     \/* source ether addr    *\/$/;"	m	struct:ndpi_ethhdr
h_type	src/lib/protocols/bittorrent.c	/^  u_int8_t h_version:4, h_type:4, next_extension;$/;"	m	struct:ndpi_utp_hdr	file:
h_version	src/lib/protocols/bittorrent.c	/^  u_int8_t h_version:4, h_type:4, next_extension;$/;"	m	struct:ndpi_utp_hdr	file:
halflife2_stage	src/include/ndpi_typedefs.h	/^  u_int32_t halflife2_stage:2;		  \/\/ 0 - 2$/;"	m	struct:ndpi_flow_udp_struct
hash	src/include/ndpi_typedefs.h	/^  u_int32_t		hash[5];$/;"	m	struct:bt_announce
hash_ip4p	src/include/ndpi_typedefs.h	/^struct hash_ip4p {$/;"	s
hash_ip4p_node	src/include/ndpi_typedefs.h	/^struct hash_ip4p_node {$/;"	s
hash_ip4p_table	src/include/ndpi_typedefs.h	/^struct hash_ip4p_table {$/;"	s
hashv	example/uthash.h	/^   unsigned hashv;                   \/* result of hash-fcn(key)        *\/$/;"	m	struct:UT_hash_handle
hashval	example/ndpi_util.h	/^  u_int32_t hashval;            \/\/ (protocol + vlan_id + lower_ip + upper_id + lower_port + upper_port) % 512$/;"	m	struct:ndpi_flow_info
head	src/lib/third_party/include/ndpi_patricia.h	/^  patricia_node_t 	*head;  \/\/ 指向trie树的root节点$/;"	m	struct:_patricia_tree_t
help	example/ndpiReader.c	/^static void help(u_int long_help) {$/;"	f	file:
hh	example/ndpiReader.c	/^  UT_hash_handle hh;  \/* makes this structure hashable *\/$/;"	m	struct:top_stats	file:
hh	example/ndpiReader.c	/^  UT_hash_handle hh; \/* makes this structure hashable *\/$/;"	m	struct:port_stats	file:
hh_head	example/uthash.h	/^   struct UT_hash_handle *hh_head;$/;"	m	struct:UT_hash_bucket	typeref:struct:UT_hash_bucket::UT_hash_handle
hh_next	example/uthash.h	/^   struct UT_hash_handle *hh_next;   \/* next hh in bucket order        *\/$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_handle
hh_prev	example/uthash.h	/^   struct UT_hash_handle *hh_prev;   \/* previous hh in bucket order    *\/$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_handle
hho	example/uthash.h	/^   ptrdiff_t hho; \/* hash handle offset (byte pos of hash handle in element *\/$/;"	m	struct:UT_hash_table
hlen	src/lib/protocols/dhcp.c	/^  uint8_t	hlen;$/;"	m	struct:__anon10	file:
hops	src/lib/protocols/dhcp.c	/^  uint8_t	hops;$/;"	m	struct:__anon10	file:
host_already_guessed	src/include/ndpi_typedefs.h	/^           host_already_guessed:1, $/;"	m	struct:ndpi_flow_struct
host_automa	src/include/ndpi_typedefs.h	/^  ndpi_automa host_automa,                     \/* Used for DNS\/HTTPS  维护了host_match映射表 *\/$/;"	m	struct:ndpi_detection_module_struct
host_line	src/include/ndpi_typedefs.h	/^  struct ndpi_int_one_line_struct host_line;$/;"	m	struct:ndpi_packet_struct	typeref:struct:ndpi_packet_struct::ndpi_int_one_line_struct
host_match	src/lib/ndpi_content_match.c	/^ndpi_protocol_match host_match[] = {$/;"	v
host_protocol_list	src/lib/ndpi_content_match.c	/^static ndpi_network host_protocol_list[] = {$/;"	v	file:
host_server_name	example/ndpi_util.h	/^  char host_server_name[192];$/;"	m	struct:ndpi_flow_info
host_server_name	src/include/ndpi_typedefs.h	/^  u_char host_server_name[256];$/;"	m	struct:ndpi_flow_struct
howmanybits	src/include/ndpi_define.h	216;"	d
http	src/include/ndpi_typedefs.h	/^  } http;$/;"	m	struct:ndpi_flow_struct	typeref:struct:ndpi_flow_struct::__anon25
http_bitmask_exclude	src/lib/protocols/http.c	/^static void http_bitmask_exclude(struct ndpi_flow_struct *flow)$/;"	f	file:
http_contentlen	src/include/ndpi_typedefs.h	/^  struct ndpi_int_one_line_struct http_contentlen;$/;"	m	struct:ndpi_packet_struct	typeref:struct:ndpi_packet_struct::ndpi_int_one_line_struct
http_cookie	src/include/ndpi_typedefs.h	/^  struct ndpi_int_one_line_struct http_cookie;$/;"	m	struct:ndpi_packet_struct	typeref:struct:ndpi_packet_struct::ndpi_int_one_line_struct
http_detected	src/include/ndpi_typedefs.h	/^  u_int32_t http_detected:1;$/;"	m	struct:ndpi_flow_struct
http_dont_dissect_response	src/include/ndpi_typedefs.h	/^  u_int8_t http_dont_dissect_response:1, dns_dissect_response:1,$/;"	m	struct:ndpi_detection_module_struct
http_empty_line_seen	src/include/ndpi_typedefs.h	/^  u_int32_t http_empty_line_seen:1;$/;"	m	struct:ndpi_flow_tcp_struct
http_encoding	src/include/ndpi_typedefs.h	/^  struct ndpi_int_one_line_struct http_encoding;$/;"	m	struct:ndpi_packet_struct	typeref:struct:ndpi_packet_struct::ndpi_int_one_line_struct
http_method	src/include/ndpi_typedefs.h	/^  struct ndpi_int_one_line_struct http_method;$/;"	m	struct:ndpi_packet_struct	typeref:struct:ndpi_packet_struct::ndpi_int_one_line_struct
http_origin	src/include/ndpi_typedefs.h	/^  struct ndpi_int_one_line_struct http_origin;$/;"	m	struct:ndpi_packet_struct	typeref:struct:ndpi_packet_struct::ndpi_int_one_line_struct
http_request_url_offset	src/lib/protocols/http.c	/^static u_int16_t http_request_url_offset(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
http_response	src/include/ndpi_typedefs.h	/^  struct ndpi_int_one_line_struct http_response;$/;"	m	struct:ndpi_packet_struct	typeref:struct:ndpi_packet_struct::ndpi_int_one_line_struct
http_setup_dir	src/include/ndpi_typedefs.h	/^  u_int32_t http_setup_dir:2;$/;"	m	struct:ndpi_flow_tcp_struct
http_stage	src/include/ndpi_typedefs.h	/^  u_int32_t http_stage:2;$/;"	m	struct:ndpi_flow_tcp_struct
http_transfer_encoding	src/include/ndpi_typedefs.h	/^  struct ndpi_int_one_line_struct http_transfer_encoding;$/;"	m	struct:ndpi_packet_struct	typeref:struct:ndpi_packet_struct::ndpi_int_one_line_struct
http_url_name	src/include/ndpi_typedefs.h	/^  struct ndpi_int_one_line_struct http_url_name;$/;"	m	struct:ndpi_packet_struct	typeref:struct:ndpi_packet_struct::ndpi_int_one_line_struct
http_wait_for_retransmission	src/include/ndpi_typedefs.h	/^  u_int32_t http_wait_for_retransmission:1;$/;"	m	struct:ndpi_flow_tcp_struct
http_x_session_type	src/include/ndpi_typedefs.h	/^  struct ndpi_int_one_line_struct http_x_session_type;$/;"	m	struct:ndpi_packet_struct	typeref:struct:ndpi_packet_struct::ndpi_int_one_line_struct
htype	src/lib/protocols/dhcp.c	/^  uint8_t	htype;$/;"	m	struct:__anon10	file:
i	src/lib/protocols/btlib.h	/^		i_int64_t i;$/;"	m	union:bt_parse_data_cb::__anon13
i_int64_t	src/lib/protocols/btlib.c	/^typedef signed long long int i_int64_t;$/;"	t	file:
icecast_stage	src/include/ndpi_typedefs.h	/^  u_int32_t icecast_stage:1;$/;"	m	struct:ndpi_flow_tcp_struct
id	example/ndpiReader.c	/^  int id;$/;"	m	struct:ndpi_proto_sorter	file:
id	src/include/ndpi_typedefs.h	/^  u_int16_t id;$/;"	m	struct:ndpi_iphdr
id	src/lib/protocols/btlib.h	/^		const u_int8_t	*id,		\/\/ 20$/;"	m	struct:bt_parse_protocol::__anon11
id	src/lib/protocols/btlib.h	/^		const u_int8_t 	*id,		\/\/ 20$/;"	m	struct:bt_parse_protocol::__anon12
id	src/lib/protocols/btlib.h	/^	u_int8_t  id[20];$/;"	m	struct:bt_nodes6_data
id	src/lib/protocols/btlib.h	/^	u_int8_t  id[20];$/;"	m	struct:bt_nodes_data
id	src/lib/third_party/include/node.h	/^  int id; \/* Node ID : for debugging purpose *\/$/;"	m	struct:ac_node
ideal_chain_maxlen	example/uthash.h	/^   unsigned ideal_chain_maxlen;$/;"	m	struct:UT_hash_table
identity	src/lib/protocols/ayiya.c	/^  u_int8_t identity[16];$/;"	m	struct:ayiya	file:
idle_flows	example/ndpiReader.c	/^  struct ndpi_flow_info *idle_flows[IDLE_SCAN_BUDGET];  \/\/ 空闲的数据流集合(暂存用)$/;"	m	struct:reader_thread	typeref:struct:reader_thread::ndpi_flow_info	file:
idle_scan_idx	example/ndpiReader.c	/^  u_int32_t idle_scan_idx;              \/\/ hash表中空闲数据流所在的散列地址序号$/;"	m	struct:reader_thread	file:
ihl	src/include/ndpi_typedefs.h	/^  u_int8_t ihl:4, version:4;$/;"	m	struct:ndpi_iphdr
imesh_stage	src/include/ndpi_typedefs.h	/^  u_int32_t imesh_stage:4;$/;"	m	struct:ndpi_flow_tcp_struct
impossible_bigrams_automa	src/include/ndpi_typedefs.h	/^    impossible_bigrams_automa; \/* TOR  维护了ndpi_en_impossible_bigrams映射表(貌似没用到) *\/$/;"	m	struct:ndpi_detection_module_struct
ineff_expands	example/uthash.h	/^   unsigned ineff_expands, noexpand;$/;"	m	struct:UT_hash_table
info	example/ndpi_util.h	/^  char info[96];$/;"	m	struct:ndpi_flow_info
info_hash	src/lib/protocols/btlib.h	/^			 	*info_hash,	\/\/ 20$/;"	m	struct:bt_parse_protocol::__anon11
info_pair	example/ndpiReader.c	/^struct info_pair{$/;"	s	file:
info_pair_cmp	example/ndpiReader.c	/^static int info_pair_cmp (const void *_a, const void *_b)$/;"	f	file:
init_afp_dissector	src/lib/protocols/afp.c	/^void init_afp_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_aimini_dissector	src/lib/protocols/aimini.c	/^void init_aimini_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_amqp_dissector	src/lib/protocols/amqp.c	/^void init_amqp_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask) {$/;"	f
init_applejuice_dissector	src/lib/protocols/applejuice.c	/^void init_applejuice_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_armagetron_dissector	src/lib/protocols/armagetron.c	/^void init_armagetron_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_ayiya_dissector	src/lib/protocols/ayiya.c	/^void init_ayiya_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_battlefield_dissector	src/lib/protocols/battlefield.c	/^void init_battlefield_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_bgp_dissector	src/lib/protocols/bgp.c	/^void init_bgp_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_bittorrent_dissector	src/lib/protocols/bittorrent.c	/^void init_bittorrent_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_bjnp_dissector	src/lib/protocols/bjnp.c	/^void init_bjnp_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_ciscovpn_dissector	src/lib/protocols/ciscovpn.c	/^void init_ciscovpn_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_citrix_dissector	src/lib/protocols/citrix.c	/^void init_citrix_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_coap_dissector	src/lib/protocols/coap.c	/^void init_coap_dissector (struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
init_corba_dissector	src/lib/protocols/corba.c	/^void init_corba_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_crossfire_dissector	src/lib/protocols/crossfire.c	/^void init_crossfire_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_dcerpc_dissector	src/lib/protocols/dcerpc.c	/^void init_dcerpc_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_dhcp_dissector	src/lib/protocols/dhcp.c	/^void init_dhcp_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_dhcpv6_dissector	src/lib/protocols/dhcpv6.c	/^void init_dhcpv6_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_directconnect_dissector	src/lib/protocols/directconnect.c	/^void init_directconnect_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_directdownloadlink_dissector	src/lib/protocols/directdownloadlink.c	/^void init_directdownloadlink_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_dns_dissector	src/lib/protocols/dns.c	/^void init_dns_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_dofus_dissector	src/lib/protocols/dofus.c	/^void init_dofus_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_drda_dissector	src/lib/protocols/drda.c	/^void init_drda_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id,$/;"	f
init_dropbox_dissector	src/lib/protocols/dropbox.c	/^void init_dropbox_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask) $/;"	f
init_eaq_dissector	src/lib/protocols/eaq.c	/^void init_eaq_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_edonkey_dissector	src/lib/protocols/edonkey.c	/^void init_edonkey_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_fasttrack_dissector	src/lib/protocols/fasttrack.c	/^void init_fasttrack_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_fiesta_dissector	src/lib/protocols/fiesta.c	/^void init_fiesta_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_filetopia_dissector	src/lib/protocols/filetopia.c	/^void init_filetopia_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_finished	src/include/ndpi_typedefs.h	/^           init_finished:1,                 \/\/ 标识该数据流是否完成了初始化$/;"	m	struct:ndpi_flow_struct
init_florensia_dissector	src/lib/protocols/florensia.c	/^void init_florensia_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_ftp_control_dissector	src/lib/protocols/ftp_control.c	/^void init_ftp_control_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_ftp_data_dissector	src/lib/protocols/ftp_data.c	/^void init_ftp_data_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_git_dissector	src/lib/protocols/git.c	/^void init_git_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id,$/;"	f
init_gnutella_dissector	src/lib/protocols/gnutella.c	/^void init_gnutella_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_gtp_dissector	src/lib/protocols/gtp.c	/^void init_gtp_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_guildwars_dissector	src/lib/protocols/guildwars.c	/^void init_guildwars_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_h323_dissector	src/lib/protocols/h323.c	/^void init_h323_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_halflife2_dissector	src/lib/protocols/halflife2_and_mods.c	/^void init_halflife2_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_hangout_dissector	src/lib/protocols/hangout.c	/^void init_hangout_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id,$/;"	f
init_hep_dissector	src/lib/protocols/hep.c	/^void init_hep_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_http_activesync_dissector	src/lib/protocols/http_activesync.c	/^void init_http_activesync_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_http_dissector	src/lib/protocols/http.c	/^void init_http_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id,$/;"	f
init_iax_dissector	src/lib/protocols/iax.c	/^void init_iax_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_icecast_dissector	src/lib/protocols/icecast.c	/^void init_icecast_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_ipp_dissector	src/lib/protocols/ipp.c	/^void init_ipp_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_irc_dissector	src/lib/protocols/irc.c	/^void init_irc_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_jabber_dissector	src/lib/protocols/jabber.c	/^void init_jabber_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_kakaotalk_voice_dissector	src/lib/protocols/kakaotalk_voice.c	/^void init_kakaotalk_voice_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_kerberos_dissector	src/lib/protocols/kerberos.c	/^void init_kerberos_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_kontiki_dissector	src/lib/protocols/kontiki.c	/^void init_kontiki_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_kxun_dissector	src/lib/protocols/kxun.c	/^void init_kxun_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_ldap_dissector	src/lib/protocols/ldap.c	/^void init_ldap_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_lotus_notes_dissector	src/lib/protocols/lotus_notes.c	/^void init_lotus_notes_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_mail_imap_dissector	src/lib/protocols/mail_imap.c	/^void init_mail_imap_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_mail_pop_dissector	src/lib/protocols/mail_pop.c	/^void init_mail_pop_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_mail_smtp_dissector	src/lib/protocols/mail_smtp.c	/^void init_mail_smtp_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_maplestory_dissector	src/lib/protocols/maplestory.c	/^void init_maplestory_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_mdns_dissector	src/lib/protocols/mdns.c	/^void init_mdns_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_megaco_dissector	src/lib/protocols/megaco.c	/^void init_megaco_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_mgpc_dissector	src/lib/protocols/mgcp.c	/^void init_mgpc_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_mms_dissector	src/lib/protocols/mms.c	/^void init_mms_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_mpegts_dissector	src/lib/protocols/mpegts.c	/^void init_mpegts_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_mqtt_dissector	src/lib/protocols/mqtt.c	/^void init_mqtt_dissector (struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
init_msn_dissector	src/lib/protocols/msn.c	/^void init_msn_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask) $/;"	f
init_mssql_tds_dissector	src/lib/protocols/mssql_tds.c	/^void init_mssql_tds_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_mysql_dissector	src/lib/protocols/mysql.c	/^void init_mysql_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_netbios_dissector	src/lib/protocols/netbios.c	/^void init_netbios_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_netflow_dissector	src/lib/protocols/netflow.c	/^void init_netflow_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_nfs_dissector	src/lib/protocols/nfs.c	/^void init_nfs_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_noe_dissector	src/lib/protocols/noe.c	/^void init_noe_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_non_tcp_udp_dissector	src/lib/protocols/non_tcp_udp.c	/^void init_non_tcp_udp_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_ntp_dissector	src/lib/protocols/ntp.c	/^void init_ntp_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_openft_dissector	src/lib/protocols/openft.c	/^void init_openft_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_openvpn_dissector	src/lib/protocols/openvpn.c	/^void init_openvpn_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_oracle_dissector	src/lib/protocols/oracle.c	/^void init_oracle_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_oscar_dissector	src/lib/protocols/oscar.c	/^void init_oscar_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_pando_dissector	src/lib/protocols/pando.c	/^void init_pando_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_pcanywhere_dissector	src/lib/protocols/pcanywhere.c	/^void init_pcanywhere_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_postgres_dissector	src/lib/protocols/postgres.c	/^void init_postgres_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_pplive_dissector	src/lib/protocols/pplive.c	/^void init_pplive_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_ppstream_dissector	src/lib/protocols/ppstream.c	/^void init_ppstream_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_pptp_dissector	src/lib/protocols/pptp.c	/^void init_pptp_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_qq_dissector	src/lib/protocols/qq.c	/^void init_qq_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_quake_dissector	src/lib/protocols/quake.c	/^void init_quake_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_quic_dissector	src/lib/protocols/quic.c	/^void init_quic_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id,$/;"	f
init_radius_dissector	src/lib/protocols/radius.c	/^void init_radius_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_rdp_dissector	src/lib/protocols/rdp.c	/^void init_rdp_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_redis_dissector	src/lib/protocols/redis_net.c	/^void init_redis_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_rsync_dissector	src/lib/protocols/rsync.c	/^void init_rsync_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_rtcp_dissector	src/lib/protocols/rtcp.c	/^void init_rtcp_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_rtmp_dissector	src/lib/protocols/rtmp.c	/^void init_rtmp_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_rtp_dissector	src/lib/protocols/rtp.c	/^void init_rtp_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_rtsp_dissector	src/lib/protocols/rtsp.c	/^void init_rtsp_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_rx_dissector	src/lib/protocols/rx.c	/^void init_rx_dissector(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
init_sflow_dissector	src/lib/protocols/sflow.c	/^void init_sflow_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_shoutcast_dissector	src/lib/protocols/shoutcast.c	/^void init_shoutcast_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_sip_dissector	src/lib/protocols/sip.c	/^void init_sip_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_skinny_dissector	src/lib/protocols/skinny.c	/^void init_skinny_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_skype_dissector	src/lib/protocols/skype.c	/^void init_skype_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask) $/;"	f
init_smb_dissector	src/lib/protocols/smb.c	/^void init_smb_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_smpp_dissector	src/lib/protocols/smpp.c	/^void init_smpp_dissector(struct ndpi_detection_module_struct* ndpi_struct, $/;"	f
init_snmp_dissector	src/lib/protocols/snmp.c	/^void init_snmp_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_socks_dissector	src/lib/protocols/socks45.c	/^void init_socks_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_socrates_dissector	src/lib/protocols/socrates.c	/^void init_socrates_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_sopcast_dissector	src/lib/protocols/sopcast.c	/^void init_sopcast_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_soulseek_dissector	src/lib/protocols/soulseek.c	/^void init_soulseek_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_spotify_dissector	src/lib/protocols/spotify.c	/^void init_spotify_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_ssdp_dissector	src/lib/protocols/ssdp.c	/^void init_ssdp_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_ssh_dissector	src/lib/protocols/ssh.c	/^void init_ssh_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_ssl_dissector	src/lib/protocols/ssl.c	/^void init_ssl_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_starcraft_dissector	src/lib/protocols/starcraft.c	/^void init_starcraft_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_stealthnet_dissector	src/lib/protocols/stealthnet.c	/^void init_stealthnet_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_steam_dissector	src/lib/protocols/steam.c	/^void init_steam_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_string_based_protocols	src/lib/ndpi_main.c	/^static void init_string_based_protocols(struct ndpi_detection_module_struct *ndpi_mod)$/;"	f	file:
init_stun_dissector	src/lib/protocols/stun.c	/^void init_stun_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_syslog_dissector	src/lib/protocols/syslog.c	/^void init_syslog_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_tables	example/ndpi_util.c	/^static void init_tables(uint32_t* table, uint32_t* wtable) {$/;"	f	file:
init_teamspeak_dissector	src/lib/protocols/teamspeak.c	/^void init_teamspeak_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_teamviewer_dissector	src/lib/protocols/teamviewer.c	/^void init_teamviewer_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_telegram_dissector	src/lib/protocols/telegram.c	/^void init_telegram_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_telnet_dissector	src/lib/protocols/telnet.c	/^void init_telnet_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_teredo_dissector	src/lib/protocols/teredo.c	/^void init_teredo_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_tftp_dissector	src/lib/protocols/tftp.c	/^void init_tftp_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_thunder_dissector	src/lib/protocols/thunder.c	/^void init_thunder_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_tor_dissector	src/lib/protocols/tor.c	/^void init_tor_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_tvants_dissector	src/lib/protocols/tvants.c	/^void init_tvants_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_tvuplayer_dissector	src/lib/protocols/tvuplayer.c	/^void init_tvuplayer_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_ubntac2_dissector	src/lib/protocols/ubntac2.c	/^void init_ubntac2_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_usenet_dissector	src/lib/protocols/usenet.c	/^void init_usenet_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_vhua_dissector	src/lib/protocols/vhua.c	/^void init_vhua_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_viber_dissector	src/lib/protocols/viber.c	/^void init_viber_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask) $/;"	f
init_vmware_dissector	src/lib/protocols/vmware.c	/^void init_vmware_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_vnc_dissector	src/lib/protocols/vnc.c	/^void init_vnc_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_warcraft3_dissector	src/lib/protocols/warcraft3.c	/^void init_warcraft3_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_whois_das_dissector	src/lib/protocols/whoisdas.c	/^void init_whois_das_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_world_of_kung_fu_dissector	src/lib/protocols/world_of_kung_fu.c	/^void init_world_of_kung_fu_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_world_of_warcraft_dissector	src/lib/protocols/world_of_warcraft.c	/^void init_world_of_warcraft_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_xbox_dissector	src/lib/protocols/xbox.c	/^void init_xbox_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_xdmcp_dissector	src/lib/protocols/xdmcp.c	/^void init_xdmcp_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_yahoo_dissector	src/lib/protocols/yahoo.c	/^void init_yahoo_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_zattoo_dissector	src/lib/protocols/zattoo.c	/^void init_zattoo_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
init_zmq_dissector	src/lib/protocols/zeromq.c	/^void init_zmq_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)$/;"	f
input	src/lib/protocols/netflow.c	/^  u_int16_t input;      \/* Input interface index *\/$/;"	m	struct:flow_ver1_rec	file:
input	src/lib/protocols/netflow.c	/^  u_int16_t input;      \/* Input interface index *\/$/;"	m	struct:flow_ver5_rec	file:
input	src/lib/protocols/netflow.c	/^  u_int16_t input;      \/* Input interface index *\/$/;"	m	struct:flow_ver7_rec	file:
interval	src/lib/protocols/btlib.h	/^	int			interval,min_interval;$/;"	m	struct:bt_parse_protocol
intoaV4	example/ndpiReader.c	/^char* intoaV4(u_int32_t addr, char* buf, u_int16_t bufLen) {$/;"	f
ip	example/ndpiReader.c	/^  u_int8_t ip[4];		   \/\/ Ip address$/;"	m	struct:ndpi_id	file:
ip	src/include/ndpi_typedefs.h	/^  u_int32_t		ip[4];$/;"	m	struct:bt_announce
ip	src/include/ndpi_typedefs.h	/^  u_int32_t               ip;$/;"	m	struct:hash_ip4p_node
ip	src/lib/protocols/btlib.h	/^		struct bt_ipv4p	*ip;$/;"	m	struct:bt_parse_protocol::__anon12	typeref:struct:bt_parse_protocol::__anon12::bt_ipv4p
ip	src/lib/protocols/btlib.h	/^	struct bt_ipv4p		*ip;$/;"	m	struct:bt_parse_protocol	typeref:struct:bt_parse_protocol::bt_ipv4p
ip	src/lib/protocols/btlib.h	/^	u_int32_t ip;$/;"	m	struct:bt_ipv4p
ip	src/lib/protocols/btlib.h	/^	u_int32_t ip;$/;"	m	struct:bt_nodes_data
ip	src/lib/protocols/btlib.h	/^	u_int32_t ip[4];$/;"	m	struct:bt_ipv6p
ip	src/lib/protocols/btlib.h	/^	u_int32_t ip[4];$/;"	m	struct:bt_nodes6_data
ip6_ctlun	src/include/ndpi_typedefs.h	/^  } ip6_ctlun;$/;"	m	struct:ndpi_ipv6hdr	typeref:union:ndpi_ipv6hdr::__anon18
ip6_dst	src/include/ndpi_typedefs.h	/^  struct ndpi_in6_addr ip6_dst;$/;"	m	struct:ndpi_ipv6hdr	typeref:struct:ndpi_ipv6hdr::ndpi_in6_addr
ip6_src	src/include/ndpi_typedefs.h	/^  struct ndpi_in6_addr ip6_src;$/;"	m	struct:ndpi_ipv6hdr	typeref:struct:ndpi_ipv6hdr::ndpi_in6_addr
ip6_un1	src/include/ndpi_typedefs.h	/^    } ip6_un1;$/;"	m	union:ndpi_ipv6hdr::__anon18	typeref:struct:ndpi_ipv6hdr::__anon18::ndpi_ip6_hdrctl
ip6_un1_flow	src/include/ndpi_typedefs.h	/^      u_int32_t ip6_un1_flow;$/;"	m	struct:ndpi_ipv6hdr::__anon18::ndpi_ip6_hdrctl
ip6_un1_hlim	src/include/ndpi_typedefs.h	/^      u_int8_t ip6_un1_hlim;$/;"	m	struct:ndpi_ipv6hdr::__anon18::ndpi_ip6_hdrctl
ip6_un1_nxt	src/include/ndpi_typedefs.h	/^      u_int8_t ip6_un1_nxt;$/;"	m	struct:ndpi_ipv6hdr::__anon18::ndpi_ip6_hdrctl
ip6_un1_plen	src/include/ndpi_typedefs.h	/^      u_int16_t ip6_un1_plen;$/;"	m	struct:ndpi_ipv6hdr::__anon18::ndpi_ip6_hdrctl
ip6_un2_vfc	src/include/ndpi_typedefs.h	/^    u_int8_t ip6_un2_vfc;$/;"	m	union:ndpi_ipv6hdr::__anon18
ipProto2Name	example/ndpiReader.c	/^static char* ipProto2Name(u_int16_t proto_id) {$/;"	f	file:
ip_packet_count	example/ndpi_util.h	/^  u_int64_t ip_packet_count;            \/\/ 记录了收到的IP报文数量$/;"	m	struct:ndpi_stats
ip_string	src/include/ndpi_typedefs.h	/^  char ip_string[NDPI_IP_STRING_SIZE];$/;"	m	struct:ndpi_detection_module_struct
ip_version	example/ndpi_util.h	/^  u_int8_t ip_version;$/;"	m	struct:ndpi_flow_info
ip_version_limit	src/include/ndpi_typedefs.h	/^  u_int8_t ip_version_limit;$/;"	m	struct:ndpi_detection_module_struct
iph	src/include/ndpi_typedefs.h	/^  const struct ndpi_iphdr *iph;         \/\/ IPv4头$/;"	m	struct:ndpi_packet_struct	typeref:struct:ndpi_packet_struct::ndpi_iphdr
iphv6	src/include/ndpi_typedefs.h	/^  const struct ndpi_ipv6hdr *iphv6;     \/\/ IPv6头$/;"	m	struct:ndpi_packet_struct	typeref:struct:ndpi_packet_struct::ndpi_ipv6hdr
ipv4	src/include/ndpi_typedefs.h	/^  u_int32_t ipv4;$/;"	m	union:__anon19
ipv4_u_int8_t	src/include/ndpi_typedefs.h	/^  u_int8_t ipv4_u_int8_t[4];$/;"	m	union:__anon19
ipv6	src/include/ndpi_typedefs.h	/^  int			  ipv6;$/;"	m	struct:hash_ip4p_table
ipv6	src/include/ndpi_typedefs.h	/^  struct ndpi_in6_addr ipv6;$/;"	m	union:__anon19	typeref:struct:__anon19::ndpi_in6_addr
iqiyi_counter	src/lib/protocols/http.c	/^static u_int16_t iqiyi_counter;$/;"	v	file:
irc_0x1000_full	src/include/ndpi_typedefs.h	/^  u_int32_t irc_0x1000_full:1;$/;"	m	struct:ndpi_flow_tcp_struct
irc_3a_counter	src/include/ndpi_typedefs.h	/^  u_int32_t irc_3a_counter:3;$/;"	m	struct:ndpi_flow_tcp_struct
irc_direction	src/include/ndpi_typedefs.h	/^  u_int32_t irc_direction:2;$/;"	m	struct:ndpi_flow_tcp_struct
irc_number_of_port	src/include/ndpi_typedefs.h	/^  u_int8_t irc_number_of_port;$/;"	m	struct:ndpi_id_struct
irc_port	src/include/ndpi_typedefs.h	/^  u_int16_t irc_port[NDPI_PROTOCOL_IRC_MAXPORT];$/;"	m	struct:ndpi_id_struct
irc_port	src/include/ndpi_typedefs.h	/^  u_int8_t irc_port;$/;"	m	struct:ndpi_flow_tcp_struct
irc_stage	src/include/ndpi_typedefs.h	/^  u_int8_t irc_stage;$/;"	m	struct:ndpi_flow_tcp_struct
irc_stage2	src/include/ndpi_typedefs.h	/^  u_int32_t irc_stage2:5;$/;"	m	struct:ndpi_flow_tcp_struct
irc_timeout	src/include/ndpi_typedefs.h	/^  u_int32_t irc_timeout;$/;"	m	struct:ndpi_detection_module_struct
irc_ts	src/include/ndpi_typedefs.h	/^  u_int32_t irc_ts;$/;"	m	struct:ndpi_id_struct
isCoAPport	src/lib/protocols/coap.c	/^static int isCoAPport(u_int16_t port) {$/;"	f	file:
isHangoutTCPPort	src/lib/protocols/hangout.c	/^static u_int8_t isHangoutTCPPort(u_int16_t port) {$/;"	f	file:
isHangoutUDPPort	src/lib/protocols/hangout.c	/^static u_int8_t isHangoutUDPPort(u_int16_t port) {$/;"	f	file:
isValidMSRTPType	src/lib/protocols/rtp.c	/^static u_int8_t isValidMSRTPType(u_int8_t payloadType) {$/;"	f	file:
is_google_flow	src/lib/protocols/hangout.c	/^static u_int8_t is_google_flow(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
is_special_aimini_host	src/lib/protocols/aimini.c	/^static u_int8_t is_special_aimini_host(struct ndpi_int_one_line_struct host_line)$/;"	f	file:
is_utp_pkt	src/lib/protocols/bittorrent.c	/^static u_int8_t is_utp_pkt(const u_int8_t *payload, u_int payload_len) {$/;"	f	file:
jArray_known_flows	example/ndpiReader.c	/^static json_object *jArray_known_flows;     \/\/ 记录已知报文的JSON对象(数组形式)$/;"	v	file:
jArray_unknown_flows	example/ndpiReader.c	/^static json_object *jArray_unknown_flows;   \/\/ 记录未知报文的JSON对象(数组形式)$/;"	v	file:
jabber_file_transfer_port	src/include/ndpi_typedefs.h	/^  u_int16_t jabber_file_transfer_port[2];$/;"	m	struct:ndpi_id_struct
jabber_file_transfer_timeout	src/include/ndpi_typedefs.h	/^  u_int32_t jabber_file_transfer_timeout;$/;"	m	struct:ndpi_detection_module_struct
jabber_string	src/lib/protocols/jabber.c	/^struct jabber_string {$/;"	s	file:
jabber_strings	src/lib/protocols/jabber.c	/^static struct jabber_string jabber_strings[] = {$/;"	v	typeref:struct:jabber_string	file:
jabber_stun_or_ft_ts	src/include/ndpi_typedefs.h	/^  u_int32_t jabber_stun_or_ft_ts;$/;"	m	struct:ndpi_id_struct
jabber_stun_timeout	src/include/ndpi_typedefs.h	/^  u_int32_t jabber_stun_timeout;$/;"	m	struct:ndpi_detection_module_struct
jabber_voice_stun_port	src/include/ndpi_typedefs.h	/^  u_int16_t jabber_voice_stun_port[JABBER_MAX_STUN_PORTS];$/;"	m	struct:ndpi_id_struct
jabber_voice_stun_used_ports	src/include/ndpi_typedefs.h	/^  u_int8_t jabber_voice_stun_used_ports;$/;"	m	struct:ndpi_id_struct
json_flag	example/ndpiReader.c	/^static u_int8_t json_flag = 0;      \/\/ 标识是否启用JSON格式输出$/;"	v	file:
json_init	example/ndpiReader.c	/^static void json_init() {$/;"	f	file:
key	example/uthash.h	/^   void *key;                        \/* ptr to enclosing struct's key  *\/$/;"	m	struct:UT_hash_handle
key	src/include/ndpi_typedefs.h	/^  char *key;    \/\/ 节点上的数据(struct ndpi_flow_info \/ )$/;"	m	struct:node_t
keylen	example/uthash.h	/^   unsigned keylen;                  \/* enclosing struct's key len     *\/$/;"	m	struct:UT_hash_handle
kxun_counter	src/lib/protocols/http.c	/^static u_int16_t kxun_counter;$/;"	v	file:
l	src/lib/protocols/btlib.h	/^	size_t   l;$/;"	m	struct:b_elem_s
l	src/lib/third_party/include/ndpi_patricia.h	/^  struct _patricia_node_t *l, *r;	\/* left and right children  指向左、右子树 *\/$/;"	m	struct:_patricia_node_t	typeref:struct:_patricia_node_t::_patricia_node_t
l3_packet_len	src/include/ndpi_typedefs.h	/^  u_int16_t l3_packet_len;      \/\/ 记录了收到包的l3层长度$/;"	m	struct:ndpi_packet_struct
l4	src/include/ndpi_typedefs.h	/^  } l4;$/;"	m	struct:ndpi_flow_struct	typeref:union:ndpi_flow_struct::__anon24
l4_packet_len	src/include/ndpi_typedefs.h	/^  u_int16_t l4_packet_len;      \/\/ 记录了收到包的l4层长度$/;"	m	struct:ndpi_packet_struct
l4_protocol	src/include/ndpi_typedefs.h	/^  u_int8_t l4_protocol;         \/\/ 记录了收到包的l4层协议号(比如TCP)$/;"	m	struct:ndpi_packet_struct
label	src/include/ndpi_typedefs.h	/^  u_int32_t label:20, exp:3, s:1, ttl:8;$/;"	m	struct:ndpi_mpls_header
last	src/lib/protocols/netflow.c	/^  u_int32_t last;       \/* and of last packet of the flow *\/$/;"	m	struct:flow_ver1_rec	file:
last	src/lib/protocols/netflow.c	/^  u_int32_t last;       \/* and of last packet of the flow *\/$/;"	m	struct:flow_ver5_rec	file:
last	src/lib/protocols/netflow.c	/^  u_int32_t last;       \/* and of last packet of the flow *\/$/;"	m	struct:flow_ver7_rec	file:
last_idle_scan_time	example/ndpiReader.c	/^  u_int64_t last_idle_scan_time;        \/\/ 记录了最近一次扫描空闲数据流的时间$/;"	m	struct:reader_thread	file:
last_seen	example/ndpi_util.h	/^  u_int64_t last_seen;  \/\/ 记录了最近收到包的时间$/;"	m	struct:ndpi_flow_info
last_time	example/ndpi_util.h	/^  u_int64_t last_time;      \/\/ 该工作流最近一次收到包的时间$/;"	m	struct:ndpi_workflow
last_time_port_used	src/include/ndpi_typedefs.h	/^  u_int32_t last_time_port_used[NDPI_PROTOCOL_IRC_MAXPORT];$/;"	m	struct:ndpi_id_struct
lchg	src/include/ndpi_typedefs.h	/^  time_t                  lchg;$/;"	m	struct:hash_ip4p_node
left	example/ndpiReader.c	/^    struct node_a *left, *right;$/;"	m	struct:node_a	typeref:struct:node_a::node_a	file:
left	src/include/ndpi_typedefs.h	/^  struct node_t *left, *right;  \/\/ 左、右子树$/;"	m	struct:node_t	typeref:struct:node_t::node_t
len	src/include/ndpi_typedefs.h	/^  size_t                  len;$/;"	m	struct:hash_ip4p
len	src/include/ndpi_typedefs.h	/^  u_int16_t len;$/;"	m	struct:ndpi_int_one_line_struct
len	src/include/ndpi_typedefs.h	/^  u_int16_t len;$/;"	m	struct:ndpi_radiotap_header
len	src/include/ndpi_typedefs.h	/^  u_int16_t len;$/;"	m	struct:ndpi_udphdr
len	src/lib/protocols/h323.c	/^  u_int16_t len;$/;"	m	struct:tpkt	file:
len	src/lib/protocols/radius.c	/^  u_int16_t len;$/;"	m	struct:radius_header	file:
len	src/lib/protocols/yahoo.c	/^  u_int16_t len;$/;"	m	struct:ndpi_yahoo_header	file:
length	src/include/ndpi_typedefs.h	/^  u_int16_t length;$/;"	m	struct:ndpi_cdp
length	src/lib/protocols/afp.c	/^  u_int32_t dataOffset, length, reserved;$/;"	m	struct:afpHeader	file:
length	src/lib/protocols/amqp.c	/^	u_int32_t length;$/;"	m	struct:amqp_header	file:
length	src/lib/protocols/drda.c	/^  u_int16_t length;$/;"	m	struct:ndpi_drda_hdr	file:
length	src/lib/protocols/mssql_tds.c	/^  u_int16_t length;$/;"	m	struct:tds_packet_header	file:
length	src/lib/third_party/include/actypes.h	/^  unsigned int length; \/* Length of pattern *\/$/;"	m	struct:__anon4
length	src/lib/third_party/include/actypes.h	/^  unsigned int length; \/* Length of string *\/$/;"	m	struct:__anon5
length2	src/lib/protocols/drda.c	/^  u_int16_t length2;$/;"	m	struct:ndpi_drda_hdr	file:
level	src/lib/protocols/btlib.h	/^	int	level;$/;"	m	struct:bt_parse_data_cb
line	src/include/ndpi_typedefs.h	/^  struct ndpi_int_one_line_struct line[NDPI_MAX_PARSE_LINES_PER_PACKET];$/;"	m	struct:ndpi_packet_struct	typeref:struct:ndpi_packet_struct::ndpi_int_one_line_struct
live_capture	example/ndpiReader.c	/^static u_int8_t live_capture = 0;           \/\/ 标识是否打开了一个捕获接口$/;"	v	file:
local iter 	wireshark/ndpi.lua	/^   local iter = function ()   -- iterator function$/;"	f
lock	src/include/ndpi_typedefs.h	/^  spinlock_t              lock;$/;"	m	struct:hash_ip4p
lock	src/include/ndpi_typedefs.h	/^  spinlock_t              lock;$/;"	m	struct:hash_ip4p_table
log2_num_buckets	example/uthash.h	/^   unsigned num_buckets, log2_num_buckets;$/;"	m	struct:UT_hash_table
longopts	example/ndpiReader.c	/^static struct option longopts[] = {$/;"	v	typeref:struct:option	file:
lotus_notes_packet_id	src/include/ndpi_typedefs.h	/^  u_int8_t lotus_notes_packet_id;$/;"	m	struct:ndpi_flow_tcp_struct
lower_ip	example/ndpi_util.h	/^  u_int32_t lower_ip;           \/\/ 记录了该数据流的源IP$/;"	m	struct:ndpi_flow_info
lower_name	example/ndpi_util.h	/^  char lower_name[48], upper_name[48];  \/\/ 分别记录了该数据流的源IP名和目的IP名$/;"	m	struct:ndpi_flow_info
lower_port	example/ndpi_util.h	/^  u_int16_t lower_port;         \/\/ 记录了该数据流的源端口$/;"	m	struct:ndpi_flow_info
magic	example/ndpiReader.c	/^  u_int32_t magic; \/* 0x19682017 *\/$/;"	m	struct:ndpi_packet_trailer	file:
magic	src/lib/protocols/dhcp.c	/^  uint32_t	magic; \/* 236 *\/$/;"	m	struct:__anon10	file:
magic	src/lib/protocols/drda.c	/^  u_int8_t magic;$/;"	m	struct:ndpi_drda_hdr	file:
mail_imap_stage	src/include/ndpi_typedefs.h	/^  u_int32_t mail_imap_stage:3, mail_imap_starttls:2;$/;"	m	struct:ndpi_flow_tcp_struct
mail_imap_starttls	src/include/ndpi_typedefs.h	/^  u_int32_t mail_imap_stage:3, mail_imap_starttls:2;$/;"	m	struct:ndpi_flow_tcp_struct
mail_pop_stage	src/include/ndpi_typedefs.h	/^  u_int32_t mail_pop_stage:2;$/;"	m	struct:ndpi_flow_tcp_struct
main	example/ndpiReader.c	/^int main(int argc, char **argv) {$/;"	f
malloc_wrapper	example/ndpi_util.c	/^static void *malloc_wrapper(size_t size) {$/;"	f	file:
master_protocol	example/ndpiReader.c	/^  u_int16_t master_protocol \/* e.g. HTTP *\/, app_protocol \/* e.g. FaceBook *\/;$/;"	m	struct:ndpi_packet_trailer	file:
master_protocol	src/include/ndpi_typedefs.h	/^  u_int16_t master_protocol; \/* e.g. HTTP  对应detected_protocol_stack[1] *\/ $/;"	m	struct:ndpi_proto
master_tcp_protoId	src/include/ndpi_typedefs.h	/^  u_int16_t master_tcp_protoId[2], master_udp_protoId[2]; \/* The main protocols on which this sub-protocol sits on *\/$/;"	m	struct:ndpi_proto_defaults
master_udp_protoId	src/include/ndpi_typedefs.h	/^  u_int16_t master_tcp_protoId[2], master_udp_protoId[2]; \/* The main protocols on which this sub-protocol sits on *\/$/;"	m	struct:ndpi_proto_defaults
match	src/lib/third_party/include/ahocorasick.h	/^  AC_MATCH_t match; \/* Any match is reported with this *\/$/;"	m	struct:__anon8
match_callback	src/lib/third_party/include/ahocorasick.h	/^  MATCH_CALBACK_f match_callback; \/* Match call-back function *\/$/;"	m	struct:__anon8
match_first_bytes	src/include/ndpi_define.h	287;"	d
match_num	src/lib/third_party/include/actypes.h	/^  unsigned int match_num; \/* Number of matched patterns *\/$/;"	m	struct:__anon6
matched_patterns	src/lib/third_party/include/node.h	/^  AC_PATTERN_t * matched_patterns; \/* Array of matched patterns *\/$/;"	m	struct:ac_node
matched_patterns_max	src/lib/third_party/include/node.h	/^  unsigned short matched_patterns_max; \/* Max capacity of allocated memory for matched_patterns *\/$/;"	m	struct:ac_node
matched_patterns_num	src/lib/third_party/include/node.h	/^  unsigned short matched_patterns_num; \/* Number of matched patterns at this node *\/$/;"	m	struct:ac_node
max_ndpi_flows	example/ndpi_util.h	/^  u_int32_t max_ndpi_flows; \/\/ 固定为MAX_NDPI_FLOWS$/;"	m	struct:ndpi_workflow_prefs
max_ndpi_memory	example/ndpiReader.c	/^u_int32_t max_ndpi_memory = 0;      \/\/ 记录了分配过的堆内存峰值$/;"	v
max_packet_len	example/ndpi_util.h	/^  u_int16_t max_packet_len;         \/\/ 记录了收到的最长包$/;"	m	struct:ndpi_stats
maxbits	src/lib/third_party/include/ndpi_patricia.h	/^  u_int		maxbits;	\/* for IP, 32 bit addresses *\/$/;"	m	struct:_patricia_tree_t
mdns	src/include/ndpi_typedefs.h	/^    } mdns;$/;"	m	union:ndpi_flow_struct::__anon26	typeref:struct:ndpi_flow_struct::__anon26::__anon31
message_id	src/lib/protocols/coap.c	/^  u_int16_t message_id; \/\/if needed, remember to convert in host number$/;"	m	struct:ndpi_coap_hdr	file:
message_len	src/lib/protocols/gtp.c	/^  u_int16_t message_len;$/;"	m	struct:gtp_header_generic	file:
message_type	src/lib/protocols/gtp.c	/^  u_int8_t flags, message_type;$/;"	m	struct:gtp_header_generic	file:
method	src/include/ndpi_typedefs.h	/^    ndpi_http_method method;$/;"	m	struct:ndpi_flow_struct::__anon25
method	src/lib/protocols/amqp.c	/^	u_int16_t class_id, method;$/;"	m	struct:amqp_header	file:
min_interval	src/lib/protocols/btlib.h	/^	int			interval,min_interval;$/;"	m	struct:bt_parse_protocol
mms_stage	src/include/ndpi_typedefs.h	/^  u_int32_t mms_stage:2;$/;"	m	struct:ndpi_flow_tcp_struct
mpls_count	example/ndpi_util.h	/^  u_int64_t mpls_count;$/;"	m	struct:ndpi_stats
msgType	src/lib/protocols/dhcp.c	/^  uint8_t	msgType;$/;"	m	struct:__anon10	file:
msg_len	src/lib/protocols/stun.c	/^  u_int16_t msg_type, msg_len;$/;"	m	struct:stun_packet_header	file:
msg_type	src/lib/protocols/stun.c	/^  u_int16_t msg_type, msg_len;$/;"	m	struct:stun_packet_header	file:
msn_ssl_ft	src/include/ndpi_typedefs.h	/^  u_int32_t msn_ssl_ft:2;$/;"	m	struct:ndpi_flow_tcp_struct
msn_stage	src/include/ndpi_typedefs.h	/^  u_int32_t msn_stage:3;$/;"	m	struct:ndpi_flow_tcp_struct
nDPI_traceLevel	example/ndpiReader.c	/^static u_int8_t nDPI_traceLevel = 0;$/;"	v	file:
n_peers	src/lib/protocols/btlib.h	/^	int			n_peers;$/;"	m	struct:bt_parse_protocol
name	example/ndpiReader.c	/^  char name[16];$/;"	m	struct:ndpi_packet_trailer	file:
name	example/ndpiReader.c	/^  char name[16];$/;"	m	struct:ndpi_proto_sorter	file:
name	src/include/ndpi_typedefs.h	/^    name[192 - 4*10 - 2 - 1];     \/\/ 149 bytes$/;"	m	struct:bt_announce
name	src/lib/protocols/btlib.h	/^			 	*name;		\/\/ varlen$/;"	m	struct:bt_parse_protocol::__anon11
name	src/lib/protocols/btlib.h	/^			 	*name;		\/\/ varlen$/;"	m	struct:bt_parse_protocol::__anon12
name_len	src/include/ndpi_typedefs.h	/^  u_int8_t		name_len,$/;"	m	struct:bt_announce
name_len	src/lib/protocols/btlib.h	/^		u_int16_t	name_len;$/;"	m	struct:bt_parse_protocol::__anon12
name_len	src/lib/protocols/btlib.h	/^		u_int16_t name_len;$/;"	m	struct:bt_parse_protocol::__anon11
nat_ip	src/include/ndpi_typedefs.h	/^  u_char nat_ip[24];$/;"	m	struct:ndpi_flow_struct
ndpi_Clear_Patricia	src/lib/third_party/src/ndpi_patricia.c	/^ndpi_Clear_Patricia (patricia_tree_t *patricia, void_fn_t func)$/;"	f
ndpi_DeleteEntry	src/lib/third_party/src/ndpi_patricia.c	/^void ndpi_DeleteEntry(void *a) {$/;"	f
ndpi_Deref_Prefix	src/lib/third_party/src/ndpi_patricia.c	/^ndpi_Deref_Prefix (prefix_t * prefix)$/;"	f
ndpi_Destroy_Patricia	src/lib/third_party/src/ndpi_patricia.c	/^ndpi_Destroy_Patricia (patricia_tree_t *patricia, void_fn_t func)$/;"	f
ndpi_New_Patricia	src/lib/third_party/src/ndpi_patricia.c	/^ndpi_New_Patricia (int maxbits)$/;"	f
ndpi_New_Prefix	src/lib/third_party/src/ndpi_patricia.c	/^ndpi_New_Prefix (int family, void *dest, int bitlen)$/;"	f
ndpi_New_Prefix2	src/lib/third_party/src/ndpi_patricia.c	/^ndpi_New_Prefix2 (int family, void *dest, int bitlen, prefix_t *prefix)$/;"	f
ndpi_Ref_Prefix	src/lib/third_party/src/ndpi_patricia.c	/^ndpi_Ref_Prefix (prefix_t * prefix)$/;"	f
ndpi_VISIT	src/include/ndpi_typedefs.h	/^  } ndpi_VISIT;$/;"	t	typeref:enum:__anon16
ndpi_add_connection_as_bittorrent	src/lib/protocols/bittorrent.c	/^static void ndpi_add_connection_as_bittorrent(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow,$/;"	f	file:
ndpi_add_content_subprotocol	src/lib/ndpi_main.c	/^int ndpi_add_content_subprotocol(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_add_host_ip_subprotocol	src/lib/ndpi_main.c	/^static int ndpi_add_host_ip_subprotocol(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_add_host_url_subprotocol	src/lib/ndpi_main.c	/^static int ndpi_add_host_url_subprotocol(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_add_string_to_automa	src/lib/ndpi_main.c	/^int ndpi_add_string_to_automa(void *_automa, char *str) {$/;"	f
ndpi_add_string_value_to_automa	src/lib/ndpi_main.c	/^int ndpi_add_string_value_to_automa(void *_automa, char *str, unsigned long num) {$/;"	f
ndpi_apply_flow_protocol_to_packet	src/lib/ndpi_main.c	/^void ndpi_apply_flow_protocol_to_packet(struct ndpi_flow_struct *flow,$/;"	f
ndpi_ascii2prefix	src/lib/third_party/src/ndpi_patricia.c	/^ndpi_ascii2prefix (int family, char *string)$/;"	f
ndpi_automa	src/include/ndpi_typedefs.h	/^} ndpi_automa;$/;"	t	typeref:struct:_ndpi_automa
ndpi_automa_match_string_subprotocol	src/lib/ndpi_main.c	/^static int ndpi_automa_match_string_subprotocol(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_build_default_ports	src/lib/ndpi_main.c	/^ndpi_port_range * ndpi_build_default_ports(ndpi_port_range *ports,$/;"	f
ndpi_build_default_ports_range	src/lib/ndpi_main.c	/^ndpi_port_range * ndpi_build_default_ports_range(ndpi_port_range *ports,$/;"	f
ndpi_bytestream_dec_or_hex_to_number	src/lib/ndpi_main.c	/^u_int32_t ndpi_bytestream_dec_or_hex_to_number(const u_int8_t * str, u_int16_t max_chars_to_read, u_int16_t * bytes_read)$/;"	f
ndpi_bytestream_dec_or_hex_to_number64	src/lib/ndpi_main.c	/^u_int64_t ndpi_bytestream_dec_or_hex_to_number64(const u_int8_t * str, u_int16_t max_chars_to_read, u_int16_t * bytes_read)$/;"	f
ndpi_bytestream_to_ipv4	src/lib/ndpi_main.c	/^u_int32_t ndpi_bytestream_to_ipv4(const u_int8_t * str, u_int16_t max_chars_to_read, u_int16_t * bytes_read)$/;"	f
ndpi_bytestream_to_number	src/lib/ndpi_main.c	/^u_int32_t ndpi_bytestream_to_number(const u_int8_t * str, u_int16_t max_chars_to_read, u_int16_t * bytes_read)$/;"	f
ndpi_bytestream_to_number64	src/lib/ndpi_main.c	/^u_int64_t ndpi_bytestream_to_number64(const u_int8_t * str, u_int16_t max_chars_to_read, u_int16_t * bytes_read)$/;"	f
ndpi_call_function_struct	src/include/ndpi_typedefs.h	/^struct ndpi_call_function_struct {$/;"	s
ndpi_calloc	src/lib/ndpi_main.c	/^void * ndpi_calloc(unsigned long count, size_t size)$/;"	f
ndpi_category_str	src/lib/ndpi_main.c	/^const char* ndpi_category_str(ndpi_protocol_category_t category) {$/;"	f
ndpi_cdp	src/include/ndpi_typedefs.h	/^struct ndpi_cdp$/;"	s
ndpi_chdlc	src/include/ndpi_typedefs.h	/^struct ndpi_chdlc$/;"	s
ndpi_check_bjnp	src/lib/protocols/bjnp.c	/^static void ndpi_check_bjnp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_check_citrix	src/lib/protocols/citrix.c	/^static void ndpi_check_citrix(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_check_dropbox	src/lib/protocols/dropbox.c	/^static void ndpi_check_dropbox(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_check_edonkey	src/lib/protocols/edonkey.c	/^static void ndpi_check_edonkey(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f	file:
ndpi_check_for_IRC_traces	src/lib/protocols/irc.c	/^static u_int8_t ndpi_check_for_IRC_traces(const u_int8_t * ptr, u_int16_t len)$/;"	f	file:
ndpi_check_for_NOTICE_or_PRIVMSG	src/lib/protocols/irc.c	/^static u_int8_t ndpi_check_for_NOTICE_or_PRIVMSG(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_check_for_Nickname	src/lib/protocols/irc.c	/^static u_int8_t ndpi_check_for_Nickname(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_check_for_YmsgCommand	src/lib/protocols/yahoo.c	/^static u_int8_t ndpi_check_for_YmsgCommand(u_int16_t len, const u_int8_t * ptr)$/;"	f	file:
ndpi_check_for_cmd	src/lib/protocols/irc.c	/^static u_int8_t ndpi_check_for_cmd(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_check_for_email_address	src/lib/ndpi_main.c	/^u_int16_t ndpi_check_for_email_address(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_check_ftp_control	src/lib/protocols/ftp_control.c	/^static void ndpi_check_ftp_control(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f	file:
ndpi_check_ftp_data	src/lib/protocols/ftp_data.c	/^static void ndpi_check_ftp_data(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f	file:
ndpi_check_gtp	src/lib/protocols/gtp.c	/^static void ndpi_check_gtp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_check_http_tcp	src/lib/protocols/http.c	/^static void ndpi_check_http_tcp(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_check_lotus_notes	src/lib/protocols/lotus_notes.c	/^static void ndpi_check_lotus_notes(struct ndpi_detection_module_struct *ndpi_struct, $/;"	f	file:
ndpi_check_netflow	src/lib/protocols/netflow.c	/^static void ndpi_check_netflow(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_check_overflow	src/lib/protocols/smpp.c	/^static  u_int8_t ndpi_check_overflow(u_int32_t current_length, u_int32_t total_lenth)$/;"	f	file:
ndpi_check_pando_tcp	src/lib/protocols/pando.c	/^static void ndpi_check_pando_tcp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f	file:
ndpi_check_pando_udp	src/lib/protocols/pando.c	/^static void ndpi_check_pando_udp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f	file:
ndpi_check_pplive_udp1	src/lib/protocols/pplive.c	/^static void ndpi_check_pplive_udp1(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f	file:
ndpi_check_pplive_udp2	src/lib/protocols/pplive.c	/^static void ndpi_check_pplive_udp2(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f	file:
ndpi_check_pplive_udp3	src/lib/protocols/pplive.c	/^static void ndpi_check_pplive_udp3(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f	file:
ndpi_check_radius	src/lib/protocols/radius.c	/^static void ndpi_check_radius(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_check_redis	src/lib/protocols/redis_net.c	/^static void ndpi_check_redis(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f	file:
ndpi_check_rtmp	src/lib/protocols/rtmp.c	/^static void ndpi_check_rtmp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_check_rx	src/lib/protocols/rx.c	/^void ndpi_check_rx(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_check_sflow	src/lib/protocols/sflow.c	/^static void ndpi_check_sflow(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_check_skype	src/lib/protocols/skype.c	/^static void ndpi_check_skype(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_check_socks4	src/lib/protocols/socks45.c	/^static void ndpi_check_socks4(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_check_socks5	src/lib/protocols/socks45.c	/^static void ndpi_check_socks5(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_check_spotify	src/lib/protocols/spotify.c	/^static void ndpi_check_spotify(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_check_starcraft_tcp	src/lib/protocols/starcraft.c	/^u_int8_t ndpi_check_starcraft_tcp(struct ndpi_detection_module_struct* ndpi_struct, struct ndpi_flow_struct* flow)$/;"	f
ndpi_check_starcraft_udp	src/lib/protocols/starcraft.c	/^u_int8_t ndpi_check_starcraft_udp(struct ndpi_detection_module_struct* ndpi_struct, struct ndpi_flow_struct* flow)$/;"	f
ndpi_check_steam_http	src/lib/protocols/steam.c	/^static void ndpi_check_steam_http(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f	file:
ndpi_check_steam_tcp	src/lib/protocols/steam.c	/^static void ndpi_check_steam_tcp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f	file:
ndpi_check_steam_udp1	src/lib/protocols/steam.c	/^static void ndpi_check_steam_udp1(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f	file:
ndpi_check_steam_udp2	src/lib/protocols/steam.c	/^static void ndpi_check_steam_udp2(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f	file:
ndpi_check_steam_udp3	src/lib/protocols/steam.c	/^static void ndpi_check_steam_udp3(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f	file:
ndpi_check_vhua	src/lib/protocols/vhua.c	/^static void ndpi_check_vhua(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f	file:
ndpi_check_zmq	src/lib/protocols/zeromq.c	/^static void ndpi_check_zmq(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f	file:
ndpi_coap_hdr	src/lib/protocols/coap.c	/^struct ndpi_coap_hdr$/;"	s	file:
ndpi_comp_with_mask	src/lib/third_party/src/ndpi_patricia.c	/^int ndpi_comp_with_mask (void *addr, void *dest, u_int mask) {$/;"	f
ndpi_connection_tracking	src/lib/ndpi_main.c	/^void ndpi_connection_tracking(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_debug_function_ptr	src/include/ndpi_typedefs.h	/^typedef void (*ndpi_debug_function_ptr) (u_int32_t protocol, void *module_struct,$/;"	t
ndpi_debug_get_last_log_function_line	src/lib/ndpi_main.c	/^void ndpi_debug_get_last_log_function_line(struct ndpi_detection_module_struct$/;"	f
ndpi_debug_print_file	src/include/ndpi_typedefs.h	/^  const char *ndpi_debug_print_file;$/;"	m	struct:ndpi_detection_module_struct
ndpi_debug_print_function	src/include/ndpi_typedefs.h	/^  const char *ndpi_debug_print_function;$/;"	m	struct:ndpi_detection_module_struct
ndpi_debug_print_line	src/include/ndpi_typedefs.h	/^  u_int32_t ndpi_debug_print_line;$/;"	m	struct:ndpi_detection_module_struct
ndpi_debug_printf	src/include/ndpi_typedefs.h	/^  ndpi_debug_function_ptr ndpi_debug_printf;    \/\/ 调试信息输出回调函数$/;"	m	struct:ndpi_detection_module_struct
ndpi_debug_printf	src/lib/ndpi_main.c	/^void ndpi_debug_printf(unsigned int proto, struct ndpi_detection_module_struct *ndpi_str, ndpi_log_level_t log_level, const char * format, ...)$/;"	f
ndpi_default_ports_tree_node	src/include/ndpi_typedefs.h	/^typedef struct ndpi_default_ports_tree_node {$/;"	s
ndpi_default_ports_tree_node_t	src/include/ndpi_typedefs.h	/^} ndpi_default_ports_tree_node_t;$/;"	t	typeref:struct:ndpi_default_ports_tree_node
ndpi_default_ports_tree_node_t_cmp	src/lib/ndpi_main.c	/^static int ndpi_default_ports_tree_node_t_cmp(const void *a, const void *b)$/;"	f	file:
ndpi_default_ports_tree_node_t_walker	src/lib/ndpi_main.c	/^void ndpi_default_ports_tree_node_t_walker(const void *node, const ndpi_VISIT which, const int depth)$/;"	f
ndpi_detection_get_l4	src/lib/ndpi_main.c	/^u_int8_t ndpi_detection_get_l4(const u_int8_t * l3, u_int16_t l3_len, const u_int8_t ** l4_return, u_int16_t * l4_len_return,$/;"	f
ndpi_detection_get_l4_internal	src/lib/ndpi_main.c	/^static u_int8_t ndpi_detection_get_l4_internal(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_detection_get_sizeof_ndpi_flow_struct	src/lib/ndpi_main.c	/^u_int32_t ndpi_detection_get_sizeof_ndpi_flow_struct(void) { return sizeof(struct ndpi_flow_struct); }$/;"	f
ndpi_detection_get_sizeof_ndpi_id_struct	src/lib/ndpi_main.c	/^u_int32_t ndpi_detection_get_sizeof_ndpi_id_struct(void) { return sizeof(struct ndpi_id_struct); }$/;"	f
ndpi_detection_giveup	src/lib/ndpi_main.c	/^ndpi_protocol ndpi_detection_giveup(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_detection_module_struct	src/include/ndpi_typedefs.h	/^struct ndpi_detection_module_struct {$/;"	s
ndpi_detection_process_packet	src/lib/ndpi_main.c	/^ndpi_protocol ndpi_detection_process_packet(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_dialog_menu	wireshark/ndpi.lua	/^local function ndpi_dialog_menu()$/;"	f
ndpi_dns_packet_header	src/include/ndpi_typedefs.h	/^struct ndpi_dns_packet_header {$/;"	s
ndpi_dofus_add_connection	src/lib/protocols/dofus.c	/^static void ndpi_dofus_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_drda_hdr	src/lib/protocols/drda.c	/^struct ndpi_drda_hdr {$/;"	s	file:
ndpi_dump_protocols	src/lib/ndpi_main.c	/^void ndpi_dump_protocols(struct ndpi_detection_module_struct *ndpi_mod) {$/;"	f
ndpi_edonkey_payload_check	src/lib/protocols/edonkey.c	/^static int ndpi_edonkey_payload_check(const u_int8_t *data, u_int32_t len) {$/;"	f	file:
ndpi_en_bigrams	src/lib/ndpi_content_match.c	/^static const char *ndpi_en_bigrams[] = {$/;"	v	file:
ndpi_en_impossible_bigrams	src/lib/ndpi_content_match.c	/^static const char *ndpi_en_impossible_bigrams[] = {$/;"	v	file:
ndpi_endorder	src/include/ndpi_typedefs.h	/^    ndpi_endorder,$/;"	e	enum:__anon16
ndpi_ethhdr	src/include/ndpi_typedefs.h	/^struct ndpi_ethhdr$/;"	s
ndpi_exit_detection_module	src/lib/ndpi_main.c	/^void ndpi_exit_detection_module(struct ndpi_detection_module_struct *ndpi_struct) {$/;"	f
ndpi_finalize_automa	src/lib/ndpi_main.c	/^void ndpi_finalize_automa(void *_automa) { ac_automata_finalize((AC_AUTOMATA_t*)_automa); }$/;"	f
ndpi_find_port_based_protocol	src/lib/ndpi_main.c	/^ndpi_protocol ndpi_find_port_based_protocol(struct ndpi_detection_module_struct *ndpi_struct \/* NOTUSED *\/,$/;"	f
ndpi_florensia_add_connection	src/lib/protocols/florensia.c	/^static void ndpi_florensia_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_flow	example/ndpi_util.h	/^  struct ndpi_flow_struct *ndpi_flow;   \/\/ 指向nDPI核心库中的数据流结构$/;"	m	struct:ndpi_flow_info	typeref:struct:ndpi_flow_info::ndpi_flow_struct
ndpi_flow_count	example/ndpi_util.h	/^  u_int32_t ndpi_flow_count;        \/\/ 记录了数据流的数量 $/;"	m	struct:ndpi_stats
ndpi_flow_free	src/lib/ndpi_main.c	/^void ndpi_flow_free(void *ptr) { if(_ndpi_flow_free) _ndpi_flow_free(ptr); else ndpi_free_flow((struct ndpi_flow_struct *) ptr); }$/;"	f
ndpi_flow_info	example/ndpi_util.h	/^typedef struct ndpi_flow_info {$/;"	s
ndpi_flow_info_freer	example/ndpi_util.c	/^void ndpi_flow_info_freer(void *node) {$/;"	f
ndpi_flow_info_t	example/ndpi_util.h	/^} ndpi_flow_info_t;$/;"	t	typeref:struct:ndpi_flow_info
ndpi_flow_malloc	src/lib/ndpi_main.c	/^void * ndpi_flow_malloc(size_t size) { return(_ndpi_flow_malloc ? _ndpi_flow_malloc(size) : ndpi_malloc(size)); }$/;"	f
ndpi_flow_struct	src/include/ndpi_typedefs.h	/^struct ndpi_flow_struct {$/;"	s
ndpi_flow_tcp_struct	src/include/ndpi_typedefs.h	/^struct ndpi_flow_tcp_struct {$/;"	s
ndpi_flow_udp_struct	src/include/ndpi_typedefs.h	/^struct ndpi_flow_udp_struct {$/;"	s
ndpi_flows_root	example/ndpi_util.h	/^  void **ndpi_flows_root;   \/\/ 一个prefs.num_roots长度的hash数组，每个成员是二叉树的根节点，所以整个组织形式为 hash + 二叉树结构，存放了所有的数据流$/;"	m	struct:ndpi_workflow
ndpi_free	src/lib/ndpi_main.c	/^void ndpi_free(void *ptr) { if(_ndpi_free) _ndpi_free(ptr); else free(ptr); }$/;"	f
ndpi_free_automa	src/lib/ndpi_main.c	/^void ndpi_free_automa(void *_automa)     { ac_automata_release((AC_AUTOMATA_t*)_automa);  }$/;"	f
ndpi_free_flow	src/lib/ndpi_main.c	/^void ndpi_free_flow(struct ndpi_flow_struct *flow) {$/;"	f
ndpi_free_flow_info_half	example/ndpi_util.c	/^void ndpi_free_flow_info_half(struct ndpi_flow_info *flow) {$/;"	f
ndpi_ftp_control_check_request	src/lib/protocols/ftp_control.c	/^static int ndpi_ftp_control_check_request(const u_int8_t *payload, size_t payload_len) {$/;"	f	file:
ndpi_ftp_control_check_response	src/lib/protocols/ftp_control.c	/^static int ndpi_ftp_control_check_response(const u_int8_t *payload, size_t payload_len) {$/;"	f	file:
ndpi_get_flow_masterprotocol	src/lib/ndpi_main.c	/^u_int16_t ndpi_get_flow_masterprotocol(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_get_guessed_protocol_id	src/lib/ndpi_main.c	/^static ndpi_default_ports_tree_node_t* ndpi_get_guessed_protocol_id(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_get_http_content_type	src/lib/protocols/http.c	/^char* ndpi_get_http_content_type(struct ndpi_detection_module_struct *ndpi_mod,$/;"	f
ndpi_get_http_method	src/lib/protocols/http.c	/^ndpi_http_method ndpi_get_http_method(struct ndpi_detection_module_struct *ndpi_mod,$/;"	f
ndpi_get_http_url	src/lib/protocols/http.c	/^char* ndpi_get_http_url(struct ndpi_detection_module_struct *ndpi_mod,$/;"	f
ndpi_get_ip_string	src/lib/ndpi_main.c	/^char *ndpi_get_ip_string(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_get_lower_proto	src/lib/ndpi_main.c	/^u_int16_t ndpi_get_lower_proto(ndpi_protocol proto) {$/;"	f
ndpi_get_num_supported_protocols	src/lib/ndpi_main.c	/^u_int ndpi_get_num_supported_protocols(struct ndpi_detection_module_struct *ndpi_mod) {$/;"	f
ndpi_get_packet_dst_ip_string	src/lib/ndpi_main.c	/^char *ndpi_get_packet_dst_ip_string(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_get_packet_src_ip_string	src/lib/ndpi_main.c	/^char *ndpi_get_packet_src_ip_string(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_get_proto_breed	src/lib/ndpi_main.c	/^ndpi_protocol_breed_t ndpi_get_proto_breed(struct ndpi_detection_module_struct *ndpi_mod,$/;"	f
ndpi_get_proto_breed_name	src/lib/ndpi_main.c	/^char* ndpi_get_proto_breed_name(struct ndpi_detection_module_struct *ndpi_mod,$/;"	f
ndpi_get_proto_by_id	src/lib/ndpi_main.c	/^char * ndpi_get_proto_by_id(struct ndpi_detection_module_struct *ndpi_mod, u_int id)$/;"	f
ndpi_get_proto_by_name	src/lib/ndpi_main.c	/^u_int16_t ndpi_get_proto_by_name(struct ndpi_detection_module_struct *ndpi_mod, const char *name)$/;"	f
ndpi_get_proto_category	src/lib/ndpi_main.c	/^ndpi_protocol_category_t ndpi_get_proto_category(struct ndpi_detection_module_struct *ndpi_mod,$/;"	f
ndpi_get_proto_name	src/lib/ndpi_main.c	/^char* ndpi_get_proto_name(struct ndpi_detection_module_struct *ndpi_mod, u_int16_t proto_id) {$/;"	f
ndpi_get_protocol_id	src/lib/ndpi_main.c	/^int ndpi_get_protocol_id(struct ndpi_detection_module_struct *ndpi_mod, char *proto) {$/;"	f
ndpi_get_protocol_id_master_proto	src/lib/ndpi_main.c	/^int ndpi_get_protocol_id_master_proto(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_guess_protocol_id	src/lib/ndpi_main.c	/^u_int16_t ndpi_guess_protocol_id(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_guess_undetected_protocol	src/lib/ndpi_main.c	/^ndpi_protocol ndpi_guess_undetected_protocol(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_handle_ipv6_extension_headers	src/lib/ndpi_main.c	/^static int ndpi_handle_ipv6_extension_headers(struct ndpi_detection_module_struct *ndpi_struct, const u_int8_t ** l4ptr, u_int16_t * l4len, u_int8_t * nxt_hdr)$/;"	f	file:
ndpi_handle_rule	src/lib/ndpi_main.c	/^int ndpi_handle_rule(struct ndpi_detection_module_struct *ndpi_mod, char* rule, u_int8_t do_add) {$/;"	f
ndpi_http_method	src/include/ndpi_typedefs.h	/^} ndpi_http_method;$/;"	t	typeref:enum:__anon20
ndpi_id	example/ndpiReader.c	/^  struct ndpi_id_struct *ndpi_id;  \/\/ nDpi worker structure$/;"	m	struct:ndpi_id	typeref:struct:ndpi_id::ndpi_id_struct	file:
ndpi_id	example/ndpiReader.c	/^typedef struct ndpi_id {$/;"	s	file:
ndpi_id_struct	src/include/ndpi_typedefs.h	/^struct ndpi_id_struct {$/;"	s
ndpi_id_t	example/ndpiReader.c	/^} ndpi_id_t;$/;"	t	typeref:struct:ndpi_id	file:
ndpi_in6_addr	src/include/ndpi_typedefs.h	/^struct ndpi_in6_addr$/;"	s
ndpi_init_automa	src/lib/ndpi_main.c	/^void* ndpi_init_automa(void) {$/;"	f
ndpi_init_detection_module	src/lib/ndpi_main.c	/^struct ndpi_detection_module_struct *ndpi_init_detection_module(void) {$/;"	f
ndpi_init_packet_header	src/lib/ndpi_main.c	/^static int ndpi_init_packet_header(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_init_placeholder_proto	src/lib/ndpi_main.c	/^static void ndpi_init_placeholder_proto(struct ndpi_detection_module_struct *ndpi_mod,$/;"	f	file:
ndpi_init_protocol_defaults	src/lib/ndpi_main.c	/^static void ndpi_init_protocol_defaults(struct ndpi_detection_module_struct *ndpi_mod) {$/;"	f	file:
ndpi_init_protocol_match	src/lib/ndpi_main.c	/^void ndpi_init_protocol_match(struct ndpi_detection_module_struct *ndpi_mod,$/;"	f
ndpi_init_ptree_ipv4	src/lib/ndpi_main.c	/^static void ndpi_init_ptree_ipv4(struct ndpi_detection_module_struct *ndpi_str,$/;"	f	file:
ndpi_int_activesync_add_connection	src/lib/protocols/http_activesync.c	/^static void ndpi_int_activesync_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_int_afp_add_connection	src/lib/protocols/afp.c	/^static void ndpi_int_afp_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_int_aimini_add_connection	src/lib/protocols/aimini.c	/^static void ndpi_int_aimini_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow\/* ,  *\/$/;"	f	file:
ndpi_int_amqp_add_connection	src/lib/protocols/amqp.c	/^static void ndpi_int_amqp_add_connection(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_int_applejuice_add_connection	src/lib/protocols/applejuice.c	/^static void ndpi_int_applejuice_add_connection(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_int_armagetron_add_connection	src/lib/protocols/armagetron.c	/^static void ndpi_int_armagetron_add_connection(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_int_battlefield_add_connection	src/lib/protocols/battlefield.c	/^static void ndpi_int_battlefield_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_int_bjnp_add_connection	src/lib/protocols/bjnp.c	/^static void ndpi_int_bjnp_add_connection(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_int_change_flow_protocol	src/lib/ndpi_main.c	/^void ndpi_int_change_flow_protocol(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_int_change_packet_protocol	src/lib/ndpi_main.c	/^void ndpi_int_change_packet_protocol(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_int_change_protocol	src/lib/ndpi_main.c	/^void ndpi_int_change_protocol(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_int_check_mdns_payload	src/lib/protocols/mdns.c	/^static int ndpi_int_check_mdns_payload(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_check_possible_ftp_command	src/lib/protocols/attic/ftp.c	/^u_int8_t ndpi_int_check_possible_ftp_command(const struct ndpi_packet_struct *packet)$/;"	f	file:
ndpi_int_check_possible_ftp_continuation_reply	src/lib/protocols/attic/ftp.c	/^u_int8_t ndpi_int_check_possible_ftp_continuation_reply(const struct ndpi_packet_struct *packet)$/;"	f	file:
ndpi_int_check_possible_ftp_reply	src/lib/protocols/attic/ftp.c	/^u_int8_t ndpi_int_check_possible_ftp_reply(const struct ndpi_packet_struct *packet)$/;"	f	file:
ndpi_int_check_stun	src/lib/protocols/stun.c	/^static ndpi_int_stun_t ndpi_int_check_stun(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_int_ciscovpn_add_connection	src/lib/protocols/ciscovpn.c	/^static void ndpi_int_ciscovpn_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_int_coap_add_connection	src/lib/protocols/coap.c	/^static void ndpi_int_coap_add_connection (struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_int_corba_add_connection	src/lib/protocols/corba.c	/^static void ndpi_int_corba_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_crossfire_add_connection	src/lib/protocols/crossfire.c	/^static void ndpi_int_crossfire_add_connection(struct ndpi_detection_module_struct *ndpi_struct, $/;"	f	file:
ndpi_int_dcerpc_add_connection	src/lib/protocols/dcerpc.c	/^static void ndpi_int_dcerpc_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_dhcp_add_connection	src/lib/protocols/dhcp.c	/^static void ndpi_int_dhcp_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_int_dhcpv6_add_connection	src/lib/protocols/dhcpv6.c	/^static void ndpi_int_dhcpv6_add_connection(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_int_direct_download_link_add_connection	src/lib/protocols/directdownloadlink.c	/^static void ndpi_int_direct_download_link_add_connection(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_int_directconnect_add_connection	src/lib/protocols/directconnect.c	/^static void ndpi_int_directconnect_add_connection(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_int_dropbox_add_connection	src/lib/protocols/dropbox.c	/^static void ndpi_int_dropbox_add_connection(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_int_eaq_add_connection	src/lib/protocols/eaq.c	/^static void ndpi_int_eaq_add_connection(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_int_edonkey_add_connection	src/lib/protocols/edonkey.c	/^static void ndpi_int_edonkey_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f	file:
ndpi_int_fasttrack_add_connection	src/lib/protocols/fasttrack.c	/^static void ndpi_int_fasttrack_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_int_fiesta_add_connection	src/lib/protocols/fiesta.c	/^static void ndpi_int_fiesta_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_int_filetopia_add_connection	src/lib/protocols/filetopia.c	/^static void ndpi_int_filetopia_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_int_find_xmsn	src/lib/protocols/msn.c	/^static u_int8_t ndpi_int_find_xmsn(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_int_flash_add_connection	src/lib/protocols/attic/flash.c	/^static void ndpi_int_flash_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_int_ftp_add_connection	src/lib/protocols/attic/ftp.c	/^static void ndpi_int_ftp_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_int_ftp_control_add_connection	src/lib/protocols/ftp_control.c	/^static void ndpi_int_ftp_control_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f	file:
ndpi_int_ftp_data_add_connection	src/lib/protocols/ftp_data.c	/^static void ndpi_int_ftp_data_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f	file:
ndpi_int_gnutella_add_connection	src/lib/protocols/gnutella.c	/^static void ndpi_int_gnutella_add_connection(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_int_guildwars_add_connection	src/lib/protocols/guildwars.c	/^static void ndpi_int_guildwars_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_int_halflife2_add_connection	src/lib/protocols/halflife2_and_mods.c	/^static void ndpi_int_halflife2_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_int_hep_add_connection	src/lib/protocols/hep.c	/^static void ndpi_int_hep_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_http_add_connection	src/lib/protocols/http.c	/^static void ndpi_int_http_add_connection(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_int_iax_add_connection	src/lib/protocols/iax.c	/^static void ndpi_int_iax_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_int_icecast_add_connection	src/lib/protocols/icecast.c	/^static void ndpi_int_icecast_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_int_ipp_add_connection	src/lib/protocols/ipp.c	/^static void ndpi_int_ipp_add_connection(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_int_irc_add_connection	src/lib/protocols/irc.c	/^static void ndpi_int_irc_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_int_is_sopcast_tcp	src/lib/protocols/sopcast.c	/^u_int8_t ndpi_int_is_sopcast_tcp(const u_int8_t * payload, const u_int16_t payload_len)$/;"	f	file:
ndpi_int_is_wow_port	src/lib/protocols/world_of_warcraft.c	/^u_int8_t ndpi_int_is_wow_port(const u_int16_t port)$/;"	f	file:
ndpi_int_jabber_add_connection	src/lib/protocols/jabber.c	/^static void ndpi_int_jabber_add_connection(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_int_kerberos_add_connection	src/lib/protocols/kerberos.c	/^static void ndpi_int_kerberos_add_connection(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_int_kontiki_add_connection	src/lib/protocols/kontiki.c	/^static void ndpi_int_kontiki_add_connection(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_int_kxun_add_connection	src/lib/protocols/kxun.c	/^static void ndpi_int_kxun_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_ldap_add_connection	src/lib/protocols/ldap.c	/^static void ndpi_int_ldap_add_connection(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_int_mail_imap_add_connection	src/lib/protocols/mail_imap.c	/^static void ndpi_int_mail_imap_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_int_mail_pop_add_connection	src/lib/protocols/mail_pop.c	/^static void ndpi_int_mail_pop_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_mail_pop_check_for_client_commands	src/lib/protocols/mail_pop.c	/^static int ndpi_int_mail_pop_check_for_client_commands(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_mail_smtp_add_connection	src/lib/protocols/mail_smtp.c	/^static void ndpi_int_mail_smtp_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_manolito_add_connection	src/lib/protocols/attic/manolito.c	/^static void ndpi_int_manolito_add_connection(struct$/;"	f	file:
ndpi_int_maplestory_add_connection	src/lib/protocols/maplestory.c	/^static void ndpi_int_maplestory_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_int_mdns_add_connection	src/lib/protocols/mdns.c	/^static void ndpi_int_mdns_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_mgcp_add_connection	src/lib/protocols/mgcp.c	/^static void ndpi_int_mgcp_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_mms_add_connection	src/lib/protocols/mms.c	/^static void ndpi_int_mms_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_mqtt_add_connection	src/lib/protocols/mqtt.c	/^static void ndpi_int_mqtt_add_connection (struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_int_msn_add_connection	src/lib/protocols/msn.c	/^static void ndpi_int_msn_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_int_mssql_tds_add_connection	src/lib/protocols/mssql_tds.c	/^static void ndpi_int_mssql_tds_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_mysql_add_connection	src/lib/protocols/mysql.c	/^static void ndpi_int_mysql_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_netbios_add_connection	src/lib/protocols/netbios.c	/^static void ndpi_int_netbios_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_nfs_add_connection	src/lib/protocols/nfs.c	/^static void ndpi_int_nfs_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_noe_add_connection	src/lib/protocols/noe.c	/^static void ndpi_int_noe_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_ntp_add_connection	src/lib/protocols/ntp.c	/^static void ndpi_int_ntp_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_one_line_struct	src/include/ndpi_typedefs.h	/^struct ndpi_int_one_line_struct {$/;"	s
ndpi_int_openft_add_connection	src/lib/protocols/openft.c	/^static void ndpi_int_openft_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_oracle_add_connection	src/lib/protocols/oracle.c	/^static void ndpi_int_oracle_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_oscar_add_connection	src/lib/protocols/oscar.c	/^static void ndpi_int_oscar_add_connection(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_int_pando_add_connection	src/lib/protocols/pando.c	/^static void ndpi_int_pando_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f	file:
ndpi_int_pcanywhere_add_connection	src/lib/protocols/pcanywhere.c	/^static void ndpi_int_pcanywhere_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_popo_add_connection	src/lib/protocols/attic/popo.c	/^static void ndpi_int_popo_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_postgres_add_connection	src/lib/protocols/postgres.c	/^static void ndpi_int_postgres_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_pplive_add_connection	src/lib/protocols/pplive.c	/^static void ndpi_int_pplive_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f	file:
ndpi_int_ppstream_add_connection	src/lib/protocols/ppstream.c	/^static void ndpi_int_ppstream_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_pptp_add_connection	src/lib/protocols/pptp.c	/^static void ndpi_int_pptp_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_qq_add_connection	src/lib/protocols/qq.c	/^static void ndpi_int_qq_add_connection(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_int_quake_add_connection	src/lib/protocols/quake.c	/^static void ndpi_int_quake_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_rdp_add_connection	src/lib/protocols/rdp.c	/^static void ndpi_int_rdp_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_redis_add_connection	src/lib/protocols/redis_net.c	/^static void ndpi_int_redis_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f	file:
ndpi_int_reset_packet_protocol	src/lib/ndpi_main.c	/^void ndpi_int_reset_packet_protocol(struct ndpi_packet_struct *packet) {$/;"	f
ndpi_int_reset_protocol	src/lib/ndpi_main.c	/^void ndpi_int_reset_protocol(struct ndpi_flow_struct *flow) {$/;"	f
ndpi_int_rsync_add_connection	src/lib/protocols/rsync.c	/^static void ndpi_int_rsync_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_rtcp_add_connection	src/lib/protocols/rtcp.c	/^static void ndpi_int_rtcp_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_rtmp_add_connection	src/lib/protocols/rtmp.c	/^static void ndpi_int_rtmp_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_int_rtsp_add_connection	src/lib/protocols/rtsp.c	/^static void ndpi_int_rtsp_add_connection(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_int_search_bittorrent_tcp	src/lib/protocols/bittorrent.c	/^static void ndpi_int_search_bittorrent_tcp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_int_search_bittorrent_tcp_zero	src/lib/protocols/bittorrent.c	/^static u_int8_t ndpi_int_search_bittorrent_tcp_zero(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_search_thunder_http	src/lib/protocols/thunder.c	/^void ndpi_int_search_thunder_http(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_search_thunder_tcp	src/lib/protocols/thunder.c	/^void ndpi_int_search_thunder_tcp(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_search_thunder_udp	src/lib/protocols/thunder.c	/^void ndpi_int_search_thunder_udp(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_secondlife_add_connection	src/lib/protocols/attic/secondlife.c	/^static void ndpi_int_secondlife_add_connection(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_int_shoutcast_add_connection	src/lib/protocols/shoutcast.c	/^static void ndpi_int_shoutcast_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_sip_add_connection	src/lib/protocols/sip.c	/^static void ndpi_int_sip_add_connection(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_int_skinny_add_connection	src/lib/protocols/skinny.c	/^static void ndpi_int_skinny_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_smpp_add_connection	src/lib/protocols/smpp.c	/^static void ndpi_int_smpp_add_connection(struct ndpi_detection_module_struct* ndpi_struct, $/;"	f	file:
ndpi_int_snmp_add_connection	src/lib/protocols/snmp.c	/^static void ndpi_int_snmp_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_socks_add_connection	src/lib/protocols/socks45.c	/^static void ndpi_int_socks_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_int_sopcast_add_connection	src/lib/protocols/sopcast.c	/^static void ndpi_int_sopcast_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_spotify_add_connection	src/lib/protocols/spotify.c	/^static void ndpi_int_spotify_add_connection(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_int_ssdp_add_connection	src/lib/protocols/ssdp.c	/^static void ndpi_int_ssdp_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_ssh_add_connection	src/lib/protocols/ssh.c	/^static void ndpi_int_ssh_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_ssl_add_connection	src/lib/protocols/ssl.c	/^static void ndpi_int_ssl_add_connection(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_int_stealthnet_add_connection	src/lib/protocols/stealthnet.c	/^static void ndpi_int_stealthnet_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_steam_add_connection	src/lib/protocols/steam.c	/^static void ndpi_int_steam_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f	file:
ndpi_int_stun_add_connection	src/lib/protocols/stun.c	/^static void ndpi_int_stun_add_connection(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_int_stun_t	src/lib/protocols/stun.c	/^} ndpi_int_stun_t;$/;"	t	typeref:enum:__anon14	file:
ndpi_int_syslog_add_connection	src/lib/protocols/syslog.c	/^static void ndpi_int_syslog_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_teamspeak_add_connection	src/lib/protocols/teamspeak.c	/^static void ndpi_int_teamspeak_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_teamview_add_connection	src/lib/protocols/teamviewer.c	/^static void ndpi_int_teamview_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_telegram_add_connection	src/lib/protocols/telegram.c	/^static void ndpi_int_telegram_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_telnet_add_connection	src/lib/protocols/telnet.c	/^static void ndpi_int_telnet_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_tftp_add_connection	src/lib/protocols/tftp.c	/^static void ndpi_int_tftp_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_thunder_add_connection	src/lib/protocols/thunder.c	/^static void ndpi_int_thunder_add_connection(struct ndpi_detection_module_struct *ndpi_struct, $/;"	f	file:
ndpi_int_tor_add_connection	src/lib/protocols/tor.c	/^static void ndpi_int_tor_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_tvants_add_connection	src/lib/protocols/tvants.c	/^static void ndpi_int_tvants_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_tvuplayer_add_connection	src/lib/protocols/tvuplayer.c	/^static void ndpi_int_tvuplayer_add_connection(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_int_ubntac2_add_connection	src/lib/protocols/ubntac2.c	/^static void ndpi_int_ubntac2_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_int_usenet_add_connection	src/lib/protocols/usenet.c	/^static void ndpi_int_usenet_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_vhua_add_connection	src/lib/protocols/vhua.c	/^static void ndpi_int_vhua_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f	file:
ndpi_int_warcraft3_add_connection	src/lib/protocols/warcraft3.c	/^static void ndpi_int_warcraft3_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_world_of_kung_fu_add_connection	src/lib/protocols/world_of_kung_fu.c	/^static void ndpi_int_world_of_kung_fu_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_int_worldofwarcraft_add_connection	src/lib/protocols/world_of_warcraft.c	/^static void ndpi_int_worldofwarcraft_add_connection(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_int_xbox_add_connection	src/lib/protocols/xbox.c	/^static void ndpi_int_xbox_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_xdmcp_add_connection	src/lib/protocols/xdmcp.c	/^static void ndpi_int_xdmcp_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_int_zattoo_user_agent_set	src/lib/protocols/zattoo.c	/^u_int8_t ndpi_int_zattoo_user_agent_set(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_int_zmq_add_connection	src/lib/protocols/zeromq.c	/^static void ndpi_int_zmq_add_connection(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f	file:
ndpi_ip6_hdrctl	src/include/ndpi_typedefs.h	/^    struct ndpi_ip6_hdrctl$/;"	s	union:ndpi_ipv6hdr::__anon18
ndpi_ip_addr_t	src/include/ndpi_typedefs.h	/^} ndpi_ip_addr_t;$/;"	t	typeref:union:__anon19
ndpi_iph_is_valid_and_not_fragmented	src/lib/ndpi_main.c	/^static u_int8_t ndpi_iph_is_valid_and_not_fragmented(const struct ndpi_iphdr *iph, const u_int16_t ipsize)$/;"	f	file:
ndpi_iphdr	src/include/ndpi_typedefs.h	/^struct ndpi_iphdr {$/;"	s
ndpi_ips_match	src/lib/ndpi_main.c	/^u_int8_t ndpi_ips_match(u_int32_t src, u_int32_t dst,$/;"	f
ndpi_ipv6hdr	src/include/ndpi_typedefs.h	/^struct ndpi_ipv6hdr$/;"	s
ndpi_is_duplicate	src/lib/protocols/irc.c	/^u_int8_t ndpi_is_duplicate(struct ndpi_id_struct *id_t, u_int16_t port)$/;"	f	file:
ndpi_is_proto	src/lib/ndpi_main.c	/^u_int8_t ndpi_is_proto(ndpi_protocol proto, u_int16_t p) {$/;"	f
ndpi_is_ssl_tor	src/lib/protocols/tor.c	/^int ndpi_is_ssl_tor(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_is_tor_flow	src/lib/ndpi_main.c	/^u_int8_t ndpi_is_tor_flow(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_is_valid_qq_ft_packet	src/lib/protocols/qq.c	/^u_int8_t ndpi_is_valid_qq_ft_packet(const struct ndpi_packet_struct *packet)$/;"	f	file:
ndpi_is_valid_qq_packet	src/lib/protocols/qq.c	/^u_int8_t ndpi_is_valid_qq_packet(const struct ndpi_packet_struct *packet)$/;"	f	file:
ndpi_isalpha	src/lib/protocols/ssl.c	91;"	d	file:
ndpi_isdigit	src/lib/protocols/ssl.c	92;"	d	file:
ndpi_isprint	src/lib/protocols/ssl.c	94;"	d	file:
ndpi_ispunct	src/lib/protocols/ssl.c	95;"	d	file:
ndpi_isspace	src/lib/protocols/ssl.c	93;"	d	file:
ndpi_leaf	src/include/ndpi_typedefs.h	/^    ndpi_leaf       \/\/ 二叉树叶节点$/;"	e	enum:__anon16
ndpi_llc_header_snap	src/include/ndpi_typedefs.h	/^struct ndpi_llc_header_snap$/;"	s
ndpi_load_protocols_file	src/lib/ndpi_main.c	/^int ndpi_load_protocols_file(struct ndpi_detection_module_struct *ndpi_mod, char* path) {$/;"	f
ndpi_log_level_t	src/include/ndpi_typedefs.h	/^  } ndpi_log_level_t;$/;"	t	typeref:enum:__anon15
ndpi_malloc	src/lib/ndpi_main.c	/^void * ndpi_malloc(size_t size) { return(_ndpi_malloc ? _ndpi_malloc(size) : malloc(size)); }$/;"	f
ndpi_match_bigram	src/lib/ndpi_main.c	/^int ndpi_match_bigram(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_match_content_subprotocol	src/lib/ndpi_main.c	/^int ndpi_match_content_subprotocol(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_match_file_header	src/lib/protocols/ftp_data.c	/^static int ndpi_match_file_header(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f	file:
ndpi_match_ftp_data_directory	src/lib/protocols/ftp_data.c	/^static int ndpi_match_ftp_data_directory(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f	file:
ndpi_match_ftp_data_port	src/lib/protocols/ftp_data.c	/^static int ndpi_match_ftp_data_port(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f	file:
ndpi_match_host_subprotocol	src/lib/ndpi_main.c	/^int ndpi_match_host_subprotocol(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_match_prefix	src/lib/ndpi_main.c	/^int ndpi_match_prefix(const u_int8_t *payload, size_t payload_len,$/;"	f
ndpi_match_string	src/lib/ndpi_main.c	/^int ndpi_match_string(void *_automa, char *string_to_match) {$/;"	f
ndpi_match_string_id	src/lib/ndpi_main.c	/^int ndpi_match_string_id(void *_automa, char *string_to_match, unsigned long *id) {$/;"	f
ndpi_match_string_subprotocol	src/lib/ndpi_main.c	/^int ndpi_match_string_subprotocol(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_match_strprefix	src/include/ndpi_main.h	126;"	d
ndpi_max	src/include/ndpi_define.h	247;"	d
ndpi_min	src/include/ndpi_define.h	246;"	d
ndpi_mpls_header	src/include/ndpi_typedefs.h	/^struct ndpi_mpls_header$/;"	s
ndpi_my_inet_pton	src/lib/third_party/src/ndpi_patricia.c	/^ndpi_my_inet_pton (int af, const char *src, void *dst)$/;"	f
ndpi_ndpi_mask	src/include/ndpi_typedefs.h	/^typedef u_int32_t ndpi_ndpi_mask;$/;"	t
ndpi_net_match	src/lib/ndpi_main.c	/^u_int8_t ndpi_net_match(u_int32_t ip_to_check,$/;"	f
ndpi_netbios_name_interpret	src/lib/protocols/netbios.c	/^int ndpi_netbios_name_interpret(char *in, char *out, u_int out_len) {$/;"	f
ndpi_network	src/include/ndpi_typedefs.h	/^} ndpi_network;$/;"	t	typeref:struct:__anon34
ndpi_network_ptree_match	src/lib/ndpi_main.c	/^u_int16_t ndpi_network_ptree_match(struct ndpi_detection_module_struct *ndpi_struct, struct in_addr *pin \/* network byte order *\/) {$/;"	f
ndpi_node	src/include/ndpi_typedefs.h	/^} ndpi_node;$/;"	t	typeref:struct:node_t
ndpi_num_custom_protocols	src/include/ndpi_typedefs.h	/^  u_int ndpi_num_custom_protocols;$/;"	m	struct:ndpi_detection_module_struct
ndpi_num_supported_protocols	src/include/ndpi_typedefs.h	/^  u_int ndpi_num_supported_protocols;   \/\/ 支持的协议数量$/;"	m	struct:ndpi_detection_module_struct
ndpi_packet_dst_ip_eql	src/lib/ndpi_main.c	/^int ndpi_packet_dst_ip_eql(const struct ndpi_packet_struct *packet, const ndpi_ip_addr_t * ip)$/;"	f
ndpi_packet_dst_ip_get	src/lib/ndpi_main.c	/^void ndpi_packet_dst_ip_get(const struct ndpi_packet_struct *packet, ndpi_ip_addr_t * ip)$/;"	f
ndpi_packet_src_ip_eql	src/lib/ndpi_main.c	/^int ndpi_packet_src_ip_eql(const struct ndpi_packet_struct *packet, const ndpi_ip_addr_t * ip)$/;"	f
ndpi_packet_src_ip_get	src/lib/ndpi_main.c	/^void ndpi_packet_src_ip_get(const struct ndpi_packet_struct *packet, ndpi_ip_addr_t * ip)$/;"	f
ndpi_packet_struct	src/include/ndpi_typedefs.h	/^struct ndpi_packet_struct {$/;"	s
ndpi_packet_trailer	example/ndpiReader.c	/^struct ndpi_packet_trailer {$/;"	s	file:
ndpi_parse_packet_line_info	src/lib/ndpi_main.c	/^void ndpi_parse_packet_line_info(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_parse_packet_line_info_any	src/lib/ndpi_main.c	/^void ndpi_parse_packet_line_info_any(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_patricia_lookup	src/lib/third_party/src/ndpi_patricia.c	/^ndpi_patricia_lookup (patricia_tree_t *patricia, prefix_t *prefix)$/;"	f
ndpi_patricia_process	src/lib/third_party/src/ndpi_patricia.c	/^ndpi_patricia_process (patricia_tree_t *patricia, void_fn2_t func)$/;"	f
ndpi_patricia_remove	src/lib/third_party/src/ndpi_patricia.c	/^ndpi_patricia_remove (patricia_tree_t *patricia, patricia_node_t *node)$/;"	f
ndpi_patricia_search_best	src/lib/third_party/src/ndpi_patricia.c	/^ndpi_patricia_search_best (patricia_tree_t *patricia, prefix_t *prefix)$/;"	f
ndpi_patricia_search_best2	src/lib/third_party/src/ndpi_patricia.c	/^ndpi_patricia_search_best2 (patricia_tree_t *patricia, prefix_t *prefix, int inclusive)$/;"	f
ndpi_patricia_search_exact	src/lib/third_party/src/ndpi_patricia.c	/^ndpi_patricia_search_exact (patricia_tree_t *patricia, prefix_t *prefix)$/;"	f
ndpi_patricia_walk_inorder	src/lib/third_party/src/ndpi_patricia.c	/^ndpi_patricia_walk_inorder(patricia_node_t *node, void_fn2_t func)$/;"	f
ndpi_port_range	src/include/ndpi_typedefs.h	/^} ndpi_port_range;$/;"	t	typeref:struct:__anon21
ndpi_postorder	src/include/ndpi_typedefs.h	/^    ndpi_postorder,$/;"	e	enum:__anon16
ndpi_prefix_toa	src/lib/third_party/src/ndpi_patricia.c	/^ndpi_prefix_toa (prefix_t * prefix)$/;"	f
ndpi_prefix_toa2	src/lib/third_party/src/ndpi_patricia.c	/^ndpi_prefix_toa2 (prefix_t *prefix, char *buff)$/;"	f
ndpi_prefix_toa2x	src/lib/third_party/src/ndpi_patricia.c	/^ndpi_prefix_toa2x (prefix_t *prefix, char *buff, int with_len)$/;"	f
ndpi_prefix_tochar	src/lib/third_party/src/ndpi_patricia.c	/^ndpi_prefix_tochar (prefix_t * prefix)$/;"	f
ndpi_preorder	src/include/ndpi_typedefs.h	/^    ndpi_preorder,$/;"	e	enum:__anon16
ndpi_proto	src/include/ndpi_typedefs.h	/^typedef struct ndpi_proto {$/;"	s
ndpi_proto.dissector	wireshark/ndpi.lua	/^function ndpi_proto.dissector(tvb, pinfo, tree)$/;"	f
ndpi_proto.init	wireshark/ndpi.lua	/^function ndpi_proto.init()$/;"	f
ndpi_proto_defaults	src/include/ndpi_typedefs.h	/^typedef struct ndpi_proto_defaults {$/;"	s
ndpi_proto_defaults_t	src/include/ndpi_typedefs.h	/^} ndpi_proto_defaults_t;$/;"	t	typeref:struct:ndpi_proto_defaults
ndpi_proto_sorter	example/ndpiReader.c	/^struct ndpi_proto_sorter {$/;"	s	file:
ndpi_protocol	src/include/ndpi_typedefs.h	/^} ndpi_protocol;$/;"	t	typeref:struct:ndpi_proto
ndpi_protocol	src/lib/protocols/jabber.c	/^  u_int ndpi_protocol;$/;"	m	struct:jabber_string	file:
ndpi_protocol2name	src/lib/ndpi_main.c	/^char* ndpi_protocol2name(struct ndpi_detection_module_struct *ndpi_mod,$/;"	f
ndpi_protocol_bitmask_struct	src/include/ndpi_typedefs.h	/^typedef struct ndpi_protocol_bitmask_struct$/;"	s
ndpi_protocol_bitmask_struct_t	src/include/ndpi_typedefs.h	/^} ndpi_protocol_bitmask_struct_t;$/;"	t	typeref:struct:ndpi_protocol_bitmask_struct
ndpi_protocol_breed_t	src/include/ndpi_typedefs.h	/^} ndpi_protocol_breed_t;$/;"	t	typeref:enum:__anon22
ndpi_protocol_category_t	src/include/ndpi_typedefs.h	/^} ndpi_protocol_category_t;$/;"	t	typeref:enum:__anon23
ndpi_protocol_match	src/include/ndpi_typedefs.h	/^} ndpi_protocol_match;$/;"	t	typeref:struct:__anon33
ndpi_radiotap_header	src/include/ndpi_typedefs.h	/^struct ndpi_radiotap_header$/;"	s
ndpi_realloc	src/lib/ndpi_main.c	/^void * ndpi_realloc(void *ptr, size_t old_size, size_t new_size)$/;"	f
ndpi_remove_host_url_subprotocol	src/lib/ndpi_main.c	/^static int ndpi_remove_host_url_subprotocol(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_revision	src/lib/ndpi_main.c	/^char* ndpi_revision() { return(NDPI_GIT_RELEASE); }$/;"	f
ndpi_rtp_search	src/lib/protocols/rtp.c	/^static void ndpi_rtp_search(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_rx_header	src/lib/protocols/rx.c	/^struct ndpi_rx_header {$/;"	s	file:
ndpi_search_activesync	src/lib/protocols/http_activesync.c	/^void ndpi_search_activesync(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_afp	src/lib/protocols/afp.c	/^void ndpi_search_afp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_aimini	src/lib/protocols/aimini.c	/^void ndpi_search_aimini(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_amqp	src/lib/protocols/amqp.c	/^void ndpi_search_amqp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f
ndpi_search_applejuice_tcp	src/lib/protocols/applejuice.c	/^void ndpi_search_applejuice_tcp(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_search_armagetron_udp	src/lib/protocols/armagetron.c	/^void ndpi_search_armagetron_udp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_ayiya	src/lib/protocols/ayiya.c	/^void ndpi_search_ayiya(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_battlefield	src/lib/protocols/battlefield.c	/^void ndpi_search_battlefield(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_bgp	src/lib/protocols/bgp.c	/^void ndpi_search_bgp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_bittorrent	src/lib/protocols/bittorrent.c	/^void ndpi_search_bittorrent(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_bjnp	src/lib/protocols/bjnp.c	/^void ndpi_search_bjnp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_ciscovpn	src/lib/protocols/ciscovpn.c	/^void ndpi_search_ciscovpn(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_citrix	src/lib/protocols/citrix.c	/^void ndpi_search_citrix(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_coap	src/lib/protocols/coap.c	/^void ndpi_search_coap (struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_search_collectd	src/lib/protocols/collectd.c	/^void ndpi_search_collectd(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_corba	src/lib/protocols/corba.c	/^void ndpi_search_corba(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_crossfire_tcp_udp	src/lib/protocols/crossfire.c	/^void ndpi_search_crossfire_tcp_udp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_dcerpc	src/lib/protocols/dcerpc.c	/^void ndpi_search_dcerpc(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_dhcp_udp	src/lib/protocols/dhcp.c	/^void ndpi_search_dhcp_udp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_dhcpv6_udp	src/lib/protocols/dhcpv6.c	/^void ndpi_search_dhcpv6_udp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_direct_download_link_tcp	src/lib/protocols/directdownloadlink.c	/^void ndpi_search_direct_download_link_tcp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_directconnect	src/lib/protocols/directconnect.c	/^void ndpi_search_directconnect(struct ndpi_detection_module_struct$/;"	f
ndpi_search_directconnect_tcp	src/lib/protocols/directconnect.c	/^static void ndpi_search_directconnect_tcp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_search_directconnect_udp	src/lib/protocols/directconnect.c	/^static void ndpi_search_directconnect_udp(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_search_dns	src/lib/protocols/dns.c	/^void ndpi_search_dns(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f
ndpi_search_dofus	src/lib/protocols/dofus.c	/^void ndpi_search_dofus(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_drda	src/lib/protocols/drda.c	/^void ndpi_search_drda(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_search_dropbox	src/lib/protocols/dropbox.c	/^void ndpi_search_dropbox(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_eaq	src/lib/protocols/eaq.c	/^void ndpi_search_eaq(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f
ndpi_search_edonkey	src/lib/protocols/edonkey.c	/^void ndpi_search_edonkey(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f
ndpi_search_fasttrack_tcp	src/lib/protocols/fasttrack.c	/^void ndpi_search_fasttrack_tcp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_fiesta	src/lib/protocols/fiesta.c	/^void ndpi_search_fiesta(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_filetopia_tcp	src/lib/protocols/filetopia.c	/^void ndpi_search_filetopia_tcp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_flash	src/lib/protocols/attic/flash.c	/^void ndpi_search_flash(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_florensia	src/lib/protocols/florensia.c	/^void ndpi_search_florensia(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_ftp_control	src/lib/protocols/ftp_control.c	/^void ndpi_search_ftp_control(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f
ndpi_search_ftp_data	src/lib/protocols/ftp_data.c	/^void ndpi_search_ftp_data(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f
ndpi_search_ftp_tcp	src/lib/protocols/attic/ftp.c	/^void ndpi_search_ftp_tcp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_git	src/lib/protocols/git.c	/^void ndpi_search_git(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_search_gnutella	src/lib/protocols/gnutella.c	/^void ndpi_search_gnutella(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_gtp	src/lib/protocols/gtp.c	/^void ndpi_search_gtp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_guildwars_tcp	src/lib/protocols/guildwars.c	/^void ndpi_search_guildwars_tcp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_h323	src/lib/protocols/h323.c	/^void ndpi_search_h323(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_halflife2	src/lib/protocols/halflife2_and_mods.c	/^void ndpi_search_halflife2(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_hangout	src/lib/protocols/hangout.c	/^void ndpi_search_hangout(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_search_hep	src/lib/protocols/hep.c	/^void ndpi_search_hep(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_http_tcp	src/lib/protocols/http.c	/^void ndpi_search_http_tcp(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_search_iax	src/lib/protocols/iax.c	/^void ndpi_search_iax(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_icecast_tcp	src/lib/protocols/icecast.c	/^void ndpi_search_icecast_tcp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_in_non_tcp_udp	src/lib/protocols/non_tcp_udp.c	/^void ndpi_search_in_non_tcp_udp(struct ndpi_detection_module_struct$/;"	f
ndpi_search_ipp	src/lib/protocols/ipp.c	/^void ndpi_search_ipp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_irc_ssl_detect_ninety_percent_but_very_fast	src/lib/protocols/irc.c	/^u_int8_t ndpi_search_irc_ssl_detect_ninety_percent_but_very_fast(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_irc_tcp	src/lib/protocols/irc.c	/^void ndpi_search_irc_tcp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_jabber_tcp	src/lib/protocols/jabber.c	/^void ndpi_search_jabber_tcp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_kakaotalk_voice	src/lib/protocols/kakaotalk_voice.c	/^void ndpi_search_kakaotalk_voice(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f
ndpi_search_kerberos	src/lib/protocols/kerberos.c	/^void ndpi_search_kerberos(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_kontiki	src/lib/protocols/kontiki.c	/^void ndpi_search_kontiki(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_kxun	src/lib/protocols/kxun.c	/^void ndpi_search_kxun(struct ndpi_detection_module_struct$/;"	f
ndpi_search_ldap	src/lib/protocols/ldap.c	/^void ndpi_search_ldap(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_lotus_notes	src/lib/protocols/lotus_notes.c	/^void ndpi_search_lotus_notes(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_mail_imap_tcp	src/lib/protocols/mail_imap.c	/^void ndpi_search_mail_imap_tcp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_mail_pop_tcp	src/lib/protocols/mail_pop.c	/^void ndpi_search_mail_pop_tcp(struct ndpi_detection_module_struct$/;"	f
ndpi_search_mail_smtp_tcp	src/lib/protocols/mail_smtp.c	/^void ndpi_search_mail_smtp_tcp(struct ndpi_detection_module_struct$/;"	f
ndpi_search_manolito_tcp_udp	src/lib/protocols/attic/manolito.c	/^void ndpi_search_manolito_tcp_udp(struct$/;"	f
ndpi_search_maplestory	src/lib/protocols/maplestory.c	/^void ndpi_search_maplestory(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_mdns	src/lib/protocols/mdns.c	/^void ndpi_search_mdns(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_megaco	src/lib/protocols/megaco.c	/^void ndpi_search_megaco(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_mgcp	src/lib/protocols/mgcp.c	/^void ndpi_search_mgcp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_mms_tcp	src/lib/protocols/mms.c	/^void ndpi_search_mms_tcp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_mpegts	src/lib/protocols/mpegts.c	/^void ndpi_search_mpegts(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_mqtt	src/lib/protocols/mqtt.c	/^void ndpi_search_mqtt (struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_search_msn	src/lib/protocols/msn.c	/^void ndpi_search_msn(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_msn_tcp	src/lib/protocols/msn.c	/^static void ndpi_search_msn_tcp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_search_msn_udp_misc	src/lib/protocols/msn.c	/^static void ndpi_search_msn_udp_misc(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_search_mssql_tds	src/lib/protocols/mssql_tds.c	/^void ndpi_search_mssql_tds(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_mysql_tcp	src/lib/protocols/mysql.c	/^void ndpi_search_mysql_tcp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_netbios	src/lib/protocols/netbios.c	/^void ndpi_search_netbios(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_netflow	src/lib/protocols/netflow.c	/^void ndpi_search_netflow(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_nfs	src/lib/protocols/nfs.c	/^void ndpi_search_nfs(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_noe	src/lib/protocols/noe.c	/^void ndpi_search_noe(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_ntp_udp	src/lib/protocols/ntp.c	/^void ndpi_search_ntp_udp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_openft_tcp	src/lib/protocols/openft.c	/^void ndpi_search_openft_tcp(struct ndpi_detection_module_struct$/;"	f
ndpi_search_openvpn	src/lib/protocols/openvpn.c	/^void ndpi_search_openvpn(struct ndpi_detection_module_struct* ndpi_struct,$/;"	f
ndpi_search_oracle	src/lib/protocols/oracle.c	/^void ndpi_search_oracle(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_oscar	src/lib/protocols/oscar.c	/^void ndpi_search_oscar(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_oscar_tcp_connect	src/lib/protocols/oscar.c	/^static void ndpi_search_oscar_tcp_connect(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_search_pando	src/lib/protocols/pando.c	/^void ndpi_search_pando(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f
ndpi_search_pcanywhere	src/lib/protocols/pcanywhere.c	/^void ndpi_search_pcanywhere(struct ndpi_detection_module_struct$/;"	f
ndpi_search_popo_tcp_udp	src/lib/protocols/attic/popo.c	/^void ndpi_search_popo_tcp_udp(struct ndpi_detection_module_struct$/;"	f
ndpi_search_postgres_tcp	src/lib/protocols/postgres.c	/^void ndpi_search_postgres_tcp(struct ndpi_detection_module_struct$/;"	f
ndpi_search_pplive	src/lib/protocols/pplive.c	/^void ndpi_search_pplive(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f
ndpi_search_ppstream	src/lib/protocols/ppstream.c	/^void ndpi_search_ppstream(struct ndpi_detection_module_struct$/;"	f
ndpi_search_pptp	src/lib/protocols/pptp.c	/^void ndpi_search_pptp(struct ndpi_detection_module_struct$/;"	f
ndpi_search_qq	src/lib/protocols/qq.c	/^void ndpi_search_qq(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_qq_tcp	src/lib/protocols/qq.c	/^void ndpi_search_qq_tcp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_search_qq_udp	src/lib/protocols/qq.c	/^static void ndpi_search_qq_udp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_search_quake	src/lib/protocols/quake.c	/^void ndpi_search_quake(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_quic	src/lib/protocols/quic.c	/^void ndpi_search_quic(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_search_radius	src/lib/protocols/radius.c	/^void ndpi_search_radius(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_rdp	src/lib/protocols/rdp.c	/^void ndpi_search_rdp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_redis	src/lib/protocols/redis_net.c	/^void ndpi_search_redis(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f
ndpi_search_rsync	src/lib/protocols/rsync.c	/^void ndpi_search_rsync(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_rtcp	src/lib/protocols/rtcp.c	/^void ndpi_search_rtcp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_rtmp	src/lib/protocols/rtmp.c	/^void ndpi_search_rtmp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_rtp	src/lib/protocols/rtp.c	/^void ndpi_search_rtp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_rtsp_tcp_udp	src/lib/protocols/rtsp.c	/^void ndpi_search_rtsp_tcp_udp(struct ndpi_detection_module_struct$/;"	f
ndpi_search_rx	src/lib/protocols/rx.c	/^void ndpi_search_rx(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_search_secondlife	src/lib/protocols/attic/secondlife.c	/^void ndpi_search_secondlife(struct ndpi_detection_module_struct$/;"	f
ndpi_search_setup_iax	src/lib/protocols/iax.c	/^static void ndpi_search_setup_iax(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_search_sflow	src/lib/protocols/sflow.c	/^void ndpi_search_sflow(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_shoutcast_tcp	src/lib/protocols/shoutcast.c	/^void ndpi_search_shoutcast_tcp(struct ndpi_detection_module_struct$/;"	f
ndpi_search_sip	src/lib/protocols/sip.c	/^void ndpi_search_sip(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_sip_handshake	src/lib/protocols/sip.c	/^void ndpi_search_sip_handshake(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_search_skinny	src/lib/protocols/skinny.c	/^void ndpi_search_skinny(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_skype	src/lib/protocols/skype.c	/^void ndpi_search_skype(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_smb_tcp	src/lib/protocols/smb.c	/^void ndpi_search_smb_tcp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_smpp_tcp	src/lib/protocols/smpp.c	/^void ndpi_search_smpp_tcp(struct ndpi_detection_module_struct* ndpi_struct, $/;"	f
ndpi_search_snmp	src/lib/protocols/snmp.c	/^void ndpi_search_snmp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_socks	src/lib/protocols/socks45.c	/^void ndpi_search_socks(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_socrates	src/lib/protocols/socrates.c	/^void ndpi_search_socrates(struct ndpi_detection_module_struct$/;"	f
ndpi_search_sopcast	src/lib/protocols/sopcast.c	/^void ndpi_search_sopcast(struct ndpi_detection_module_struct$/;"	f
ndpi_search_sopcast_tcp	src/lib/protocols/sopcast.c	/^static void ndpi_search_sopcast_tcp(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_search_sopcast_udp	src/lib/protocols/sopcast.c	/^static void ndpi_search_sopcast_udp(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_search_soulseek_tcp	src/lib/protocols/soulseek.c	/^void ndpi_search_soulseek_tcp(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_search_spotify	src/lib/protocols/spotify.c	/^void ndpi_search_spotify(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_ssdp	src/lib/protocols/ssdp.c	/^void ndpi_search_ssdp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_ssh_tcp	src/lib/protocols/ssh.c	/^void ndpi_search_ssh_tcp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_ssl_tcp	src/lib/protocols/ssl.c	/^void ndpi_search_ssl_tcp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_sslv3_direction1	src/lib/protocols/ssl.c	/^static u_int8_t ndpi_search_sslv3_direction1(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_search_starcraft	src/lib/protocols/starcraft.c	/^void ndpi_search_starcraft(struct ndpi_detection_module_struct* ndpi_struct, struct ndpi_flow_struct* flow)$/;"	f
ndpi_search_stealthnet	src/lib/protocols/stealthnet.c	/^void ndpi_search_stealthnet(struct ndpi_detection_module_struct$/;"	f
ndpi_search_steam	src/lib/protocols/steam.c	/^void ndpi_search_steam(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f
ndpi_search_stun	src/lib/protocols/stun.c	/^void ndpi_search_stun(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_syslog	src/lib/protocols/syslog.c	/^void ndpi_search_syslog(struct ndpi_detection_module_struct$/;"	f
ndpi_search_tcp_or_udp	src/lib/protocols/tcp_udp.c	/^void ndpi_search_tcp_or_udp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_tcp_or_udp_raw	src/lib/protocols/tcp_udp.c	/^u_int ndpi_search_tcp_or_udp_raw(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_search_teamspeak	src/lib/protocols/teamspeak.c	/^void ndpi_search_teamspeak(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_teamview	src/lib/protocols/teamviewer.c	/^void ndpi_search_teamview(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_telegram	src/lib/protocols/telegram.c	/^void ndpi_search_telegram(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_telnet_tcp	src/lib/protocols/telnet.c	/^void ndpi_search_telnet_tcp(struct ndpi_detection_module_struct$/;"	f
ndpi_search_teredo	src/lib/protocols/teredo.c	/^void ndpi_search_teredo(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_tftp	src/lib/protocols/tftp.c	/^void ndpi_search_tftp(struct ndpi_detection_module_struct$/;"	f
ndpi_search_thunder	src/lib/protocols/thunder.c	/^void ndpi_search_thunder(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_tor	src/lib/protocols/tor.c	/^void ndpi_search_tor(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_tvants_udp	src/lib/protocols/tvants.c	/^void ndpi_search_tvants_udp(struct ndpi_detection_module_struct$/;"	f
ndpi_search_tvuplayer	src/lib/protocols/tvuplayer.c	/^void ndpi_search_tvuplayer(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_ubntac2	src/lib/protocols/ubntac2.c	/^void ndpi_search_ubntac2(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_usenet_tcp	src/lib/protocols/usenet.c	/^void ndpi_search_usenet_tcp(struct ndpi_detection_module_struct$/;"	f
ndpi_search_vhua	src/lib/protocols/vhua.c	/^void ndpi_search_vhua(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f
ndpi_search_viber	src/lib/protocols/viber.c	/^void ndpi_search_viber(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_vmware	src/lib/protocols/vmware.c	/^void ndpi_search_vmware(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_vnc_tcp	src/lib/protocols/vnc.c	/^void ndpi_search_vnc_tcp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_warcraft3	src/lib/protocols/warcraft3.c	/^void ndpi_search_warcraft3(struct ndpi_detection_module_struct$/;"	f
ndpi_search_whois_das	src/lib/protocols/whoisdas.c	/^void ndpi_search_whois_das(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_world_of_kung_fu	src/lib/protocols/world_of_kung_fu.c	/^void ndpi_search_world_of_kung_fu(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_worldofwarcraft	src/lib/protocols/world_of_warcraft.c	/^void ndpi_search_worldofwarcraft(struct ndpi_detection_module_struct$/;"	f
ndpi_search_xbox	src/lib/protocols/xbox.c	/^void ndpi_search_xbox(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_xdmcp	src/lib/protocols/xdmcp.c	/^void ndpi_search_xdmcp(struct ndpi_detection_module_struct$/;"	f
ndpi_search_yahoo	src/lib/protocols/yahoo.c	/^void ndpi_search_yahoo(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_yahoo_tcp	src/lib/protocols/yahoo.c	/^static void ndpi_search_yahoo_tcp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
ndpi_search_zattoo	src/lib/protocols/zattoo.c	/^void ndpi_search_zattoo(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
ndpi_search_zmq	src/lib/protocols/zeromq.c	/^void ndpi_search_zmq(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f
ndpi_selection_bitmask	src/include/ndpi_typedefs.h	/^  NDPI_SELECTION_BITMASK_PROTOCOL_SIZE ndpi_selection_bitmask;  \/\/ 该协议配置的l3 + l4层特征位集合$/;"	m	struct:ndpi_call_function_struct
ndpi_set_bitmask_protocol_detection	src/lib/ndpi_main.c	/^void ndpi_set_bitmask_protocol_detection( char * label,$/;"	f
ndpi_set_detected_protocol	src/lib/ndpi_main.c	/^void ndpi_set_detected_protocol(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_set_proto_defaults	src/lib/ndpi_main.c	/^void ndpi_set_proto_defaults(struct ndpi_detection_module_struct *ndpi_mod,$/;"	f
ndpi_set_protocol_detection_bitmask2	src/lib/ndpi_main.c	/^void ndpi_set_protocol_detection_bitmask2(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f
ndpi_slarp	src/include/ndpi_typedefs.h	/^struct ndpi_slarp$/;"	s
ndpi_snap_extension	src/include/ndpi_typedefs.h	/^struct ndpi_snap_extension$/;"	s
ndpi_socrates_add_connection	src/lib/protocols/socrates.c	/^static void ndpi_socrates_add_connection(struct ndpi_detection_module_struct$/;"	f	file:
ndpi_ssh_zap_cr	src/lib/protocols/ssh.c	/^static void ndpi_ssh_zap_cr(char *str, int len) {$/;"	f	file:
ndpi_ssl_refine_master_protocol	src/lib/protocols/ssl.c	/^static u_int32_t ndpi_ssl_refine_master_protocol(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_stats	example/ndpi_util.h	/^typedef struct ndpi_stats {$/;"	s
ndpi_stats_t	example/ndpi_util.h	/^} ndpi_stats_t;$/;"	t	typeref:struct:ndpi_stats
ndpi_strdup	src/lib/ndpi_main.c	/^char * ndpi_strdup(const char *s)$/;"	f
ndpi_string_to_automa	src/lib/ndpi_main.c	/^static int ndpi_string_to_automa(struct ndpi_detection_module_struct *ndpi_struct,$/;"	f	file:
ndpi_strnstr	src/lib/ndpi_main.c	/^char* ndpi_strnstr(const char *s, const char *find, size_t slen) {$/;"	f
ndpi_struct	example/ndpi_util.h	/^  struct ndpi_detection_module_struct *ndpi_struct; \/\/ 指向该工作流专属的探测模块$/;"	m	struct:ndpi_workflow	typeref:struct:ndpi_workflow::ndpi_detection_module_struct
ndpi_subprotocol_conf_struct	src/include/ndpi_typedefs.h	/^struct ndpi_subprotocol_conf_struct {$/;"	s
ndpi_tcphdr	src/include/ndpi_typedefs.h	/^struct ndpi_tcphdr$/;"	s
ndpi_tdelete	src/lib/ndpi_main.c	/^void * ndpi_tdelete(const void *vkey, void **vrootp,$/;"	f
ndpi_tdestroy	src/lib/ndpi_main.c	/^void ndpi_tdestroy(void *vrootp, void (*freefct)(void *))$/;"	f
ndpi_tdestroy_recurse	src/lib/ndpi_main.c	/^static void ndpi_tdestroy_recurse(ndpi_node* root, void (*free_action)(void *))$/;"	f	file:
ndpi_tfind	src/lib/ndpi_main.c	/^void * ndpi_tfind(const void *vkey, void *vrootp,$/;"	f
ndpi_thread_info	example/ndpiReader.c	/^static struct reader_thread ndpi_thread_info[MAX_NUM_READER_THREADS];$/;"	v	typeref:struct:reader_thread	file:
ndpi_trecurse	src/lib/ndpi_main.c	/^static void ndpi_trecurse(ndpi_node *root, void (*action)(const void *, ndpi_VISIT, int, void*), int level, void *user_data)$/;"	f	file:
ndpi_tsearch	src/lib/ndpi_main.c	/^void * ndpi_tsearch(const void *vkey, void **vrootp,$/;"	f
ndpi_twalk	src/lib/ndpi_main.c	/^void ndpi_twalk(const void *vroot, void (*action)(const void *, ndpi_VISIT, int, void *), void *user_data)$/;"	f
ndpi_udphdr	src/include/ndpi_typedefs.h	/^struct ndpi_udphdr$/;"	s
ndpi_utp_hdr	src/lib/protocols/bittorrent.c	/^struct ndpi_utp_hdr {$/;"	s	file:
ndpi_valid_qq_versions	src/lib/protocols/qq.c	/^static const u_int16_t ndpi_valid_qq_versions[] = {$/;"	v	file:
ndpi_wifi_header	src/include/ndpi_typedefs.h	/^struct ndpi_wifi_header$/;"	s
ndpi_workflow	example/ndpi_util.h	/^typedef struct ndpi_workflow {$/;"	s
ndpi_workflow_callback_ptr	example/ndpi_util.h	/^typedef void (*ndpi_workflow_callback_ptr) (struct ndpi_workflow *, struct ndpi_flow_info *, void *);$/;"	t
ndpi_workflow_free	example/ndpi_util.c	/^void ndpi_workflow_free(struct ndpi_workflow * workflow) {$/;"	f
ndpi_workflow_init	example/ndpi_util.c	/^struct ndpi_workflow * ndpi_workflow_init(const struct ndpi_workflow_prefs * prefs, pcap_t * pcap_handle) {$/;"	f
ndpi_workflow_node_cmp	example/ndpi_util.c	/^int ndpi_workflow_node_cmp(const void *a, const void *b) {$/;"	f
ndpi_workflow_prefs	example/ndpi_util.h	/^typedef struct ndpi_workflow_prefs {$/;"	s
ndpi_workflow_prefs_t	example/ndpi_util.h	/^} ndpi_workflow_prefs_t;$/;"	t	typeref:struct:ndpi_workflow_prefs
ndpi_workflow_process_packet	example/ndpi_util.c	/^struct ndpi_proto ndpi_workflow_process_packet (struct ndpi_workflow * workflow,$/;"	f
ndpi_workflow_set_flow_detected_callback	example/ndpi_util.h	/^static inline void ndpi_workflow_set_flow_detected_callback(struct ndpi_workflow * workflow, ndpi_workflow_callback_ptr callback, void * udata) {$/;"	f
ndpi_workflow_set_flow_giveup_callback	example/ndpi_util.h	/^static inline void ndpi_workflow_set_flow_giveup_callback(struct ndpi_workflow * workflow, ndpi_workflow_callback_ptr callback, void * udata) {$/;"	f
ndpi_workflow_t	example/ndpi_util.h	/^} ndpi_workflow_t;$/;"	t	typeref:struct:ndpi_workflow
ndpi_yahoo_header	src/lib/protocols/yahoo.c	/^struct ndpi_yahoo_header {$/;"	s	file:
netbios_header	src/lib/protocols/netbios.c	/^struct netbios_header {$/;"	s	file:
network	src/include/ndpi_typedefs.h	/^  u_int32_t network;    \/\/ 网络号$/;"	m	struct:__anon34
next	example/uthash.h	/^   void *next;                       \/* next element in app order      *\/$/;"	m	struct:UT_hash_handle
next	src/include/ndpi_typedefs.h	/^  struct hash_ip4p_node   *next,*prev;$/;"	m	struct:hash_ip4p_node	typeref:struct:hash_ip4p_node::hash_ip4p_node
next	src/lib/third_party/include/node.h	/^  struct ac_node * next; \/* Target of the edge *\/$/;"	m	struct:edge	typeref:struct:edge::ac_node
next_extension	src/lib/protocols/bittorrent.c	/^  u_int8_t h_version:4, h_type:4, next_extension;$/;"	m	struct:ndpi_utp_hdr	file:
next_header	src/lib/protocols/ayiya.c	/^  u_int8_t next_header;$/;"	m	struct:ayiya	file:
next_tcp_seq_nr	src/include/ndpi_typedefs.h	/^  u_int32_t next_tcp_seq_nr[2];$/;"	m	struct:ndpi_flow_struct
nexthop	src/lib/protocols/netflow.c	/^  u_int32_t nexthop;    \/* Next hop router's IP Address *\/$/;"	m	struct:flow_ver1_rec	file:
nexthop	src/lib/protocols/netflow.c	/^  u_int32_t nexthop;    \/* Next hop router's IP Address *\/$/;"	m	struct:flow_ver5_rec	file:
nexthop	src/lib/protocols/netflow.c	/^  u_int32_t nexthop;    \/* Next hop router's IP Address *\/$/;"	m	struct:flow_ver7_rec	file:
nn	src/lib/protocols/btlib.h	/^		u_int16_t	nn;		\/\/ nodes num$/;"	m	struct:bt_parse_protocol::__anon12
nn6	src/lib/protocols/btlib.h	/^		u_int16_t	nn6;		\/\/ nodes6 num$/;"	m	struct:bt_parse_protocol::__anon12
node_a	example/ndpiReader.c	/^typedef struct node_a{$/;"	s	file:
node_assign_id	src/lib/third_party/src/node.c	/^void node_assign_id (AC_NODE_t * thiz)$/;"	f
node_create	src/lib/third_party/src/node.c	/^AC_NODE_t * node_create(void)$/;"	f
node_create_next	src/lib/third_party/src/node.c	/^AC_NODE_t * node_create_next (AC_NODE_t * thiz, AC_ALPHABET_t alpha)$/;"	f
node_edge_compare	src/lib/third_party/src/node.c	/^int node_edge_compare (const void * l, const void * r)$/;"	f
node_find_next	src/lib/third_party/src/node.c	/^AC_NODE_t * node_find_next(AC_NODE_t * thiz, AC_ALPHABET_t alpha)$/;"	f
node_findbs_next	src/lib/third_party/src/node.c	/^AC_NODE_t * node_findbs_next (AC_NODE_t * thiz, AC_ALPHABET_t alpha)$/;"	f
node_guess_undetected_protocol	example/ndpiReader.c	/^static u_int16_t node_guess_undetected_protocol(u_int16_t thread_id, struct ndpi_flow_info *flow) {$/;"	f	file:
node_has_matchstr	src/lib/third_party/src/node.c	/^int node_has_matchstr (AC_NODE_t * thiz, AC_PATTERN_t * newstr)$/;"	f
node_idle_scan_walker	example/ndpiReader.c	/^static void node_idle_scan_walker(const void *node, ndpi_VISIT which, int depth, void *user_data) {$/;"	f	file:
node_init	src/lib/third_party/src/node.c	/^void node_init(AC_NODE_t * thiz)$/;"	f
node_print_known_proto_walker	example/ndpiReader.c	/^static void node_print_known_proto_walker(const void *node, ndpi_VISIT which, int depth, void *user_data) {$/;"	f	file:
node_print_unknown_proto_walker	example/ndpiReader.c	/^static void node_print_unknown_proto_walker(const void *node, ndpi_VISIT which, int depth, void *user_data) {$/;"	f	file:
node_proto_guess_walker	example/ndpiReader.c	/^static void node_proto_guess_walker(const void *node, ndpi_VISIT which, int depth, void *user_data) {$/;"	f	file:
node_register_matchstr	src/lib/third_party/src/node.c	/^void node_register_matchstr (AC_NODE_t * thiz, AC_PATTERN_t * str)$/;"	f
node_register_outgoing	src/lib/third_party/src/node.c	/^void node_register_outgoing$/;"	f
node_release	src/lib/third_party/src/node.c	/^void node_release(AC_NODE_t * thiz)$/;"	f
node_sort_edges	src/lib/third_party/src/node.c	/^void node_sort_edges (AC_NODE_t * thiz)$/;"	f
node_t	src/include/ndpi_typedefs.h	/^typedef struct node_t$/;"	s
nodes	src/lib/protocols/btlib.h	/^		struct bt_nodes_data *nodes;$/;"	m	struct:bt_parse_protocol::__anon12	typeref:struct:bt_parse_protocol::__anon12::bt_nodes_data
nodes6	src/lib/protocols/btlib.h	/^		struct bt_nodes6_data *nodes6;$/;"	m	struct:bt_parse_protocol::__anon12	typeref:struct:bt_parse_protocol::__anon12::bt_nodes6_data
noexpand	example/uthash.h	/^   unsigned ineff_expands, noexpand;$/;"	m	struct:UT_hash_table
nonideal_items	example/uthash.h	/^   unsigned nonideal_items;$/;"	m	struct:UT_hash_table
nothing0	src/lib/protocols/yahoo.c	/^  u_int16_t nothing0;$/;"	m	struct:ndpi_yahoo_header	file:
ntohs_ndpi_bytestream_to_number	src/lib/ndpi_main.c	/^u_int16_t ntohs_ndpi_bytestream_to_number(const u_int8_t * str, u_int16_t max_chars_to_read, u_int16_t * bytes_read)$/;"	f
ntp	src/include/ndpi_typedefs.h	/^    } ntp;$/;"	m	union:ndpi_flow_struct::__anon26	typeref:struct:ndpi_flow_struct::__anon26::__anon28
num_active_node	src/lib/third_party/include/ndpi_patricia.h	/^  int num_active_node;		\/* for debug purpose *\/$/;"	m	struct:_patricia_tree_t
num_active_patricia	src/lib/third_party/src/ndpi_patricia.c	/^static int num_active_patricia = 0;$/;"	v	file:
num_addr	example/ndpiReader.c	/^  u_int32_t num_addr; \/*to hold number of distinct IP addresses *\/$/;"	m	struct:port_stats	file:
num_addr	example/ndpiReader.c	/^  u_int32_t num_addr; \/*to hold number of distinct IP addresses *\/$/;"	m	struct:top_stats	file:
num_answers	src/include/ndpi_typedefs.h	/^      u_int8_t num_queries, num_answers, reply_code;$/;"	m	struct:ndpi_flow_struct::__anon26::__anon27
num_answers	src/include/ndpi_typedefs.h	/^  u_int16_t num_answers;$/;"	m	struct:ndpi_dns_packet_header
num_buckets	example/uthash.h	/^   unsigned num_buckets, log2_num_buckets;$/;"	m	struct:UT_hash_table
num_bytes	example/ndpiReader.c	/^  u_int32_t num_pkts, num_bytes;$/;"	m	struct:port_stats	file:
num_flows	example/ndpiReader.c	/^static u_int32_t num_flows;$/;"	v	file:
num_idle_flows	example/ndpiReader.c	/^  u_int32_t num_idle_flows;             \/\/ 记录了空闲数据流集合中的数据流数量(暂存用)$/;"	m	struct:reader_thread	file:
num_items	example/uthash.h	/^   unsigned num_items;$/;"	m	struct:UT_hash_table
num_loops	example/ndpiReader.c	/^static u_int16_t num_loops = 1;     \/\/ 探测循环次数(仅测试用)$/;"	v	file:
num_pkts	example/ndpiReader.c	/^  u_int32_t num_pkts, num_bytes;$/;"	m	struct:port_stats	file:
num_pkts	example/ndpiReader.c	/^  u_int32_t num_pkts;$/;"	m	struct:top_stats	file:
num_queries	src/include/ndpi_typedefs.h	/^      u_int8_t num_queries, num_answers, reply_code;$/;"	m	struct:ndpi_flow_struct::__anon26::__anon27
num_queries	src/include/ndpi_typedefs.h	/^  u_int16_t num_queries;$/;"	m	struct:ndpi_dns_packet_header
num_retried_bytes	src/include/ndpi_typedefs.h	/^  u_int16_t num_retried_bytes;$/;"	m	struct:ndpi_packet_struct
num_roots	example/ndpi_util.h	/^  u_int32_t num_roots;      \/\/ 固定为NUM_ROOTS$/;"	m	struct:ndpi_workflow_prefs
num_stun_udp_pkts	src/include/ndpi_typedefs.h	/^  u_int8_t num_stun_udp_pkts;$/;"	m	struct:ndpi_flow_struct
num_threads	example/ndpiReader.c	/^static u_int8_t num_threads = 1;    \/\/ 线程数量(传入的是pcap文件时固定使用单线程)$/;"	v	file:
number	src/lib/protocols/mssql_tds.c	/^  u_int8_t number;$/;"	m	struct:tds_packet_header	file:
number	src/lib/third_party/include/actypes.h	/^  unsigned long number;$/;"	m	union:__anon3
nv	src/lib/protocols/btlib.h	/^		u_int16_t	nv;		\/\/ values num$/;"	m	struct:bt_parse_protocol::__anon12
nv6	src/lib/protocols/btlib.h	/^		u_int16_t	nv6;		\/\/ values6 num$/;"	m	struct:bt_parse_protocol::__anon12
on_protocol_discovered	example/ndpiReader.c	/^static void on_protocol_discovered(struct ndpi_workflow * workflow,$/;"	f	file:
openPcapFileOrDevice	example/ndpiReader.c	/^static pcap_t * openPcapFileOrDevice(u_int16_t thread_id, const u_char * pcap_file) {$/;"	f	file:
options	src/lib/protocols/dhcp.c	/^  uint8_t	options[DHCP_VEND_LEN];$/;"	m	struct:__anon10	file:
orb_rstp_ts_timeout	src/include/ndpi_typedefs.h	/^  u_int32_t orb_rstp_ts_timeout;$/;"	m	struct:ndpi_detection_module_struct
oscar_last_safe_access_time	src/include/ndpi_typedefs.h	/^  u_int32_t oscar_last_safe_access_time;$/;"	m	struct:ndpi_id_struct
oscar_ssl_session_id	src/include/ndpi_typedefs.h	/^  u_int8_t oscar_ssl_session_id[33];$/;"	m	struct:ndpi_id_struct
oscar_ssl_voice_stage	src/include/ndpi_typedefs.h	/^  u_int32_t oscar_ssl_voice_stage:3;$/;"	m	struct:ndpi_flow_struct
oscar_video_voice	src/include/ndpi_typedefs.h	/^  u_int32_t oscar_video_voice:1;$/;"	m	struct:ndpi_flow_struct
oui	src/include/ndpi_typedefs.h	/^  u_int16_t   oui;$/;"	m	struct:ndpi_snap_extension
oui2	src/include/ndpi_typedefs.h	/^  u_int8_t    oui2;$/;"	m	struct:ndpi_snap_extension
outgoing	src/lib/third_party/include/node.h	/^  struct edge * outgoing; \/* Array of outgoing edges *\/$/;"	m	struct:ac_node	typeref:struct:ac_node::edge
outgoing_degree	src/lib/third_party/include/node.h	/^  unsigned short outgoing_degree; \/* Number of outgoing edges *\/$/;"	m	struct:ac_node
outgoing_max	src/lib/third_party/include/node.h	/^  unsigned short outgoing_max; \/* Max capacity of allocated memory for outgoing *\/$/;"	m	struct:ac_node
output	src/lib/protocols/netflow.c	/^  u_int16_t output;     \/* Output interface index *\/$/;"	m	struct:flow_ver1_rec	file:
output	src/lib/protocols/netflow.c	/^  u_int16_t output;     \/* Output interface index *\/$/;"	m	struct:flow_ver5_rec	file:
output	src/lib/protocols/netflow.c	/^  u_int16_t output;     \/* Output interface index *\/$/;"	m	struct:flow_ver7_rec	file:
ovpn_counter	src/include/ndpi_typedefs.h	/^  u_int8_t ovpn_counter;$/;"	m	struct:ndpi_flow_struct
ovpn_session_id	src/include/ndpi_typedefs.h	/^  u_int8_t ovpn_session_id[8];$/;"	m	struct:ndpi_flow_struct
p	src/lib/protocols/btlib.h	/^	struct bt_parse_protocol p;$/;"	m	struct:bt_parse_data_cb	typeref:struct:bt_parse_data_cb::bt_parse_protocol
packet	src/include/ndpi_typedefs.h	/^  struct ndpi_packet_struct packet;     \/\/ 记录了当前数据包的相关信息$/;"	m	struct:ndpi_flow_struct	typeref:struct:ndpi_flow_struct::ndpi_packet_struct
packet_counter	src/include/ndpi_typedefs.h	/^  u_int16_t packet_counter;		            \/\/ can be 0 - 65000 属于该数据流的包计数器$/;"	m	struct:ndpi_flow_struct
packet_direction	src/include/ndpi_typedefs.h	/^           packet_direction:1;$/;"	m	struct:ndpi_flow_struct
packet_direction	src/include/ndpi_typedefs.h	/^    packet_direction:1,         \/\/ 标识收到包的方向，有两种情况下会置1：源ip < 目的ip时;源端口 < 目的端口时$/;"	m	struct:ndpi_packet_struct
packet_direction_counter	src/include/ndpi_typedefs.h	/^  u_int16_t packet_direction_counter[2];    \/\/ 分别记录了该数据流在两个方向上的包数量$/;"	m	struct:ndpi_flow_struct
packet_id	src/lib/protocols/radius.c	/^  u_int8_t packet_id;$/;"	m	struct:radius_header	file:
packet_len	example/ndpi_util.h	/^  u_int64_t packet_len[6];          \/\/ 收到的不同长度(基于传输层长度)的包统计$/;"	m	struct:ndpi_stats
packet_lines_parsed_complete	src/include/ndpi_typedefs.h	/^  u_int8_t packet_lines_parsed_complete:1,$/;"	m	struct:ndpi_packet_struct
packet_processing	example/ndpi_util.c	/^static struct ndpi_proto packet_processing(struct ndpi_workflow * workflow,$/;"	f	file:
packets	example/ndpi_util.h	/^  u_int32_t packets;    \/\/ 记录了收到的包数量(前提是识别为有效流)$/;"	m	struct:ndpi_flow_info
pad	src/include/ndpi_typedefs.h	/^  u_int8_t  pad;$/;"	m	struct:ndpi_radiotap_header
pad	src/lib/protocols/btlib.h	/^	u_int8_t	pad[2];$/;"	m	struct:bt_ipv4p2
pad	src/lib/protocols/btlib.h	/^	u_int8_t	pad[3];$/;"	m	struct:bt_ipv6p2
pad	src/lib/protocols/netflow.c	/^  u_int16_t pad;        \/* pad to word boundary *\/$/;"	m	struct:flow_ver1_rec	file:
pad1	src/lib/protocols/netflow.c	/^  u_int8_t pad1;        \/* pad to word boundary *\/$/;"	m	struct:flow_ver5_rec	file:
pad2	src/lib/protocols/netflow.c	/^  u_int16_t pad2;       \/* pad to word boundary *\/$/;"	m	struct:flow_ver5_rec	file:
pad2	src/lib/protocols/netflow.c	/^  u_int16_t pad2;       \/* pad to word boundary *\/$/;"	m	struct:flow_ver7_rec	file:
pad2	src/lib/protocols/netflow.c	/^  u_int8_t  pad2[7];    \/* pad to word boundary *\/$/;"	m	struct:flow_ver1_rec	file:
pairsByValues	wireshark/ndpi.lua	/^function pairsByValues(t, f)$/;"	f
pando_stage	src/include/ndpi_typedefs.h	/^  u_int32_t pando_stage:3;$/;"	m	struct:ndpi_flow_struct
parent	src/lib/third_party/include/ndpi_patricia.h	/^  struct _patricia_node_t *parent;\/* may be used *\/$/;"	m	struct:_patricia_node_t	typeref:struct:_patricia_node_t::_patricia_node_t
parseHttpSubprotocol	src/lib/protocols/http.c	/^static void parseHttpSubprotocol(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f	file:
parseOptions	example/ndpiReader.c	/^static void parseOptions(int argc, char **argv) {$/;"	f	file:
parse_binf_message	src/lib/protocols/directconnect.c	/^static u_int16_t parse_binf_message(struct ndpi_detection_module_struct$/;"	f	file:
parsed_lines	src/include/ndpi_typedefs.h	/^  u_int16_t parsed_lines;$/;"	m	struct:ndpi_packet_struct
parsed_unix_lines	src/include/ndpi_typedefs.h	/^  u_int16_t parsed_unix_lines;$/;"	m	struct:ndpi_packet_struct
patchIPv6Address	example/ndpi_util.c	/^static void patchIPv6Address(char *str) {$/;"	f	file:
patricia_node_t	src/lib/third_party/include/ndpi_patricia.h	/^} patricia_node_t;$/;"	t	typeref:struct:_patricia_node_t
patricia_node_value_t	src/lib/third_party/include/ndpi_patricia.h	/^union patricia_node_value_t {$/;"	u
patricia_tree_t	src/lib/third_party/include/ndpi_patricia.h	/^} patricia_tree_t;$/;"	t	typeref:struct:_patricia_tree_t
patterns	src/lib/third_party/include/actypes.h	/^  AC_PATTERN_t * patterns; \/* Array of matched pattern *\/$/;"	m	struct:__anon6
payload	src/include/ndpi_typedefs.h	/^  const u_int8_t *payload;              \/\/ 指向l4层payload首地址的指针$/;"	m	struct:ndpi_packet_struct
payload_packet_len	src/include/ndpi_typedefs.h	/^  u_int16_t payload_packet_len; \/\/ 记录了收到包的l4层payload长度$/;"	m	struct:ndpi_packet_struct
pcap_analysis_duration	example/ndpiReader.c	/^static u_int32_t pcap_analysis_duration = (u_int32_t)-1;    \/\/ 解析pcap文件时耗时如果超过该值将会分段打印识别结果$/;"	v	file:
pcap_end	example/ndpiReader.c	/^static struct timeval pcap_start, pcap_end;     \/\/ 捕获起始和结束时间(只在没有传入捕获接口时有效)$/;"	v	typeref:struct:	file:
pcap_handle	example/ndpi_util.h	/^  pcap_t *pcap_handle;      \/\/ 指向该工作流关联的pcap句柄$/;"	m	struct:ndpi_workflow
pcap_process_packet	example/ndpiReader.c	/^static void pcap_process_packet(u_char *args,$/;"	f	file:
pcap_start	example/ndpiReader.c	/^static struct timeval pcap_start, pcap_end;     \/\/ 捕获起始和结束时间(只在没有传入捕获接口时有效)$/;"	v	typeref:struct:timeval	file:
peers	src/lib/protocols/btlib.h	/^	struct bt_ipv4p		*peers;$/;"	m	struct:bt_parse_protocol	typeref:struct:bt_parse_protocol::bt_ipv4p
playlist_fp	example/ndpiReader.c	/^static FILE *playlist_fp[MAX_NUM_READER_THREADS] = { NULL }; \/**< Ingress playlist *\/$/;"	v	file:
pop_command_bitmask	src/include/ndpi_typedefs.h	/^  u_int16_t pop_command_bitmask;$/;"	m	struct:ndpi_flow_tcp_struct
port	example/ndpiReader.c	/^  u_int32_t port; \/* we'll use this field as the key *\/$/;"	m	struct:port_stats	file:
port	example/ndpiReader.c	/^  u_int32_t port; \/* we'll use this field as the key *\/$/;"	m	struct:top_stats	file:
port	src/include/ndpi_typedefs.h	/^  u_int16_t		port;$/;"	m	struct:bt_announce
port	src/include/ndpi_typedefs.h	/^  u_int16_t               port,count:12,flag:4;$/;"	m	struct:hash_ip4p_node
port	src/lib/protocols/btlib.h	/^		u_int16_t	port;$/;"	m	struct:bt_parse_protocol::__anon12
port	src/lib/protocols/btlib.h	/^		u_int16_t port;$/;"	m	struct:bt_parse_protocol::__anon11
port	src/lib/protocols/btlib.h	/^	u_int16_t port;$/;"	m	struct:bt_ipv4p
port	src/lib/protocols/btlib.h	/^	u_int16_t port;$/;"	m	struct:bt_ipv6p
port	src/lib/protocols/btlib.h	/^	u_int16_t port;$/;"	m	struct:bt_nodes6_data
port	src/lib/protocols/btlib.h	/^	u_int16_t port;$/;"	m	struct:bt_nodes_data
port_high	src/include/ndpi_typedefs.h	/^  u_int16_t port_low, port_high;$/;"	m	struct:__anon21
port_low	src/include/ndpi_typedefs.h	/^  u_int16_t port_low, port_high;$/;"	m	struct:__anon21
port_stats	example/ndpiReader.c	/^struct port_stats {$/;"	s	file:
port_stats_sort	example/ndpiReader.c	/^static int port_stats_sort(void *_a, void *_b) {$/;"	f	file:
port_stats_walker	example/ndpiReader.c	/^static void port_stats_walker(const void *node, ndpi_VISIT which, int depth, void *user_data) {$/;"	f	file:
position	src/lib/third_party/include/actypes.h	/^  long position; \/* The end position of matching pattern(s) in the text *\/$/;"	m	struct:__anon6
postgres_stage	src/include/ndpi_typedefs.h	/^  u_int32_t postgres_stage:3;$/;"	m	struct:ndpi_flow_tcp_struct
pplive_stage1	src/include/ndpi_typedefs.h	/^  u_int32_t pplive_stage1:3;			\/\/ 0 - 6$/;"	m	struct:ndpi_flow_struct
pplive_stage2	src/include/ndpi_typedefs.h	/^  u_int32_t pplive_stage2:2;			\/\/ 0 - 2$/;"	m	struct:ndpi_flow_struct
pplive_stage3	src/include/ndpi_typedefs.h	/^  u_int32_t pplive_stage3:2;			\/\/ 0 - 2$/;"	m	struct:ndpi_flow_struct
pppoe_count	example/ndpi_util.h	/^  u_int64_t pppoe_count;$/;"	m	struct:ndpi_stats
ppstream_stage	src/include/ndpi_typedefs.h	/^  u_int32_t ppstream_stage:3;		  \/\/ 0 - 7$/;"	m	struct:ndpi_flow_udp_struct
ppstream_stage	src/include/ndpi_typedefs.h	/^  u_int32_t ppstream_stage:3;$/;"	m	struct:ndpi_flow_tcp_struct
prcnt_pkt	example/ndpiReader.c	/^  float prcnt_pkt; \/*percent of packets respect to total packets *\/$/;"	m	struct:top_stats	file:
prefix	src/lib/third_party/include/ndpi_patricia.h	/^  prefix_t *prefix;		\/* who we are in patricia tree *\/$/;"	m	struct:_patricia_node_t
prefix4_t	src/lib/third_party/include/ndpi_patricia.h	/^} prefix4_t;$/;"	t	typeref:struct:the_prefix4_t
prefix_t	src/lib/third_party/include/ndpi_patricia.h	/^} prefix_t;$/;"	t	typeref:struct:the_prefix_t
prefix_touchar	src/lib/third_party/include/ndpi_patricia.h	52;"	d
prefs	example/ndpi_util.h	/^  struct ndpi_workflow_prefs prefs; \/\/ 记录了该工作流关联的参数配置块$/;"	m	struct:ndpi_workflow	typeref:struct:ndpi_workflow::ndpi_workflow_prefs
present	src/include/ndpi_typedefs.h	/^  u_int32_t present;$/;"	m	struct:ndpi_radiotap_header
prev	example/uthash.h	/^   void *prev;                       \/* prev element in app order      *\/$/;"	m	struct:UT_hash_handle
prev	src/include/ndpi_typedefs.h	/^  struct hash_ip4p_node   *next,*prev;$/;"	m	struct:hash_ip4p_node	typeref:struct:hash_ip4p_node::
prev_zmq_pkt	src/include/ndpi_typedefs.h	/^  u_char prev_zmq_pkt[10];$/;"	m	struct:ndpi_flow_tcp_struct
prev_zmq_pkt_len	src/include/ndpi_typedefs.h	/^  u_int8_t prev_zmq_pkt_len;$/;"	m	struct:ndpi_flow_tcp_struct
print20b	src/lib/protocols/btlib.c	/^static char *print20b(char *s,const u_int8_t *b) {$/;"	f	file:
printFlow	example/ndpiReader.c	/^static void printFlow(u_int16_t thread_id, struct ndpi_flow_info *flow) {$/;"	f	file:
printPortStats	example/ndpiReader.c	/^void printPortStats(struct port_stats *stats) {$/;"	f
printResults	example/ndpiReader.c	/^static void printResults(u_int64_t tot_usec) {$/;"	f	file:
printXb	src/lib/protocols/btlib.c	/^static char *printXb(char *s,const u_int8_t *b,int l) {$/;"	f	file:
print_id_ip6_p	src/lib/protocols/btlib.c	/^static char *print_id_ip6_p(char *s,const struct bt_nodes6_data *b) {$/;"	f	file:
print_id_ip_p	src/lib/protocols/btlib.c	/^static char *print_id_ip_p(char *s, const struct bt_nodes_data *b) {$/;"	f	file:
print_ip6_p	src/lib/protocols/btlib.c	/^static char *print_ip6_p(char *s, const struct bt_ipv6p *b,int np) {$/;"	f	file:
print_ip_p	src/lib/protocols/btlib.c	/^static char *print_ip_p(char *s, const struct bt_ipv4p *b,int np) {$/;"	f	file:
print_safe_str	src/lib/protocols/btlib.c	/^static void print_safe_str(char *msg,bt_parse_data_cb_t *cbd) {$/;"	f	file:
process_ndpi_collected_info	example/ndpi_util.c	/^void process_ndpi_collected_info(struct ndpi_workflow * workflow, struct ndpi_flow_info *flow) {$/;"	f
processing_thread	example/ndpiReader.c	/^void * processing_thread(void *_thread_id) {$/;"	f
proto	src/include/ndpi_typedefs.h	/^  ndpi_proto_defaults_t *proto;     \/\/ 指向关联协议的缺省信息单元$/;"	m	struct:ndpi_default_ports_tree_node
proto	src/lib/protocols/netflow.c	/^  u_int8_t  proto;      \/* IP protocol, e.g., 6=TCP, 17=UDP, etc... *\/$/;"	m	struct:flow_ver1_rec	file:
proto	src/lib/protocols/netflow.c	/^  u_int8_t  proto;      \/* IP protocol, e.g., 6=TCP, 17=UDP, etc... *\/$/;"	m	struct:flow_ver7_rec	file:
proto	src/lib/protocols/netflow.c	/^  u_int8_t proto;        \/* IP protocol, e.g., 6=TCP, 17=UDP, etc... *\/$/;"	m	struct:flow_ver5_rec	file:
protoBreed	src/include/ndpi_typedefs.h	/^  ndpi_protocol_breed_t protoBreed;         \/\/ 协议类别2(根据安全性归类)$/;"	m	struct:ndpi_proto_defaults
protoCategory	src/include/ndpi_typedefs.h	/^  ndpi_protocol_category_t protoCategory;   \/\/ 协议类别1(根据用途归类)$/;"	m	struct:ndpi_proto_defaults
protoId	src/include/ndpi_typedefs.h	/^  u_int16_t protoId;    \/\/ ndpi分配的协议ID$/;"	m	struct:ndpi_proto_defaults
protoIdx	src/include/ndpi_typedefs.h	/^  u_int16_t protoIdx;   \/\/ 协议序号(在ndpi_set_protocol_detection_bitmask2中初始化是从0递增得到)   $/;"	m	struct:ndpi_proto_defaults
protoName	src/include/ndpi_typedefs.h	/^  char *protoName;                          \/\/ 协议名 $/;"	m	struct:ndpi_proto_defaults
proto_ID	src/include/ndpi_typedefs.h	/^  u_int16_t   proto_ID;$/;"	m	struct:ndpi_snap_extension
proto_category	src/include/ndpi_typedefs.h	/^  ndpi_protocol_category_t proto_category;  \/\/ ndpi根据协议用途定义的类别$/;"	m	struct:__anon33
proto_code	src/include/ndpi_typedefs.h	/^  u_int16_t proto_code;   \/* protocol type (e.g. 0x0800 IP)    *\/$/;"	m	struct:ndpi_chdlc
proto_defaults	src/include/ndpi_typedefs.h	/^  ndpi_proto_defaults_t proto_defaults[NDPI_MAX_SUPPORTED_PROTOCOLS+NDPI_MAX_NUM_CUSTOM_PROTOCOLS]; \/\/ 这张表记录了所有支持的协议的缺省信息，主要是端口信息$/;"	m	struct:ndpi_detection_module_struct
proto_name	src/include/ndpi_typedefs.h	/^  char *string_to_match, *proto_name;       \/\/ 主机名,服务名$/;"	m	struct:__anon33
protocol	example/ndpiReader.c	/^    char protocol[64]; \/*l4 protocol*\/$/;"	m	struct:info_pair	file:
protocol	example/ndpiReader.c	/^    char protocol[64]; \/*l4 protocol*\/$/;"	m	struct:node_a	file:
protocol	example/ndpiReader.c	/^  char protocol[64]; \/*application level protocol of top_ip *\/$/;"	m	struct:top_stats	file:
protocol	example/ndpi_util.h	/^  u_int8_t protocol;            \/\/ 记录了该数据流的传输层协议号(比如TCP)$/;"	m	struct:ndpi_flow_info
protocol	src/include/ndpi_typedefs.h	/^  u_int8_t protocol;$/;"	m	struct:ndpi_iphdr
protocol_breed	src/include/ndpi_typedefs.h	/^  ndpi_protocol_breed_t protocol_breed;     \/\/ ndpi根据协议安全性定义的类别$/;"	m	struct:__anon33
protocol_counter	example/ndpi_util.h	/^  u_int64_t protocol_counter[NDPI_MAX_SUPPORTED_PROTOCOLS + NDPI_MAX_NUM_CUSTOM_PROTOCOLS + 1];     \/\/ 这张表记录了每种使能的协议收到的报文数量$/;"	m	struct:ndpi_stats
protocol_counter_bytes	example/ndpi_util.h	/^  u_int64_t protocol_counter_bytes[NDPI_MAX_SUPPORTED_PROTOCOLS + NDPI_MAX_NUM_CUSTOM_PROTOCOLS + 1];   \/\/ 这张表记录了每种使能的协议收到的字节数量$/;"	m	struct:ndpi_stats
protocol_flows	example/ndpi_util.h	/^  u_int32_t protocol_flows[NDPI_MAX_SUPPORTED_PROTOCOLS + NDPI_MAX_NUM_CUSTOM_PROTOCOLS + 1];       \/\/ 这张表记录了每种使能的协议收到的流数量$/;"	m	struct:ndpi_stats
protocol_id	src/include/ndpi_typedefs.h	/^  int protocol_id;                          \/\/ ndpi分配的协议ID$/;"	m	struct:__anon33
protocol_id_already_guessed	src/include/ndpi_typedefs.h	/^  u_int8_t protocol_id_already_guessed:1,   \/\/ 标识该数据流是否进行了协议猜测$/;"	m	struct:ndpi_flow_struct
protocol_stack_info	src/include/ndpi_typedefs.h	/^  u_int16_t protocol_stack_info;$/;"	m	struct:ndpi_flow_struct
protocol_stack_info	src/include/ndpi_typedefs.h	/^  u_int16_t protocol_stack_info;$/;"	m	struct:ndpi_packet_struct
protocols_ptree	src/include/ndpi_typedefs.h	/^  void *protocols_ptree;$/;"	m	struct:ndpi_detection_module_struct
protos	src/include/ndpi_typedefs.h	/^  } protos;$/;"	m	struct:ndpi_flow_struct	typeref:union:ndpi_flow_struct::__anon26
psh	src/include/ndpi_typedefs.h	/^  u_int16_t doff:4, res1:4, cwr:1, ece:1, urg:1, ack:1, psh:1, rst:1, syn:1, fin:1;$/;"	m	struct:ndpi_tcphdr
psh	src/include/ndpi_typedefs.h	/^  u_int16_t res1:4, doff:4, fin:1, syn:1, rst:1, psh:1, ack:1, urg:1, ece:1, cwr:1;$/;"	m	struct:ndpi_tcphdr
pthread	example/ndpiReader.c	/^  pthread_t pthread;                    \/\/ 记录了对应的线程ID$/;"	m	struct:reader_thread	file:
pthread_mutex_t	src/include/ndpi_win32.h	56;"	d
pthread_rwlock_destroy	src/include/ndpi_win32.h	62;"	d
pthread_rwlock_init	src/include/ndpi_win32.h	58;"	d
pthread_rwlock_rdlock	src/include/ndpi_win32.h	60;"	d
pthread_rwlock_t	src/include/ndpi_win32.h	57;"	d
pthread_rwlock_unlock	src/include/ndpi_win32.h	61;"	d
pthread_rwlock_wrlock	src/include/ndpi_win32.h	59;"	d
pthread_t	src/include/ndpi_win32.h	55;"	d
ptr	src/include/ndpi_typedefs.h	/^  const u_int8_t *ptr;$/;"	m	struct:ndpi_int_one_line_struct
ptype	src/lib/protocols/amqp.c	/^	u_int8_t ptype;$/;"	m	struct:amqp_header	file:
q_a_peer	src/lib/protocols/btlib.h	/^		  q_a_peer:1,q_f_node:1,$/;"	m	struct:bt_parse_protocol
q_f_node	src/lib/protocols/btlib.h	/^		  q_a_peer:1,q_f_node:1,$/;"	m	struct:bt_parse_protocol
q_g_peers	src/lib/protocols/btlib.h	/^		  q_g_peers:1,q_ping:1,$/;"	m	struct:bt_parse_protocol
q_ping	src/lib/protocols/btlib.h	/^		  q_g_peers:1,q_ping:1,$/;"	m	struct:bt_parse_protocol
qq_nxt_len	src/include/ndpi_typedefs.h	/^  u_int16_t qq_nxt_len;$/;"	m	struct:ndpi_flow_tcp_struct
qq_stage	src/include/ndpi_typedefs.h	/^  u_int32_t qq_stage:3;$/;"	m	struct:ndpi_flow_struct
query_class	src/include/ndpi_typedefs.h	/^      u_int16_t query_type, query_class, rsp_type;$/;"	m	struct:ndpi_flow_struct::__anon26::__anon27
query_type	src/include/ndpi_typedefs.h	/^      u_int16_t query_type, query_class, rsp_type;$/;"	m	struct:ndpi_flow_struct::__anon26::__anon27
questions	src/lib/protocols/netbios.c	/^  u_int16_t transaction_id, flags, questions, answer_rrs, authority_rrs, additional_rrs;$/;"	m	struct:netbios_header	file:
quic_len	src/lib/protocols/quic.c	/^static int quic_len(u_int8_t l) {$/;"	f	file:
quic_ports	src/lib/protocols/quic.c	/^static int quic_ports(u_int16_t sport, u_int16_t dport)$/;"	f	file:
quiet_mode	example/ndpiReader.c	/^static u_int8_t quiet_mode = 0;     \/\/ 标识是否开启安静模式$/;"	v	file:
quiet_mode	example/ndpi_util.h	/^  u_int8_t quiet_mode;      \/\/ 标识是否使能安静模式$/;"	m	struct:ndpi_workflow_prefs
r	src/lib/protocols/btlib.h	/^	} r;$/;"	m	struct:bt_parse_protocol	typeref:struct:bt_parse_protocol::__anon12
r	src/lib/third_party/include/ndpi_patricia.h	/^  struct _patricia_node_t *l, *r;	\/* left and right children  指向左、右子树 *\/$/;"	m	struct:_patricia_node_t	typeref:struct:_patricia_node_t::
radius_header	src/lib/protocols/radius.c	/^struct radius_header {$/;"	s	file:
raw_packet_count	example/ndpi_util.h	/^  u_int64_t raw_packet_count;           \/\/ 记录了从libpcap收到的原始报文数量$/;"	m	struct:ndpi_stats
rcvr	src/include/ndpi_typedefs.h	/^  u_char rcvr[6];$/;"	m	struct:ndpi_wifi_header
reader_thread	example/ndpiReader.c	/^struct reader_thread {$/;"	s	file:
redis_d2s_first_char	src/include/ndpi_typedefs.h	/^  u_int8_t redis_s2d_first_char, redis_d2s_first_char;$/;"	m	struct:ndpi_flow_struct
redis_s2d_first_char	src/include/ndpi_typedefs.h	/^  u_int8_t redis_s2d_first_char, redis_d2s_first_char;$/;"	m	struct:ndpi_flow_struct
ref_count	src/lib/third_party/include/ndpi_patricia.h	/^  int ref_count;		\/* reference count *\/$/;"	m	struct:the_prefix4_t
ref_count	src/lib/third_party/include/ndpi_patricia.h	/^  int ref_count;		\/* reference count *\/$/;"	m	struct:the_prefix_t
referer_line	src/include/ndpi_typedefs.h	/^  struct ndpi_int_one_line_struct referer_line;$/;"	m	struct:ndpi_packet_struct	typeref:struct:ndpi_packet_struct::ndpi_int_one_line_struct
removeDefaultPort	src/lib/ndpi_main.c	/^static int removeDefaultPort(ndpi_port_range *range,$/;"	f	file:
rep	src/lib/third_party/include/actypes.h	/^  AC_REP_t rep; \/* Representative string (optional) *\/$/;"	m	struct:__anon4
reply_code	src/include/ndpi_typedefs.h	/^      u_int8_t num_queries, num_answers, reply_code;$/;"	m	struct:ndpi_flow_struct::__anon26::__anon27
requestId	src/lib/protocols/afp.c	/^  u_int16_t requestId;$/;"	m	struct:afpHeader	file:
request_code	src/include/ndpi_typedefs.h	/^      u_int8_t request_code;$/;"	m	struct:ndpi_flow_struct::__anon26::__anon28
res1	src/include/ndpi_typedefs.h	/^  u_int16_t doff:4, res1:4, cwr:1, ece:1, urg:1, ack:1, psh:1, rst:1, syn:1, fin:1;$/;"	m	struct:ndpi_tcphdr
res1	src/include/ndpi_typedefs.h	/^  u_int16_t res1:4, doff:4, fin:1, syn:1, rst:1, psh:1, ack:1, urg:1, ece:1, cwr:1;$/;"	m	struct:ndpi_tcphdr
reserved	src/lib/protocols/afp.c	/^  u_int32_t dataOffset, length, reserved;$/;"	m	struct:afpHeader	file:
reserved	src/lib/protocols/h323.c	/^  u_int8_t version, reserved;$/;"	m	struct:tpkt	file:
results_file	example/ndpiReader.c	/^static FILE *results_file = NULL;       \/\/ 指向一个用于记录测试信息的文件句柄$/;"	v	file:
results_path	example/ndpiReader.c	/^static char *results_path = NULL;       \/\/ 指向一个用于记录测试信息的文件路径$/;"	v	file:
rev	wireshark/ndpi.lua	/^function rev(a,b) return (a > b) end$/;"	f
right	example/ndpiReader.c	/^    struct node_a *left, *right;$/;"	m	struct:node_a	typeref:struct:node_a::	file:
right	src/include/ndpi_typedefs.h	/^  struct node_t *left, *right;  \/\/ 左、右子树$/;"	m	struct:node_t	typeref:struct:node_t::
root	src/lib/third_party/include/ahocorasick.h	/^  AC_NODE_t * root;$/;"	m	struct:__anon8
round	wireshark/ndpi.lua	/^function round(num, idp)         return tonumber(string.format("%." .. (idp or 0) .. "f", num)) end$/;"	f
router_sc	src/lib/protocols/netflow.c	/^  u_int32_t router_sc;  \/* Router which is shortcut by switch *\/$/;"	m	struct:flow_ver7_rec	file:
rsp_type	src/include/ndpi_typedefs.h	/^      u_int16_t query_type, query_class, rsp_type;$/;"	m	struct:ndpi_flow_struct::__anon26::__anon27
rst	src/include/ndpi_typedefs.h	/^  u_int16_t doff:4, res1:4, cwr:1, ece:1, urg:1, ack:1, psh:1, rst:1, syn:1, fin:1;$/;"	m	struct:ndpi_tcphdr
rst	src/include/ndpi_typedefs.h	/^  u_int16_t res1:4, doff:4, fin:1, syn:1, rst:1, psh:1, ack:1, urg:1, ece:1, cwr:1;$/;"	m	struct:ndpi_tcphdr
rtmp_stage	src/include/ndpi_typedefs.h	/^  u_int32_t rtmp_stage:2;$/;"	m	struct:ndpi_flow_struct
rtp_special_packets_seen	src/include/ndpi_typedefs.h	/^  u_int32_t rtp_special_packets_seen:1;$/;"	m	struct:ndpi_flow_tcp_struct
rtsp_connection_timeout	src/include/ndpi_typedefs.h	/^  u_int32_t rtsp_connection_timeout;$/;"	m	struct:ndpi_detection_module_struct
rtsp_control_flow	src/include/ndpi_typedefs.h	/^  u_int32_t rtsp_control_flow:1;        \/\/ 标识是否探测到RTSP流$/;"	m	struct:ndpi_flow_struct
rtsp_ip_address	src/include/ndpi_typedefs.h	/^  ndpi_ip_addr_t rtsp_ip_address;   \/\/ 记录了RTSP流的IP地址$/;"	m	struct:ndpi_id_struct
rtsp_parse_packet_acceptline	src/lib/protocols/http.c	/^static void rtsp_parse_packet_acceptline(struct ndpi_detection_module_struct$/;"	f	file:
rtsp_timer	src/include/ndpi_typedefs.h	/^  u_int32_t rtsp_timer;     \/\/ 记录了RTSP流最近收到包的时间(s)$/;"	m	struct:ndpi_id_struct
rtsp_ts_set	src/include/ndpi_typedefs.h	/^  u_int32_t rtsp_ts_set:1;      \/\/ 标识是否记录了RTSP流时间$/;"	m	struct:ndpi_id_struct
rtsprdt_stage	src/include/ndpi_typedefs.h	/^  u_int32_t rtsprdt_stage:2;$/;"	m	struct:ndpi_flow_struct
runPcapLoop	example/ndpiReader.c	/^static void runPcapLoop(u_int16_t thread_id) {$/;"	f	file:
rx_conn_epoch	src/include/ndpi_typedefs.h	/^  u_int32_t rx_conn_epoch;$/;"	m	struct:ndpi_flow_udp_struct
rx_conn_id	src/include/ndpi_typedefs.h	/^  u_int32_t rx_conn_id;$/;"	m	struct:ndpi_flow_udp_struct
s	src/include/ndpi_typedefs.h	/^  u_int32_t label:20, exp:3, s:1, ttl:8;$/;"	m	struct:ndpi_mpls_header
s	src/lib/protocols/btlib.h	/^		b_elem_s_t s;$/;"	m	union:bt_parse_data_cb::__anon13
s	src/lib/protocols/btlib.h	/^	const u_int8_t *s;$/;"	m	struct:b_elem_s
saddr	src/include/ndpi_typedefs.h	/^  u_int32_t saddr;$/;"	m	struct:ndpi_iphdr
saveTopStats	example/ndpiReader.c	/^static void saveTopStats(FILE *fp, struct top_stats *stats, int direction, u_int64_t total_ip_addr){$/;"	f	file:
sc2_match_logon_ip	src/lib/protocols/starcraft.c	/^u_int8_t sc2_match_logon_ip(struct ndpi_packet_struct* packet)$/;"	f
search_active_ftp_mode	src/lib/protocols/attic/ftp.c	/^static void search_active_ftp_mode(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
search_ddl_domains	src/lib/protocols/directdownloadlink.c	/^u_int8_t search_ddl_domains(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
search_ftp	src/lib/protocols/attic/ftp.c	/^static u_int8_t search_ftp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
search_iac	src/lib/protocols/telnet.c	/^u_int8_t search_iac(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
search_manolito_tcp	src/lib/protocols/attic/manolito.c	/^u_int8_t search_manolito_tcp(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f
search_passive_ftp_mode	src/lib/protocols/attic/ftp.c	/^static void search_passive_ftp_mode(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
secs	src/lib/protocols/dhcp.c	/^  uint16_t	secs;\/* 8 *\/$/;"	m	struct:__anon10	file:
security	src/lib/protocols/rx.c	/^  u_int8_t security;$/;"	m	struct:ndpi_rx_header	file:
seen_ack	src/include/ndpi_typedefs.h	/^  u_int32_t seen_ack:1;         \/\/ 标识是否已经收到tcp建立连接时的第三个握手报文$/;"	m	struct:ndpi_flow_tcp_struct
seen_syn	src/include/ndpi_typedefs.h	/^  u_int32_t seen_syn:1;         \/\/ 标识是否已经收到tcp建立连接时的第一个握手报文$/;"	m	struct:ndpi_flow_tcp_struct
seen_syn_ack	src/include/ndpi_typedefs.h	/^  u_int32_t seen_syn_ack:1;     \/\/ 标识是否已经收到tcp建立连接时的第二个握手报文$/;"	m	struct:ndpi_flow_tcp_struct
seq	src/include/ndpi_typedefs.h	/^  u_int32_t seq;$/;"	m	struct:ndpi_tcphdr
seq_ctrl	src/include/ndpi_typedefs.h	/^  u_int16_t seq_ctrl;$/;"	m	struct:ndpi_wifi_header
sequence_nr	src/lib/protocols/bittorrent.c	/^  u_int16_t sequence_nr, ack_nr;$/;"	m	struct:ndpi_utp_hdr	file:
sequence_number	src/lib/protocols/rx.c	/^  u_int32_t sequence_number;$/;"	m	struct:ndpi_rx_header	file:
serial_number	src/lib/protocols/rx.c	/^  u_int32_t serial_number;$/;"	m	struct:ndpi_rx_header	file:
server_certificate	src/include/ndpi_typedefs.h	/^      char client_certificate[48], server_certificate[48];$/;"	m	struct:ndpi_flow_struct::__anon26::__anon29
server_id	src/include/ndpi_typedefs.h	/^  struct ndpi_id_struct *server_id;$/;"	m	struct:ndpi_flow_struct	typeref:struct:ndpi_flow_struct::ndpi_id_struct
server_info	example/ndpi_util.h	/^    char client_info[48], server_info[48];$/;"	m	struct:ndpi_flow_info::__anon1
server_line	src/include/ndpi_typedefs.h	/^  struct ndpi_int_one_line_struct server_line;$/;"	m	struct:ndpi_packet_struct	typeref:struct:ndpi_packet_struct::ndpi_int_one_line_struct
server_signature	src/include/ndpi_typedefs.h	/^      char client_signature[48], server_signature[48];$/;"	m	struct:ndpi_flow_struct::__anon26::__anon30
service	src/lib/protocols/yahoo.c	/^  u_int16_t service;$/;"	m	struct:ndpi_yahoo_header	file:
service_id	src/lib/protocols/rx.c	/^  u_int16_t service_id;$/;"	m	struct:ndpi_rx_header	file:
session_id	src/lib/protocols/yahoo.c	/^  u_int32_t session_id;$/;"	m	struct:ndpi_yahoo_header	file:
setHttpUserAgent	src/lib/protocols/http.c	/^static void setHttpUserAgent(struct ndpi_flow_struct *flow, char *ua) {$/;"	f	file:
set_ndpi_debug_function	src/lib/ndpi_main.c	/^void set_ndpi_debug_function(struct ndpi_detection_module_struct *ndpi_str, ndpi_debug_function_ptr ndpi_debug_printf) {$/;"	f
set_ndpi_flow_free	src/lib/ndpi_main.c	/^void set_ndpi_flow_free(void  (*__ndpi_flow_free)(void *ptr))       { _ndpi_flow_free = __ndpi_flow_free; }$/;"	f
set_ndpi_flow_malloc	src/lib/ndpi_main.c	/^void set_ndpi_flow_malloc(void* (*__ndpi_flow_malloc)(size_t size)) { _ndpi_flow_malloc = __ndpi_flow_malloc; }$/;"	f
set_ndpi_free	src/lib/ndpi_main.c	/^void set_ndpi_free(void  (*__ndpi_free)(void *ptr))       { _ndpi_free = __ndpi_free; }$/;"	f
set_ndpi_malloc	src/lib/ndpi_main.c	/^void set_ndpi_malloc(void* (*__ndpi_malloc)(size_t size)) { _ndpi_malloc = __ndpi_malloc; }$/;"	f
set_protocol_and_bmask	src/lib/protocols/non_tcp_udp.c	30;"	d	file:
setupDetection	example/ndpiReader.c	/^static void setupDetection(u_int16_t thread_id, pcap_t * pcap_handle) {$/;"	f	file:
setup_packet_direction	src/include/ndpi_typedefs.h	/^           setup_packet_direction:1,        \/\/ 同步自packet->packet_direction$/;"	m	struct:ndpi_flow_struct
shoutcast_stage	src/include/ndpi_typedefs.h	/^  u_int32_t shoutcast_stage:2;$/;"	m	struct:ndpi_flow_tcp_struct
shutdown_app	example/ndpiReader.c	/^static u_int8_t shutdown_app = 0;   \/\/ 标识是否终止捕获$/;"	v	file:
siaddr	src/lib/protocols/dhcp.c	/^  uint32_t	siaddr;\/* 20 *\/$/;"	m	struct:__anon10	file:
signature	example/uthash.h	/^   uint32_t signature; \/* used only to find hash tables in external analysis *\/$/;"	m	struct:UT_hash_table
signature	src/lib/protocols/ayiya.c	/^  u_int8_t signature[20];  $/;"	m	struct:ayiya	file:
sigproc	example/ndpiReader.c	/^void sigproc(int sig) {$/;"	f
sin	src/lib/third_party/include/ndpi_patricia.h	/^    struct in_addr sin;$/;"	m	union:the_prefix_t::__anon2	typeref:struct:the_prefix_t::__anon2::in_addr
sin	src/lib/third_party/include/ndpi_patricia.h	/^  struct in_addr sin;$/;"	m	struct:the_prefix4_t	typeref:struct:the_prefix4_t::in_addr
sin6	src/lib/third_party/include/ndpi_patricia.h	/^    struct in6_addr sin6;$/;"	m	union:the_prefix_t::__anon2	typeref:struct:the_prefix_t::__anon2::in6_addr
sip_yahoo_voice	src/include/ndpi_typedefs.h	/^  u_int32_t sip_yahoo_voice:1;$/;"	m	struct:ndpi_flow_struct
size	src/include/ndpi_typedefs.h	/^  size_t                  size;$/;"	m	struct:hash_ip4p_table
skip_unknown_headers	src/lib/protocols/directconnect.c	/^static u_int32_t skip_unknown_headers(const u_int8_t * payload, u_int32_t payload_len, u_int32_t pos)$/;"	f	file:
skype_packet_id	src/include/ndpi_typedefs.h	/^  u_int8_t skype_packet_id;$/;"	m	struct:ndpi_flow_tcp_struct
skype_packet_id	src/include/ndpi_typedefs.h	/^  u_int8_t skype_packet_id;$/;"	m	struct:ndpi_flow_udp_struct
slarp_type	src/include/ndpi_typedefs.h	/^  u_int32_t slarp_type;$/;"	m	struct:ndpi_slarp
sleep	src/include/ndpi_win32.h	68;"	d
slen	wireshark/ndpi.lua	/^function slen(str)$/;"	f
smtp_command_bitmask	src/include/ndpi_typedefs.h	/^  u_int16_t smtp_command_bitmask;$/;"	m	struct:ndpi_flow_tcp_struct
sname	src/lib/protocols/dhcp.c	/^  uint8_t	sname[DHCP_SNAME_LEN]; \/* 44 *\/$/;"	m	struct:__anon10	file:
snap	src/include/ndpi_typedefs.h	/^  struct ndpi_snap_extension snap;$/;"	m	struct:ndpi_llc_header_snap	typeref:struct:ndpi_llc_header_snap::ndpi_snap_extension
snmp_msg_id	src/include/ndpi_typedefs.h	/^  u_int32_t snmp_msg_id;$/;"	m	struct:ndpi_flow_udp_struct
snmp_stage	src/include/ndpi_typedefs.h	/^  u_int32_t snmp_stage:2;$/;"	m	struct:ndpi_flow_udp_struct
snprintf	src/include/ndpi_define.h	290;"	d
socks4_stage	src/include/ndpi_typedefs.h	/^  u_int32_t socks4_stage:2;	                \/\/ 0 - 3$/;"	m	struct:ndpi_flow_struct
socks5_stage	src/include/ndpi_typedefs.h	/^  u_int32_t socks5_stage:2;	                \/\/ 0 - 3$/;"	m	struct:ndpi_flow_struct
sort	src/lib/third_party/src/sort.c	/^void sort(void *_base, size_t num, size_t size,$/;"	f
soulseek_connection_ip_tick_timeout	src/include/ndpi_typedefs.h	/^  u_int32_t soulseek_connection_ip_tick_timeout;$/;"	m	struct:ndpi_detection_module_struct
soulseek_last_safe_access_time	src/include/ndpi_typedefs.h	/^  u_int32_t soulseek_last_safe_access_time;$/;"	m	struct:ndpi_id_struct
soulseek_listen_port	src/include/ndpi_typedefs.h	/^  u_int16_t soulseek_listen_port;$/;"	m	struct:ndpi_id_struct
soulseek_stage	src/include/ndpi_typedefs.h	/^  u_int32_t soulseek_stage:2;$/;"	m	struct:ndpi_flow_tcp_struct
source	src/include/ndpi_typedefs.h	/^  u_int16_t source;$/;"	m	struct:ndpi_tcphdr
source	src/include/ndpi_typedefs.h	/^  u_int16_t source;$/;"	m	struct:ndpi_udphdr
spinlock	src/include/ndpi_typedefs.h	/^typedef struct spinlock {$/;"	s
spinlock_t	src/include/ndpi_typedefs.h	/^} spinlock_t;$/;"	t	typeref:struct:spinlock
src	src/include/ndpi_typedefs.h	/^  struct ndpi_id_struct *src;$/;"	m	struct:ndpi_flow_struct	typeref:struct:ndpi_flow_struct::ndpi_id_struct
srcStats	example/ndpiReader.c	/^struct port_stats *srcStats = NULL, *dstStats = NULL;$/;"	v	typeref:struct:port_stats
src_as	src/lib/protocols/netflow.c	/^  u_int16_t src_as;     \/* source peer\/origin Autonomous System *\/$/;"	m	struct:flow_ver5_rec	file:
src_as	src/lib/protocols/netflow.c	/^  u_int16_t src_as;     \/* source peer\/origin Autonomous System *\/$/;"	m	struct:flow_ver7_rec	file:
src_id	example/ndpi_util.h	/^  void *src_id, *dst_id;$/;"	m	struct:ndpi_flow_info
src_mask	src/lib/protocols/netflow.c	/^  u_int8_t  src_mask;   \/* source route's mask bits *\/$/;"	m	struct:flow_ver7_rec	file:
src_mask	src/lib/protocols/netflow.c	/^  u_int8_t src_mask;    \/* source route's mask bits *\/$/;"	m	struct:flow_ver5_rec	file:
srcaddr	src/lib/protocols/netflow.c	/^  u_int32_t srcaddr;    \/* Source IP Address *\/$/;"	m	struct:flow_ver1_rec	file:
srcaddr	src/lib/protocols/netflow.c	/^  u_int32_t srcaddr;    \/* Source IP Address *\/$/;"	m	struct:flow_ver5_rec	file:
srcaddr	src/lib/protocols/netflow.c	/^  u_int32_t srcaddr;    \/* Source IP Address *\/$/;"	m	struct:flow_ver7_rec	file:
srcport	src/lib/protocols/netflow.c	/^  u_int16_t srcport;    \/* TCP\/UDP source port number (.e.g, FTP, Telnet, etc.,or equivalent) *\/$/;"	m	struct:flow_ver1_rec	file:
srcport	src/lib/protocols/netflow.c	/^  u_int16_t srcport;    \/* TCP\/UDP source port number (.e.g, FTP, Telnet, etc.,or equivalent) *\/$/;"	m	struct:flow_ver5_rec	file:
srcport	src/lib/protocols/netflow.c	/^  u_int16_t srcport;    \/* TCP\/UDP source port number (.e.g, FTP, Telnet, etc.,or equivalent) *\/$/;"	m	struct:flow_ver7_rec	file:
ssap	src/include/ndpi_typedefs.h	/^  u_int8_t    ssap;$/;"	m	struct:ndpi_llc_header_snap
ssh	src/include/ndpi_typedefs.h	/^    } ssh;$/;"	m	union:ndpi_flow_struct::__anon26	typeref:struct:ndpi_flow_struct::__anon26::__anon30
ssh_ssl	example/ndpi_util.h	/^  } ssh_ssl;$/;"	m	struct:ndpi_flow_info	typeref:struct:ndpi_flow_info::__anon1
ssh_stage	src/include/ndpi_typedefs.h	/^  u_int32_t ssh_stage:3;$/;"	m	struct:ndpi_flow_tcp_struct
ssl	src/include/ndpi_typedefs.h	/^    } ssl;$/;"	m	union:ndpi_flow_struct::__anon26	typeref:struct:ndpi_flow_struct::__anon26::__anon29
sslDetectProtocolFromCertificate	src/lib/protocols/ssl.c	/^int sslDetectProtocolFromCertificate(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {$/;"	f
ssl_certificate_detected	src/include/ndpi_typedefs.h	/^  u_int8_t ssl_certificate_detected:4, ssl_certificate_num_checks:4;$/;"	m	struct:ndpi_packet_struct
ssl_certificate_num_checks	src/include/ndpi_typedefs.h	/^  u_int8_t ssl_certificate_detected:4, ssl_certificate_num_checks:4;$/;"	m	struct:ndpi_packet_struct
ssl_mark_and_payload_search_for_other_protocols	src/lib/protocols/ssl.c	/^static void ssl_mark_and_payload_search_for_other_protocols(struct$/;"	f	file:
ssl_seen_client_cert	src/include/ndpi_typedefs.h	/^  u_int8_t ssl_stage:2, ssl_seen_client_cert:1, ssl_seen_server_cert:1; \/\/ 0 - 5$/;"	m	struct:ndpi_flow_tcp_struct
ssl_seen_server_cert	src/include/ndpi_typedefs.h	/^  u_int8_t ssl_stage:2, ssl_seen_client_cert:1, ssl_seen_server_cert:1; \/\/ 0 - 5$/;"	m	struct:ndpi_flow_tcp_struct
ssl_stage	src/include/ndpi_typedefs.h	/^  u_int8_t ssl_stage:2, ssl_seen_client_cert:1, ssl_seen_server_cert:1; \/\/ 0 - 5$/;"	m	struct:ndpi_flow_tcp_struct
starcraft_udp_stage	src/include/ndpi_typedefs.h	/^  u_int32_t starcraft_udp_stage : 3;	\/\/ 0-7$/;"	m	struct:ndpi_flow_struct
stats	example/ndpi_util.h	/^  struct ndpi_stats stats;$/;"	m	struct:ndpi_workflow	typeref:struct:ndpi_workflow::ndpi_stats
stats_flag	example/ndpiReader.c	/^static u_int8_t stats_flag = 0, file_first_time = 1; $/;"	v	file:
status	src/lib/protocols/mssql_tds.c	/^  u_int8_t status;$/;"	m	struct:tds_packet_header	file:
status	src/lib/protocols/rx.c	/^  u_int8_t status;$/;"	m	struct:ndpi_rx_header	file:
status	src/lib/protocols/yahoo.c	/^  u_int32_t status;$/;"	m	struct:ndpi_yahoo_header	file:
steam_stage	src/include/ndpi_typedefs.h	/^  u_int32_t steam_stage:3;$/;"	m	struct:ndpi_flow_struct
steam_stage1	src/include/ndpi_typedefs.h	/^  u_int32_t steam_stage1:3;			\/\/ 0 - 4$/;"	m	struct:ndpi_flow_struct
steam_stage2	src/include/ndpi_typedefs.h	/^  u_int32_t steam_stage2:2;			\/\/ 0 - 2$/;"	m	struct:ndpi_flow_struct
steam_stage3	src/include/ndpi_typedefs.h	/^  u_int32_t steam_stage3:2;			\/\/ 0 - 2$/;"	m	struct:ndpi_flow_struct
strcasecmp	src/lib/ndpi_main.c	/^int strcasecmp(s1, s2)$/;"	f
string	src/lib/protocols/jabber.c	/^  char *string;$/;"	m	struct:jabber_string	file:
string_to_match	src/include/ndpi_typedefs.h	/^  char *string_to_match, *proto_name;       \/\/ 主机名,服务名$/;"	m	struct:__anon33
stringy	src/lib/third_party/include/actypes.h	/^  char * stringy; \/* null-terminated string *\/$/;"	m	union:__anon3
stripCertificateTrailer	src/lib/protocols/ssl.c	/^static void stripCertificateTrailer(char *buffer, int buffer_len) {$/;"	f	file:
strncasecmp	src/lib/ndpi_main.c	/^int strncasecmp(s1, s2, n)$/;"	f
strsep	src/lib/ndpi_main.c	/^char * strsep(char **sp, char *sep)$/;"	f
stun_packet_header	src/lib/protocols/stun.c	/^struct stun_packet_header {$/;"	s	file:
subprotocol_automa	src/include/ndpi_typedefs.h	/^    subprotocol_automa,                        \/* Used for HTTP subprotocol_detection  (貌似没用到) *\/$/;"	m	struct:ndpi_detection_module_struct
subprotocol_conf	src/include/ndpi_typedefs.h	/^  struct ndpi_subprotocol_conf_struct subprotocol_conf[NDPI_MAX_SUPPORTED_PROTOCOLS + 1];$/;"	m	struct:ndpi_detection_module_struct	typeref:struct:ndpi_detection_module_struct::ndpi_subprotocol_conf_struct
syn	src/include/ndpi_typedefs.h	/^  u_int16_t doff:4, res1:4, cwr:1, ece:1, urg:1, ack:1, psh:1, rst:1, syn:1, fin:1;$/;"	m	struct:ndpi_tcphdr
syn	src/include/ndpi_typedefs.h	/^  u_int16_t res1:4, doff:4, fin:1, syn:1, rst:1, psh:1, ack:1, urg:1, ece:1, cwr:1;$/;"	m	struct:ndpi_tcphdr
t	src/lib/protocols/btlib.h	/^	int	t;$/;"	m	struct:bt_parse_data_cb
t	src/lib/protocols/btlib.h	/^	u_int64_t		t,v;$/;"	m	struct:bt_parse_protocol
t_len	src/lib/protocols/btlib.h	/^		u_int16_t	t_len;$/;"	m	struct:bt_parse_protocol::__anon11
t_len	src/lib/protocols/btlib.h	/^		u_int16_t	t_len;$/;"	m	struct:bt_parse_protocol::__anon12
tail	example/uthash.h	/^   struct UT_hash_handle *tail; \/* tail hh in app order, for fast append    *\/$/;"	m	struct:UT_hash_table	typeref:struct:UT_hash_table::UT_hash_handle
target	src/lib/protocols/btlib.h	/^			 	*target,	\/\/ 20$/;"	m	struct:bt_parse_protocol::__anon11
tbl	example/uthash.h	/^   struct UT_hash_table *tbl;$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_table
tbl	src/include/ndpi_typedefs.h	/^  struct hash_ip4p        tbl;$/;"	m	struct:hash_ip4p_table	typeref:struct:hash_ip4p_table::hash_ip4p
tcp	src/include/ndpi_typedefs.h	/^    struct ndpi_flow_tcp_struct tcp;$/;"	m	union:ndpi_flow_struct::__anon24	typeref:struct:ndpi_flow_struct::__anon24::ndpi_flow_tcp_struct
tcp	src/include/ndpi_typedefs.h	/^  const struct ndpi_tcphdr *tcp;        \/\/ TCP头$/;"	m	struct:ndpi_packet_struct	typeref:struct:ndpi_packet_struct::ndpi_tcphdr
tcpRoot	src/include/ndpi_typedefs.h	/^  ndpi_default_ports_tree_node_t *tcpRoot, *udpRoot;    \/\/ 分别指向tcp和udp二叉树，这两棵二叉树共同维护了proto_defaults这张表(实际不只是tcp和udp协议)的信息$/;"	m	struct:ndpi_detection_module_struct
tcp_count	example/ndpi_util.h	/^  u_int64_t tcp_count, udp_count;   \/\/ 分别记录了收到的TCP、UDP报文数量$/;"	m	struct:ndpi_stats
tcp_flags	src/lib/protocols/netflow.c	/^  u_int8_t  tcp_flags;  \/* Cumulative OR of tcp flags *\/$/;"	m	struct:flow_ver7_rec	file:
tcp_flags	src/lib/protocols/netflow.c	/^  u_int8_t tcp_flags;   \/* Cumulative OR of tcp flags *\/$/;"	m	struct:flow_ver5_rec	file:
tcp_max_retransmission_window_size	src/include/ndpi_typedefs.h	/^  u_int32_t tcp_max_retransmission_window_size;$/;"	m	struct:ndpi_detection_module_struct
tcp_retransmission	src/include/ndpi_typedefs.h	/^  u_int8_t tcp_retransmission;$/;"	m	struct:ndpi_packet_struct
tdiff_usec	src/lib/protocols/bittorrent.c	/^  u_int32_t ts_usec, tdiff_usec, window_size;$/;"	m	struct:ndpi_utp_hdr	file:
tdport	src/lib/protocols/teamspeak.c	/^  u_int16_t tdport = 0, tsport = 0;$/;"	v
tds_login_version	src/include/ndpi_typedefs.h	/^  u_int8_t tds_login_version;$/;"	m	struct:ndpi_flow_tcp_struct
tds_packet_header	src/lib/protocols/mssql_tds.c	/^struct tds_packet_header {$/;"	s	file:
tds_stage	src/include/ndpi_typedefs.h	/^  u_int32_t tds_stage:3;$/;"	m	struct:ndpi_flow_tcp_struct
teamviewer_check_http_payload	src/lib/protocols/http.c	/^static void teamviewer_check_http_payload(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)$/;"	f	file:
teamviewer_stage	src/include/ndpi_typedefs.h	/^  u_int8_t teamviewer_stage;$/;"	m	struct:ndpi_flow_tcp_struct
teamviewer_stage	src/include/ndpi_typedefs.h	/^  u_int8_t teamviewer_stage;$/;"	m	struct:ndpi_flow_udp_struct
teid	src/lib/protocols/gtp.c	/^  u_int32_t teid;$/;"	m	struct:gtp_header_generic	file:
telnet_stage	src/include/ndpi_typedefs.h	/^  u_int32_t telnet_stage:2;			\/\/ 0 - 2$/;"	m	struct:ndpi_flow_tcp_struct
terminateDetection	example/ndpiReader.c	/^static void terminateDetection(u_int16_t thread_id) {$/;"	f	file:
test_lib	example/ndpiReader.c	/^void test_lib() {$/;"	f
tftp_stage	src/include/ndpi_typedefs.h	/^  u_int32_t tftp_stage:1;$/;"	m	struct:ndpi_flow_udp_struct
the_prefix4_t	src/lib/third_party/include/ndpi_patricia.h	/^typedef struct the_prefix4_t {$/;"	s
the_prefix_t	src/lib/third_party/include/ndpi_patricia.h	/^typedef struct the_prefix_t {$/;"	s
thunder_stage	src/include/ndpi_typedefs.h	/^  u_int32_t thunder_stage:2;		        \/\/ 0 - 3$/;"	m	struct:ndpi_flow_struct
thunder_timeout	src/include/ndpi_typedefs.h	/^  u_int32_t thunder_timeout;$/;"	m	struct:ndpi_detection_module_struct
thunder_ts	src/include/ndpi_typedefs.h	/^  u_int32_t thunder_ts;$/;"	m	struct:ndpi_id_struct
tick_timestamp	src/include/ndpi_typedefs.h	/^  u_int32_t tick_timestamp;     \/\/ 收到包的时间(s)$/;"	m	struct:ndpi_packet_struct
tick_timestamp_l	src/include/ndpi_typedefs.h	/^  u_int64_t tick_timestamp_l;   \/\/ 收到包的时间(ms)$/;"	m	struct:ndpi_packet_struct
ticks_per_second	src/include/ndpi_typedefs.h	/^  u_int32_t ticks_per_second;$/;"	m	struct:ndpi_detection_module_struct
time	src/include/ndpi_typedefs.h	/^  u_int32_t		time;$/;"	m	struct:bt_announce
timezone	example/ndpiReader.c	/^struct timezone {$/;"	s	file:
tkl	src/lib/protocols/coap.c	/^  u_int8_t version:2, type:2, tkl:4;$/;"	m	struct:ndpi_coap_hdr	file:
token	src/lib/protocols/btlib.h	/^				*token,		\/\/ 20|8$/;"	m	struct:bt_parse_protocol::__anon11
token	src/lib/protocols/btlib.h	/^			 	*token,		\/\/ 20|8$/;"	m	struct:bt_parse_protocol::__anon12
top	src/include/ndpi_typedefs.h	/^  struct hash_ip4p_node   *top;$/;"	m	struct:hash_ip4p	typeref:struct:hash_ip4p::hash_ip4p_node
topDstStats	example/ndpiReader.c	/^struct top_stats *topSrcStats = NULL, *topDstStats = NULL;$/;"	v	typeref:struct:
topSrcStats	example/ndpiReader.c	/^struct top_stats *topSrcStats = NULL, *topDstStats = NULL;$/;"	v	typeref:struct:top_stats
top_ip	example/ndpiReader.c	/^  char top_ip[48]; \/*ip address that is contributed to > 95% of traffic*\/$/;"	m	struct:top_stats	file:
top_ip_addrs	example/ndpiReader.c	/^  struct info_pair top_ip_addrs[MAX_NUM_IP_ADDRESS];$/;"	m	struct:port_stats	typeref:struct:port_stats::info_pair	file:
top_stats	example/ndpiReader.c	/^struct top_stats {  $/;"	s	file:
top_stats_sort	example/ndpiReader.c	/^static int top_stats_sort(void *_a, void *_b) {$/;"	f	file:
tos	src/include/ndpi_typedefs.h	/^  u_int8_t tos;$/;"	m	struct:ndpi_iphdr
tos	src/lib/protocols/netflow.c	/^  u_int8_t  tos;        \/* IP Type-of-Service *\/$/;"	m	struct:flow_ver1_rec	file:
tos	src/lib/protocols/netflow.c	/^  u_int8_t  tos;        \/* IP Type-of-Service *\/$/;"	m	struct:flow_ver7_rec	file:
tos	src/lib/protocols/netflow.c	/^  u_int8_t tos;         \/* IP Type-of-Service *\/$/;"	m	struct:flow_ver5_rec	file:
tot_len	src/include/ndpi_typedefs.h	/^  u_int16_t tot_len;$/;"	m	struct:ndpi_iphdr
total_discarded_bytes	example/ndpi_util.h	/^  u_int64_t total_wire_bytes, total_ip_bytes, total_discarded_bytes;$/;"	m	struct:ndpi_stats
total_ip_bytes	example/ndpi_util.h	/^  u_int64_t total_wire_bytes, total_ip_bytes, total_discarded_bytes;$/;"	m	struct:ndpi_stats
total_patterns	src/lib/third_party/include/ahocorasick.h	/^  unsigned long total_patterns; \/* Total patterns in the automata *\/$/;"	m	struct:__anon8
total_wire_bytes	example/ndpi_util.h	/^  u_int64_t total_wire_bytes, total_ip_bytes, total_discarded_bytes;$/;"	m	struct:ndpi_stats
tpkt	src/lib/protocols/h323.c	/^struct tpkt {$/;"	s	file:
tr_id	src/include/ndpi_typedefs.h	/^  u_int16_t tr_id;$/;"	m	struct:ndpi_dns_packet_header
trace	example/ndpiReader.c	/^FILE *trace = NULL;$/;"	v
transaction_id	src/lib/protocols/netbios.c	/^  u_int16_t transaction_id, flags, questions, answer_rrs, authority_rrs, additional_rrs;$/;"	m	struct:netbios_header	file:
transaction_id	src/lib/protocols/stun.c	/^  u_int8_t  transaction_id[8];$/;"	m	struct:stun_packet_header	file:
trsm	src/include/ndpi_typedefs.h	/^  u_char trsm[6];$/;"	m	struct:ndpi_wifi_header
ts_usec	src/lib/protocols/bittorrent.c	/^  u_int32_t ts_usec, tdiff_usec, window_size;$/;"	m	struct:ndpi_utp_hdr	file:
tsport	src/lib/protocols/teamspeak.c	/^  u_int16_t tdport = 0, tsport = 0;$/;"	v
ttl	src/include/ndpi_typedefs.h	/^  u_int32_t label:20, exp:3, s:1, ttl:8;$/;"	m	struct:ndpi_mpls_header
ttl	src/include/ndpi_typedefs.h	/^  u_int8_t ttl;$/;"	m	struct:ndpi_cdp
ttl	src/include/ndpi_typedefs.h	/^  u_int8_t ttl;$/;"	m	struct:ndpi_iphdr
tvants_connection_timeout	src/include/ndpi_typedefs.h	/^  u_int32_t tvants_connection_timeout;$/;"	m	struct:ndpi_detection_module_struct
type	src/include/ndpi_typedefs.h	/^  u_int16_t type;$/;"	m	struct:ndpi_cdp
type	src/lib/protocols/coap.c	/^  u_int8_t version:2, type:2, tkl:4;$/;"	m	struct:ndpi_coap_hdr	file:
type	src/lib/protocols/mssql_tds.c	/^  u_int8_t type;$/;"	m	struct:tds_packet_header	file:
type	src/lib/protocols/rx.c	/^  u_int8_t type;$/;"	m	struct:ndpi_rx_header	file:
tz_dsttime	example/ndpiReader.c	/^  int tz_dsttime;     \/* type of dst correction *\/$/;"	m	struct:timezone	file:
tz_minuteswest	example/ndpiReader.c	/^  int tz_minuteswest; \/* minutes W of Greenwich *\/$/;"	m	struct:timezone	file:
u6_addr	src/include/ndpi_typedefs.h	/^  } u6_addr;  \/* 128-bit IP6 address *\/$/;"	m	struct:ndpi_in6_addr	typeref:union:ndpi_in6_addr::__anon17
u6_addr16	src/include/ndpi_typedefs.h	/^    u_int16_t  u6_addr16[8];$/;"	m	union:ndpi_in6_addr::__anon17
u6_addr32	src/include/ndpi_typedefs.h	/^    u_int32_t  u6_addr32[4];$/;"	m	union:ndpi_in6_addr::__anon17
u6_addr8	src/include/ndpi_typedefs.h	/^    u_int8_t   u6_addr8[16];$/;"	m	union:ndpi_in6_addr::__anon17
u_char	src/include/ndpi_win32.h	/^typedef unsigned char  u_char;$/;"	t
u_int	src/include/ndpi_win32.h	/^typedef uint           u_int;$/;"	t
u_int16_t	src/include/ndpi_win32.h	/^typedef u_short        u_int16_t;$/;"	t
u_int16_t	src/lib/protocols/btlib.c	/^typedef unsigned short int u_int16_t;$/;"	t	file:
u_int32_t	src/include/ndpi_win32.h	/^typedef uint           u_int32_t;$/;"	t
u_int32_t	src/lib/third_party/src/sort.c	/^typedef uint32_t u_int32_t;$/;"	t	file:
u_int32_t_swap	src/lib/third_party/src/sort.c	/^static void u_int32_t_swap(void *a, void *b, int size)$/;"	f	file:
u_int64_t	src/include/ndpi_win32.h	/^typedef unsigned       __int64 u_int64_t;$/;"	t
u_int64_t	src/lib/protocols/btlib.c	/^typedef unsigned long long int u_int64_t;$/;"	t	file:
u_int8_t	src/include/ndpi_win32.h	/^typedef u_char         u_int8_t;$/;"	t
u_int8_t	src/lib/protocols/btlib.c	/^typedef unsigned char u_int8_t;$/;"	t	file:
u_long	src/include/ndpi_win32.h	/^typedef unsigned long  u_long;$/;"	t
u_short	src/include/ndpi_win32.h	/^typedef unsigned short u_short;$/;"	t
ubntac2	src/include/ndpi_typedefs.h	/^    } ubntac2;$/;"	m	union:ndpi_flow_struct::__anon26	typeref:struct:ndpi_flow_struct::__anon26::__anon32
udp	src/include/ndpi_typedefs.h	/^    struct ndpi_flow_udp_struct udp;$/;"	m	union:ndpi_flow_struct::__anon24	typeref:struct:ndpi_flow_struct::__anon24::ndpi_flow_udp_struct
udp	src/include/ndpi_typedefs.h	/^  const struct ndpi_udphdr *udp;        \/\/ UDP头$/;"	m	struct:ndpi_packet_struct	typeref:struct:ndpi_packet_struct::ndpi_udphdr
udpRoot	src/include/ndpi_typedefs.h	/^  ndpi_default_ports_tree_node_t *tcpRoot, *udpRoot;    \/\/ 分别指向tcp和udp二叉树，这两棵二叉树共同维护了proto_defaults这张表(实际不只是tcp和udp协议)的信息$/;"	m	struct:ndpi_detection_module_struct
udp_count	example/ndpi_util.h	/^  u_int64_t tcp_count, udp_count;   \/\/ 分别记录了收到的TCP、UDP报文数量$/;"	m	struct:ndpi_stats
udport	src/lib/protocols/teamspeak.c	/^  u_int16_t udport = 0, usport = 0;$/;"	v
uint	src/include/ndpi_win32.h	/^typedef unsigned int   uint;$/;"	t
uint32_t	example/uthash.h	/^typedef unsigned int uint32_t;$/;"	t
uint8_t	example/uthash.h	/^typedef unsigned char uint8_t;$/;"	t
undetected_flows_deleted	example/ndpiReader.c	/^static u_int8_t undetected_flows_deleted = 0;$/;"	v	file:
updateIpTree	example/ndpiReader.c	/^int updateIpTree(const char *key, addr_node **vrootp) {$/;"	f
updatePortStats	example/ndpiReader.c	/^static void updatePortStats(struct port_stats **stats, u_int32_t port, const char *addr, u_int32_t num_pkts, u_int32_t num_bytes) {$/;"	f	file:
updateTopIpAddress	example/ndpiReader.c	/^void updateTopIpAddress(const char *addr, int count, struct info_pair top[], int size){$/;"	f
upper_ip	example/ndpi_util.h	/^  u_int32_t upper_ip;           \/\/ 记录了该数据流的目的IP$/;"	m	struct:ndpi_flow_info
upper_name	example/ndpi_util.h	/^  char lower_name[48], upper_name[48];  \/\/ 分别记录了该数据流的源IP名和目的IP名$/;"	m	struct:ndpi_flow_info
upper_port	example/ndpi_util.h	/^  u_int16_t upper_port;         \/\/ 记录了该数据流的目的端口$/;"	m	struct:ndpi_flow_info
urg	src/include/ndpi_typedefs.h	/^  u_int16_t doff:4, res1:4, cwr:1, ece:1, urg:1, ack:1, psh:1, rst:1, syn:1, fin:1;$/;"	m	struct:ndpi_tcphdr
urg	src/include/ndpi_typedefs.h	/^  u_int16_t res1:4, doff:4, fin:1, syn:1, rst:1, psh:1, ack:1, urg:1, ece:1, cwr:1;$/;"	m	struct:ndpi_tcphdr
urg_ptr	src/include/ndpi_typedefs.h	/^  u_int16_t urg_ptr;$/;"	m	struct:ndpi_tcphdr
url	src/include/ndpi_typedefs.h	/^    char *url, *content_type;$/;"	m	struct:ndpi_flow_struct::__anon25
usenet_stage	src/include/ndpi_typedefs.h	/^  u_int32_t usenet_stage:2;$/;"	m	struct:ndpi_flow_tcp_struct
user_agent_line	src/include/ndpi_typedefs.h	/^  struct ndpi_int_one_line_struct user_agent_line;$/;"	m	struct:ndpi_packet_struct	typeref:struct:ndpi_packet_struct::ndpi_int_one_line_struct
user_data	src/include/ndpi_typedefs.h	/^  void *user_data;$/;"	m	struct:ndpi_detection_module_struct
user_data	src/lib/third_party/include/ndpi_patricia.h	/^  void *user_data;      \/\/ 通用指针 或$/;"	m	union:patricia_node_value_t
user_value	src/lib/third_party/include/ndpi_patricia.h	/^  u_int32_t user_value; \/\/ 无符号整形(通常该字段记录了所属trie树节点关联的协议ID)$/;"	m	union:patricia_node_value_t
usport	src/lib/protocols/teamspeak.c	/^  u_int16_t udport = 0, usport = 0;$/;"	v
uthash_expand_fyi	example/uthash.h	102;"	d
uthash_fatal	example/uthash.h	83;"	d
uthash_free	example/uthash.h	89;"	d
uthash_malloc	example/uthash.h	86;"	d
uthash_memcmp	example/uthash.h	95;"	d
uthash_noexpand_fyi	example/uthash.h	99;"	d
uthash_strlen	example/uthash.h	92;"	d
v	src/lib/protocols/btlib.h	/^	u_int64_t		t,v;$/;"	m	struct:bt_parse_protocol
v	src/lib/protocols/btlib.h	/^	} v;$/;"	m	struct:bt_parse_data_cb	typeref:union:bt_parse_data_cb::__anon13
val	src/include/ndpi_typedefs.h	/^  volatile int    val;$/;"	m	struct:spinlock
value	src/include/ndpi_typedefs.h	/^  u_int8_t value;       \/\/ ndpi分配的协议ID$/;"	m	struct:__anon34
value	src/lib/third_party/include/ndpi_patricia.h	/^  union patricia_node_value_t value;    \/\/ 用于记录用户自定义的数据$/;"	m	struct:_patricia_node_t	typeref:union:_patricia_node_t::patricia_node_value_t
values	src/lib/protocols/btlib.h	/^				*values,	\/\/ (6+2)*x$/;"	m	struct:bt_parse_protocol::__anon12
values6	src/lib/protocols/btlib.h	/^				*values6,	\/\/ (18_3)*x$/;"	m	struct:bt_parse_protocol::__anon12
veoh_tv_stage	src/include/ndpi_typedefs.h	/^  u_int32_t veoh_tv_stage:2;$/;"	m	struct:ndpi_flow_tcp_struct
verbose	example/ndpiReader.c	/^static u_int8_t verbose = 0;        \/\/ 控制输出信息的详细程度:0\/1\/2\/3$/;"	v	file:
version	src/include/ndpi_typedefs.h	/^      char version[96];$/;"	m	struct:ndpi_flow_struct::__anon26::__anon32
version	src/include/ndpi_typedefs.h	/^      u_int8_t version;$/;"	m	struct:ndpi_flow_struct::__anon26::__anon28
version	src/include/ndpi_typedefs.h	/^  u_int8_t  version;         \/* set to 0 *\/$/;"	m	struct:ndpi_radiotap_header
version	src/include/ndpi_typedefs.h	/^  u_int8_t ihl:4, version:4;$/;"	m	struct:ndpi_iphdr
version	src/include/ndpi_typedefs.h	/^  u_int8_t version;$/;"	m	struct:ndpi_cdp
version	src/lib/protocols/coap.c	/^  u_int8_t version:2, type:2, tkl:4;$/;"	m	struct:ndpi_coap_hdr	file:
version	src/lib/protocols/h323.c	/^  u_int8_t version, reserved;$/;"	m	struct:tpkt	file:
version	src/lib/protocols/yahoo.c	/^  u_int16_t version;$/;"	m	struct:ndpi_yahoo_header	file:
vlan_count	example/ndpi_util.h	/^  u_int64_t vlan_count;             \/\/ 记录了收到的vlan报文数量$/;"	m	struct:ndpi_stats
vlan_id	example/ndpi_util.h	/^  u_int16_t vlan_id;            \/\/ 记录了该数据流关联的VLAN ID$/;"	m	struct:ndpi_flow_info
vnc_stage	src/include/ndpi_typedefs.h	/^  u_int32_t vnc_stage:2;			\/\/ 0 - 3$/;"	m	struct:ndpi_flow_tcp_struct
void_fn2_t	src/lib/third_party/include/ndpi_patricia.h	/^typedef void (*void_fn2_t)(prefix_t *prefix, void *data);$/;"	t
void_fn_t	src/lib/third_party/include/ndpi_patricia.h	/^typedef void (*void_fn_t)(void *data);$/;"	t
window	src/include/ndpi_typedefs.h	/^  u_int16_t window;$/;"	m	struct:ndpi_tcphdr
window	src/lib/protocols/mssql_tds.c	/^  u_int8_t window;$/;"	m	struct:tds_packet_header	file:
window_size	src/lib/protocols/bittorrent.c	/^  u_int32_t ts_usec, tdiff_usec, window_size;$/;"	m	struct:ndpi_utp_hdr	file:
workflow	example/ndpiReader.c	/^  struct ndpi_workflow * workflow;      \/\/ 指向一条对应的工作流$/;"	m	struct:reader_thread	typeref:struct:reader_thread::ndpi_workflow	file:
wow_stage	src/include/ndpi_typedefs.h	/^  u_int32_t wow_stage:2;$/;"	m	struct:ndpi_flow_tcp_struct
wsus_stage	src/include/ndpi_typedefs.h	/^  u_int32_t wsus_stage:1;$/;"	m	struct:ndpi_flow_udp_struct
x, y) return f	wireshark/ndpi.lua	/^   table.sort(a, function(x, y) return f(t[x], t[y]) end)$/;"	f
xbox_stage	src/include/ndpi_typedefs.h	/^  u_int32_t xbox_stage:1;$/;"	m	struct:ndpi_flow_udp_struct
xid	src/lib/protocols/dhcp.c	/^  uint32_t	xid;\/* 4 *\/$/;"	m	struct:__anon10	file:
y_e	src/lib/protocols/btlib.h	/^	u_int16_t y_e:1, y_r:1, y_q:1,$/;"	m	struct:bt_parse_protocol
y_q	src/lib/protocols/btlib.h	/^	u_int16_t y_e:1, y_r:1, y_q:1,$/;"	m	struct:bt_parse_protocol
y_r	src/lib/protocols/btlib.h	/^	u_int16_t y_e:1, y_r:1, y_q:1,$/;"	m	struct:bt_parse_protocol
yahoo_conf_logged_in	src/include/ndpi_typedefs.h	/^  u_int32_t yahoo_conf_logged_in:1;$/;"	m	struct:ndpi_id_struct
yahoo_detect_http_connections	src/include/ndpi_typedefs.h	/^  u_int8_t yahoo_detect_http_connections;$/;"	m	struct:ndpi_detection_module_struct
yahoo_detection_finished	src/include/ndpi_typedefs.h	/^  u_int32_t yahoo_detection_finished:2;$/;"	m	struct:ndpi_flow_struct
yahoo_http_proxy_stage	src/include/ndpi_typedefs.h	/^  u_int32_t yahoo_http_proxy_stage:2;$/;"	m	struct:ndpi_flow_tcp_struct
yahoo_lan_video_timeout	src/include/ndpi_typedefs.h	/^  u_int32_t yahoo_lan_video_timeout;$/;"	m	struct:ndpi_detection_module_struct
yahoo_sip_comm	src/include/ndpi_typedefs.h	/^  u_int32_t yahoo_sip_comm:1;$/;"	m	struct:ndpi_flow_tcp_struct
yahoo_video_lan_dir	src/include/ndpi_typedefs.h	/^  u_int32_t yahoo_video_lan_dir:1;$/;"	m	struct:ndpi_id_struct
yahoo_video_lan_timer	src/include/ndpi_typedefs.h	/^  u_int32_t yahoo_video_lan_timer;$/;"	m	struct:ndpi_id_struct
yahoo_voice_conf_logged_in	src/include/ndpi_typedefs.h	/^  u_int32_t yahoo_voice_conf_logged_in:1;$/;"	m	struct:ndpi_id_struct
yiaddr	src/lib/protocols/dhcp.c	/^  uint32_t	yiaddr;\/* 16 *\/$/;"	m	struct:__anon10	file:
zattoo_connection_timeout	src/include/ndpi_typedefs.h	/^  u_int32_t zattoo_connection_timeout;$/;"	m	struct:ndpi_detection_module_struct
zattoo_stage	src/include/ndpi_typedefs.h	/^  u_int32_t zattoo_stage:3;$/;"	m	struct:ndpi_flow_struct
zattoo_ts	src/include/ndpi_typedefs.h	/^  u_int32_t zattoo_ts;$/;"	m	struct:ndpi_id_struct
